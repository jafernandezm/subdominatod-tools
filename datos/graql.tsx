/*! For license information please see LICENSES */
(window.webpackJsonp = window.webpackJsonp || []).push(
  [[59],
  [
    function (e, t, n) {
      'use strict';
      n.r(t),
      n.d(t, 'EffectScope', (function () {
        return r
      })),
      n.d(t, 'computed', (function () {
        return o
      })),
      n.d(t, 'customRef', (function () {
        return c
      })),
      n.d(t, 'defineAsyncComponent', (function () {
        return l
      })),
      n.d(t, 'defineComponent', (function () {
        return d
      })),
      n.d(t, 'del', (function () {
        return del
      })),
      n.d(t, 'effectScope', (function () {
        return m
      })),
      n.d(t, 'getCurrentInstance', (function () {
        return h
      })),
      n.d(t, 'getCurrentScope', (function () {
        return f
      })),
      n.d(t, 'h', (function () {
        return v
      })),
      n.d(t, 'inject', (function () {
        return y
      })),
      n.d(t, 'isProxy', (function () {
        return w
      })),
      n.d(t, 'isReactive', (function () {
        return k
      })),
      n.d(t, 'isReadonly', (function () {
        return S
      })),
      n.d(t, 'isRef', (function () {
        return T
      })),
      n.d(t, 'isShallow', (function () {
        return E
      })),
      n.d(t, 'markRaw', (function () {
        return I
      })),
      n.d(t, 'mergeDefaults', (function () {
        return _
      })),
      n.d(t, 'nextTick', (function () {
        return C
      })),
      n.d(t, 'onActivated', (function () {
        return N
      })),
      n.d(t, 'onBeforeMount', (function () {
        return x
      })),
      n.d(t, 'onBeforeUnmount', (function () {
        return A
      })),
      n.d(t, 'onBeforeUpdate', (function () {
        return O
      })),
      n.d(t, 'onDeactivated', (function () {
        return D
      })),
      n.d(t, 'onErrorCaptured', (function () {
        return R
      })),
      n.d(t, 'onMounted', (function () {
        return P
      })),
      n.d(t, 'onRenderTracked', (function () {
        return L
      })),
      n.d(t, 'onRenderTriggered', (function () {
        return U
      })),
      n.d(t, 'onScopeDispose', (function () {
        return F
      })),
      n.d(t, 'onServerPrefetch', (function () {
        return M
      })),
      n.d(t, 'onUnmounted', (function () {
        return $
      })),
      n.d(t, 'onUpdated', (function () {
        return j
      })),
      n.d(t, 'provide', (function () {
        return V
      })),
      n.d(t, 'proxyRefs', (function () {
        return G
      })),
      n.d(t, 'reactive', (function () {
        return B
      })),
      n.d(t, 'readonly', (function () {
        return z
      })),
      n.d(t, 'ref', (function () {
        return H
      })),
      n.d(t, 'set', (function () {
        return Q
      })),
      n.d(t, 'shallowReactive', (function () {
        return W
      })),
      n.d(t, 'shallowReadonly', (function () {
        return K
      })),
      n.d(t, 'shallowRef', (function () {
        return J
      })),
      n.d(t, 'toRaw', (function () {
        return X
      })),
      n.d(t, 'toRef', (function () {
        return Z
      })),
      n.d(t, 'toRefs', (function () {
        return Y
      })),
      n.d(t, 'triggerRef', (function () {
        return ee
      })),
      n.d(t, 'unref', (function () {
        return te
      })),
      n.d(t, 'useAttrs', (function () {
        return ne
      })),
      n.d(t, 'useCssModule', (function () {
        return ie
      })),
      n.d(t, 'useCssVars', (function () {
        return re
      })),
      n.d(t, 'useListeners', (function () {
        return ae
      })),
      n.d(t, 'useSlots', (function () {
        return oe
      })),
      n.d(t, 'version', (function () {
        return se
      })),
      n.d(t, 'watch', (function () {
        return ce
      })),
      n.d(t, 'watchEffect', (function () {
        return le
      })),
      n.d(t, 'watchPostEffect', (function () {
        return ue
      })),
      n.d(t, 'watchSyncEffect', (function () {
        return de
      })),
      t.default = Vue;
      const {
        EffectScope: r,
        computed: o,
        customRef: c,
        defineAsyncComponent: l,
        defineComponent: d,
        del: del,
        effectScope: m,
        getCurrentInstance: h,
        getCurrentScope: f,
        h: v,
        inject: y,
        isProxy: w,
        isReactive: k,
        isReadonly: S,
        isRef: T,
        isShallow: E,
        markRaw: I,
        mergeDefaults: _,
        nextTick: C,
        onActivated: N,
        onBeforeMount: x,
        onBeforeUnmount: A,
        onBeforeUpdate: O,
        onDeactivated: D,
        onErrorCaptured: R,
        onMounted: P,
        onRenderTracked: L,
        onRenderTriggered: U,
        onScopeDispose: F,
        onServerPrefetch: M,
        onUnmounted: $,
        onUpdated: j,
        provide: V,
        proxyRefs: G,
        reactive: B,
        readonly: z,
        ref: H,
        set: Q,
        shallowReactive: W,
        shallowReadonly: K,
        shallowRef: J,
        toRaw: X,
        toRef: Z,
        toRefs: Y,
        triggerRef: ee,
        unref: te,
        useAttrs: ne,
        useCssModule: ie,
        useCssVars: re,
        useListeners: ae,
        useSlots: oe,
        version: se,
        watch: ce,
        watchEffect: le,
        watchPostEffect: ue,
        watchSyncEffect: de
      }
      = Vue
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'k', (function () {
        return c
      })),
      n.d(t, 'm', (function () {
        return l
      })),
      n.d(t, 'l', (function () {
        return d
      })),
      n.d(t, 'e', (function () {
        return m
      })),
      n.d(t, 'b', (function () {
        return h
      })),
      n.d(t, 's', (function () {
        return f
      })),
      n.d(t, 'g', (function () {
        return v
      })),
      n.d(t, 'h', (function () {
        return y
      })),
      n.d(t, 'd', (function () {
        return w
      })),
      n.d(t, 'r', (function () {
        return k
      })),
      n.d(t, 'j', (function () {
        return S
      })),
      n.d(t, 't', (function () {
        return T
      })),
      n.d(t, 'o', (function () {
        return E
      })),
      n.d(t, 'q', (function () {
        return I
      })),
      n.d(t, 'f', (function () {
        return _
      })),
      n.d(t, 'c', (function () {
        return C
      })),
      n.d(t, 'i', (function () {
        return N
      })),
      n.d(t, 'p', (function () {
        return x
      })),
      n.d(t, 'a', (function () {
        return U
      })),
      n.d(t, 'v', (function () {
        return F
      })),
      n.d(t, 'n', (function () {
        return M
      })),
      n.d(t, 'u', (function () {
        return $
      }));
      var r = n(0),
      o = n(21);
      function c(e) {
        r.default.config.errorHandler &&
        r.default.config.errorHandler(e)
      }
      function l(e) {
        return e.then((e => e.default || e))
      }
      function d(e) {
        return e.$options &&
        'function' == typeof e.$options.fetch &&
        !e.$options.fetch.length
      }
      function m(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : [];
        const n = e.$children ||
        [];
        for (const e of n) e.$fetch &&
        t.push(e),
        e.$children &&
        m(e, t);
        return t
      }
      function h(e, t) {
        if (!t && e.options.__hasNuxtData) return;
        const n = e.options._originDataFn ||
        e.options.data ||
        function () {
          return {
          }
        };
        e.options._originDataFn = n,
        e.options.data = function () {
          const data = n.call(this, this);
          return this.$ssrContext &&
          (t = this.$ssrContext.asyncData[e.cid]),
          {
            ...data,
            ...t
          }
        },
        e.options.__hasNuxtData = !0,
        e._Ctor &&
        e._Ctor.options &&
        (e._Ctor.options.data = e.options.data)
      }
      function f(e) {
        return e.options &&
        e._Ctor === e ||
        (
          e.options ? (e._Ctor = e, e.extendOptions = e.options) : (e = r.default.extend(e))._Ctor = e,
          !e.options.name &&
          e.options.__file &&
          (e.options.name = e.options.__file)
        ),
        e
      }
      function v(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] &&
        arguments[1],
        n = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : 'components';
        return Array.prototype.concat.apply(
          [],
          e.matched.map(((e, r) => Object.keys(e[n]).map((o => (t && t.push(r), e[n][o])))))
        )
      }
      function y(e) {
        return v(
          e,
          arguments.length > 1 &&
          void 0 !== arguments[1] &&
          arguments[1],
          'instances'
        )
      }
      function w(e, t) {
        return Array.prototype.concat.apply(
          [],
          e.matched.map(
            (
              (e, n) => Object.keys(e.components).reduce(
                (
                  (r, o) => (
                    e.components[o] ? r.push(t(e.components[o], e.instances[o], e, o, n)) : delete e.components[o],
                    r
                  )
                ),
                []
              )
            )
          )
        )
      }
      function k(e, t) {
        return Promise.all(
          w(
            e,
            (
              async(e, n, r, o) => {
                if ('function' == typeof e && !e.options) try {
                  e = await e()
                } catch (e) {
                  if (
                    e &&
                    'ChunkLoadError' === e.name &&
                    'undefined' != typeof window &&
                    window.sessionStorage
                  ) {
                    const e = Date.now(),
                    t = parseInt(window.sessionStorage.getItem('nuxt-reload'));
                    (!t || t + 60000 < e) &&
                    (
                      window.sessionStorage.setItem('nuxt-reload', e),
                      window.location.reload(!0)
                    )
                  }
                  throw e
                }
                return r.components[o] = e = f(e),
                'function' == typeof t ? t(e, n, r, o) : e
              }
            )
          )
        )
      }
      async function S(e) {
        if (e) return await k(e),
        {
          ...e,
          meta: v(e).map(((t, n) => ({
            ...t.options.meta,
            ...(e.matched[n] || {
            }).meta
          })))
        }
      }
      async function T(e, t) {
        e.context ||
        (
          e.context = {
            isStatic: !1,
            isDev: !1,
            isHMR: !1,
            app: e,
            store: e.store,
            payload: t.payload,
            error: t.error,
            base: e.router.options.base,
            env: {
              APP_NAME: 'FlGenAiNuxt'
            }
          },
          t.req &&
          (e.context.req = t.req),
          t.res &&
          (e.context.res = t.res),
          t.ssrContext &&
          (e.context.ssrContext = t.ssrContext),
          e.context.redirect = (t, path, n) => {
            if (!t) return;
            e.context._redirected = !0;
            let r = typeof path;
            if (
              'number' == typeof t ||
              'undefined' !== r &&
              'object' !== r ||
              (n = path || {
              }, r = typeof (path = t), t = 302),
              'object' === r &&
              (path = e.router.resolve(path).route.fullPath),
              !/(^[.]{1,2}\/)|(^\/(?!\/))/.test(path)
            ) throw path = Object(o.d) (path, n),
            window.location.assign(path),
            new Error('ERR_REDIRECT');
            e.context.next({
              path: path,
              query: n,
              status: t
            })
          },
          e.context.nuxtState = window.__NUXT__
        );
        const [n,
        r] = await Promise.all([S(t.route),
        S(t.from)]);
        t.route &&
        (e.context.route = n),
        t.from &&
        (e.context.from = r),
        t.error &&
        (e.context.error = t.error),
        e.context.next = t.next,
        e.context._redirected = !1,
        e.context._errored = !1,
        e.context.isHMR = !1,
        e.context.params = e.context.route.params ||
        {
        },
        e.context.query = e.context.route.query ||
        {
        }
      }
      function E(e, t, n) {
        return !e.length ||
        t._redirected ||
        t._errored ||
        n &&
        n.aborted ? Promise.resolve() : I(e[0], t).then((() => E(e.slice(1), t, n)))
      }
      function I(e, t) {
        let n;
        return n = 2 === e.length ? new Promise(
          (n => {
            e(t, (function (e, data) {
              e &&
              t.error(e),
              n(data = data || {
              })
            }))
          })
        ) : e(t),
        n &&
        n instanceof Promise &&
        'function' == typeof n.then ? n : Promise.resolve(n)
      }
      function _(base, e) {
        if ('hash' === e) return window.location.hash.replace(/^#\//, '');
        base = decodeURI(base).slice(0, - 1);
        let path = decodeURI(window.location.pathname);
        base &&
        path.startsWith(base) &&
        (path = path.slice(base.length));
        const t = (path || '/') + window.location.search + window.location.hash;
        return Object(o.c) (t)
      }
      function C(e, t) {
        return function (e, t) {
          const n = new Array(e.length);
          for (let i = 0; i < e.length; i++) 'object' == typeof e[i] &&
          (n[i] = new RegExp('^(?:' + e[i].pattern + ')$', L(t)));
          return function (t, r) {
            let path = '';
            const data = t ||
            {
            },
            o = (r || {
            }).pretty ? O : encodeURIComponent;
            for (let i = 0; i < e.length; i++) {
              const t = e[i];
              if ('string' == typeof t) {
                path += t;
                continue
              }
              const r = data[t.name ||
              'pathMatch'];
              let c;
              if (null == r) {
                if (t.optional) {
                  t.partial &&
                  (path += t.prefix);
                  continue
                }
                throw new TypeError('Expected "' + t.name + '" to be defined')
              }
              if (Array.isArray(r)) {
                if (!t.repeat) throw new TypeError(
                  'Expected "' + t.name + '" to not repeat, but received `' + JSON.stringify(r) + '`'
                );
                if (0 === r.length) {
                  if (t.optional) continue;
                  throw new TypeError('Expected "' + t.name + '" to not be empty')
                }
                for (let e = 0; e < r.length; e++) {
                  if (c = o(r[e]), !n[i].test(c)) throw new TypeError(
                    'Expected all "' + t.name + '" to match "' + t.pattern + '", but received `' + JSON.stringify(c) + '`'
                  );
                  path += (0 === e ? t.prefix : t.delimiter) + c
                }
              } else {
                if (c = t.asterisk ? D(r) : o(r), !n[i].test(c)) throw new TypeError(
                  'Expected "' + t.name + '" to match "' + t.pattern + '", but received "' + c + '"'
                );
                path += t.prefix + c
              }
            }
            return path
          }
        }(
          function (e, t) {
            const n = [];
            let r = 0,
            o = 0,
            path = '';
            const c = t &&
            t.delimiter ||
            '/';
            let l;
            for (; null != (l = A.exec(e)); ) {
              const t = l[0],
              d = l[1],
              m = l.index;
              if (path += e.slice(o, m), o = m + t.length, d) {
                path += d[1];
                continue
              }
              const h = e[o],
              f = l[2],
              v = l[3],
              y = l[4],
              w = l[5],
              k = l[6],
              S = l[7];
              path &&
              (n.push(path), path = '');
              const T = null != f &&
              null != h &&
              h !== f,
              E = '+' === k ||
              '*' === k,
              I = '?' === k ||
              '*' === k,
              _ = l[2] ||
              c,
              pattern = y ||
              w;
              n.push({
                name: v ||
                r++,
                prefix: f ||
                '',
                delimiter: _,
                optional: I,
                repeat: E,
                partial: T,
                asterisk: Boolean(S),
                pattern: pattern ? P(pattern) : S ? '.*' : '[^' + R(_) + ']+?'
              })
            }
            o < e.length &&
            (path += e.substr(o));
            path &&
            n.push(path);
            return n
          }(e, t),
          t
        )
      }
      function N(e, t) {
        const n = {},
        r = {
          ...e,
          ...t
        };
        for (const o in r) String(e[o]) !== String(t[o]) &&
        (n[o] = !0);
        return n
      }
      function x(e) {
        let t;
        if (e.message || 'string' == typeof e) t = e.message ||
        e;
         else try {
          t = JSON.stringify(e, null, 2)
        } catch (n) {
          t = '['.concat(e.constructor.name, ']')
        }
        return {
          ...e,
          message: t,
          statusCode: e.statusCode ||
          e.status ||
          e.response &&
          e.response.status ||
          500
        }
      }
      window.onNuxtReadyCbs = [],
      window.onNuxtReady = e => {
        window.onNuxtReadyCbs.push(e)
      };
      const A = new RegExp(
        ['(\\\\.)',
        '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'),
        'g'
      );
      function O(e, t) {
        const n = t ? /[?#]/g : /[/?#]/g;
        return encodeURI(e).replace(n, (e => '%' + e.charCodeAt(0).toString(16).toUpperCase()))
      }
      function D(e) {
        return O(e, !0)
      }
      function R(e) {
        return e.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1')
      }
      function P(e) {
        return e.replace(/([=!:$/()])/g, '\\$1')
      }
      function L(e) {
        return e &&
        e.sensitive ? '' : 'i'
      }
      function U(e, t, n) {
        e.$options[t] ||
        (e.$options[t] = []),
        e.$options[t].includes(n) ||
        e.$options[t].push(n)
      }
      const F = o.b,
      M = (o.e, o.a);
      function $(e) {
        try {
          window.history.scrollRestoration = e
        } catch (e) {
        }
      }
    },
    function (e, t, n) {
      'use strict';
      function r(e, t, n, r, o, c, l, d) {
        var m,
        h = 'function' == typeof e ? e.options : e;
        if (
          t &&
          (h.render = t, h.staticRenderFns = n, h._compiled = !0),
          r &&
          (h.functional = !0),
          c &&
          (h._scopeId = 'data-v-' + c),
          l ? (
            m = function (e) {
              if (
                (
                  e = e ||
                  this.$vnode &&
                  this.$vnode.ssrContext ||
                  this.parent &&
                  this.parent.$vnode &&
                  this.parent.$vnode.ssrContext
                ) ||
                'undefined' == typeof __VUE_SSR_CONTEXT__ ||
                (e = __VUE_SSR_CONTEXT__),
                Array.isArray(h.injectStyles)
              ) for (var i = 0; i < h.injectStyles.length; i += 1) {
                const style = h.injectStyles[i];
                style.__inject__ &&
                style.__inject__(e)
              }
              o &&
              o.call(this, e),
              e &&
              e._registeredComponents &&
              e._registeredComponents.add(l)
            },
            h._ssrRegister = m
          ) : o &&
          (
            m = d ? function () {
              o.call(
                this,
                (h.functional ? this.parent : this).$root.$options.shadowRoot
              )
            }
             : o
          ),
          m
        ) if (h.functional) {
          h._injectStyles = m;
          var f = h.render;
          h.render = function (e, t) {
            return m.call(t),
            f(e, t)
          }
        } else {
          var v = h.beforeCreate;
          h.beforeCreate = v ? [].concat(v, m) : [
            m
          ]
        }
        return {
          exports: e,
          options: h
        }
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    function (e, t, n) {
      'use strict';
      function r(e) {
        return function (t) {
          let n = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          return new Promise(
            (
              (r, o) => {
                var c,
                l;
                e.$httpGql({
                  useSubordinateOauth: null !== (c = null === (l = e.$httpConfig) || void 0 === l ? void 0 : l.auth) &&
                  void 0 !== c &&
                  c,
                  auth: !0,
                  handleApiErrors: !0,
                  cache: n.cache ||
                  {
                    strategy: 'cacheFirst',
                    storage: 'memory'
                  }
                }).post(t).json().then(
                  (
                    e => {
                      let {
                        data: data,
                        errors: t
                      }
                      = e;
                      if (t && n.throwOnError) {
                        var c;
                        const e = t[0];
                        o(
                          new Error(
                            e.message,
                            {
                              cause: {
                                status: null === (c = e.extensions) ||
                                void 0 === c ? void 0 : c.code
                              }
                            }
                          )
                        )
                      } else r(null != n && n.dataKey ? data[n.dataKey] : data)
                    }
                  ),
                  o
                )
              }
            )
          )
        }
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    function (e, t, n) {
      'use strict';
      function r(code) {
        return 9 === code ||
        32 === code
      }
      n.d(t, 'a', (function () {
        return I
      }));
      const o = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
      function c(e) {
        return l[e.charCodeAt(0)]
      }
      const l = [
        '\\u0000',
        '\\u0001',
        '\\u0002',
        '\\u0003',
        '\\u0004',
        '\\u0005',
        '\\u0006',
        '\\u0007',
        '\\b',
        '\\t',
        '\\n',
        '\\u000B',
        '\\f',
        '\\r',
        '\\u000E',
        '\\u000F',
        '\\u0010',
        '\\u0011',
        '\\u0012',
        '\\u0013',
        '\\u0014',
        '\\u0015',
        '\\u0016',
        '\\u0017',
        '\\u0018',
        '\\u0019',
        '\\u001A',
        '\\u001B',
        '\\u001C',
        '\\u001D',
        '\\u001E',
        '\\u001F',
        '',
        '',
        '\\"',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '\\\\',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '\\u007F',
        '\\u0080',
        '\\u0081',
        '\\u0082',
        '\\u0083',
        '\\u0084',
        '\\u0085',
        '\\u0086',
        '\\u0087',
        '\\u0088',
        '\\u0089',
        '\\u008A',
        '\\u008B',
        '\\u008C',
        '\\u008D',
        '\\u008E',
        '\\u008F',
        '\\u0090',
        '\\u0091',
        '\\u0092',
        '\\u0093',
        '\\u0094',
        '\\u0095',
        '\\u0096',
        '\\u0097',
        '\\u0098',
        '\\u0099',
        '\\u009A',
        '\\u009B',
        '\\u009C',
        '\\u009D',
        '\\u009E',
        '\\u009F'
      ];
      function d(e, t) {
        if (!Boolean(e)) throw new Error(t)
      }
      const m = 10,
      h = 2;
      function f(e, t) {
        switch (typeof e) {
          case 'string':
            return JSON.stringify(e);
          case 'function':
            return e.name ? `[function ${ e.name }]` : '[function]';
          case 'object':
            return function (e, t) {
              if (null === e) return 'null';
              if (t.includes(e)) return '[Circular]';
              const n = [
                ...t,
                e
              ];
              if (function (e) {
                return 'function' == typeof e.toJSON
              }(e)) {
                const t = e.toJSON();
                if (t !== e) return 'string' == typeof t ? t : f(t, n)
              } else if (Array.isArray(e)) return function (e, t) {
                if (0 === e.length) return '[]';
                if (t.length > h) return '[Array]';
                const n = Math.min(m, e.length),
                r = e.length - n,
                o = [];
                for (let i = 0; i < n; ++i) o.push(f(e[i], t));
                1 === r ? o.push('... 1 more item') : r > 1 &&
                o.push(`... ${ r } more items`);
                return '[' + o.join(', ') + ']'
              }(e, n);
              return function (object, e) {
                const t = Object.entries(object);
                if (0 === t.length) return '{}';
                if (e.length > h) return '[' + function (object) {
                  const e = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');
                  if ('Object' === e && 'function' == typeof object.constructor) {
                    const e = object.constructor.name;
                    if ('string' == typeof e && '' !== e) return e
                  }
                  return e
                }(object) + ']';
                const n = t.map((([t,
                n]) => t + ': ' + f(n, e)));
                return '{ ' + n.join(', ') + ' }'
              }(e, n)
            }(e, t);
          default:
            return String(e)
        }
      }
      Symbol.toStringTag;
      Symbol.toStringTag;
      const v = {
        Name: [],
        Document: [
          'definitions'
        ],
        OperationDefinition: [
          'name',
          'variableDefinitions',
          'directives',
          'selectionSet'
        ],
        VariableDefinition: [
          'variable',
          'type',
          'defaultValue',
          'directives'
        ],
        Variable: [
          'name'
        ],
        SelectionSet: [
          'selections'
        ],
        Field: [
          'alias',
          'name',
          'arguments',
          'directives',
          'selectionSet'
        ],
        Argument: [
          'name',
          'value'
        ],
        FragmentSpread: [
          'name',
          'directives'
        ],
        InlineFragment: [
          'typeCondition',
          'directives',
          'selectionSet'
        ],
        FragmentDefinition: [
          'name',
          'variableDefinitions',
          'typeCondition',
          'directives',
          'selectionSet'
        ],
        IntValue: [],
        FloatValue: [],
        StringValue: [],
        BooleanValue: [],
        NullValue: [],
        EnumValue: [],
        ListValue: [
          'values'
        ],
        ObjectValue: [
          'fields'
        ],
        ObjectField: [
          'name',
          'value'
        ],
        Directive: [
          'name',
          'arguments'
        ],
        NamedType: [
          'name'
        ],
        ListType: [
          'type'
        ],
        NonNullType: [
          'type'
        ],
        SchemaDefinition: [
          'description',
          'directives',
          'operationTypes'
        ],
        OperationTypeDefinition: [
          'type'
        ],
        ScalarTypeDefinition: [
          'description',
          'name',
          'directives'
        ],
        ObjectTypeDefinition: [
          'description',
          'name',
          'interfaces',
          'directives',
          'fields'
        ],
        FieldDefinition: [
          'description',
          'name',
          'arguments',
          'type',
          'directives'
        ],
        InputValueDefinition: [
          'description',
          'name',
          'type',
          'defaultValue',
          'directives'
        ],
        InterfaceTypeDefinition: [
          'description',
          'name',
          'interfaces',
          'directives',
          'fields'
        ],
        UnionTypeDefinition: [
          'description',
          'name',
          'directives',
          'types'
        ],
        EnumTypeDefinition: [
          'description',
          'name',
          'directives',
          'values'
        ],
        EnumValueDefinition: [
          'description',
          'name',
          'directives'
        ],
        InputObjectTypeDefinition: [
          'description',
          'name',
          'directives',
          'fields'
        ],
        DirectiveDefinition: [
          'description',
          'name',
          'arguments',
          'locations'
        ],
        SchemaExtension: [
          'directives',
          'operationTypes'
        ],
        ScalarTypeExtension: [
          'name',
          'directives'
        ],
        ObjectTypeExtension: [
          'name',
          'interfaces',
          'directives',
          'fields'
        ],
        InterfaceTypeExtension: [
          'name',
          'interfaces',
          'directives',
          'fields'
        ],
        UnionTypeExtension: [
          'name',
          'directives',
          'types'
        ],
        EnumTypeExtension: [
          'name',
          'directives',
          'values'
        ],
        InputObjectTypeExtension: [
          'name',
          'directives',
          'fields'
        ]
      },
      y = new Set(Object.keys(v));
      function w(e) {
        const t = null == e ? void 0 : e.kind;
        return 'string' == typeof t &&
        y.has(t)
      }
      var k,
      S;
      !function (e) {
        e.QUERY = 'query',
        e.MUTATION = 'mutation',
        e.SUBSCRIPTION = 'subscription'
      }(k || (k = {})),
      function (e) {
        e.NAME = 'Name',
        e.DOCUMENT = 'Document',
        e.OPERATION_DEFINITION = 'OperationDefinition',
        e.VARIABLE_DEFINITION = 'VariableDefinition',
        e.SELECTION_SET = 'SelectionSet',
        e.FIELD = 'Field',
        e.ARGUMENT = 'Argument',
        e.FRAGMENT_SPREAD = 'FragmentSpread',
        e.INLINE_FRAGMENT = 'InlineFragment',
        e.FRAGMENT_DEFINITION = 'FragmentDefinition',
        e.VARIABLE = 'Variable',
        e.INT = 'IntValue',
        e.FLOAT = 'FloatValue',
        e.STRING = 'StringValue',
        e.BOOLEAN = 'BooleanValue',
        e.NULL = 'NullValue',
        e.ENUM = 'EnumValue',
        e.LIST = 'ListValue',
        e.OBJECT = 'ObjectValue',
        e.OBJECT_FIELD = 'ObjectField',
        e.DIRECTIVE = 'Directive',
        e.NAMED_TYPE = 'NamedType',
        e.LIST_TYPE = 'ListType',
        e.NON_NULL_TYPE = 'NonNullType',
        e.SCHEMA_DEFINITION = 'SchemaDefinition',
        e.OPERATION_TYPE_DEFINITION = 'OperationTypeDefinition',
        e.SCALAR_TYPE_DEFINITION = 'ScalarTypeDefinition',
        e.OBJECT_TYPE_DEFINITION = 'ObjectTypeDefinition',
        e.FIELD_DEFINITION = 'FieldDefinition',
        e.INPUT_VALUE_DEFINITION = 'InputValueDefinition',
        e.INTERFACE_TYPE_DEFINITION = 'InterfaceTypeDefinition',
        e.UNION_TYPE_DEFINITION = 'UnionTypeDefinition',
        e.ENUM_TYPE_DEFINITION = 'EnumTypeDefinition',
        e.ENUM_VALUE_DEFINITION = 'EnumValueDefinition',
        e.INPUT_OBJECT_TYPE_DEFINITION = 'InputObjectTypeDefinition',
        e.DIRECTIVE_DEFINITION = 'DirectiveDefinition',
        e.SCHEMA_EXTENSION = 'SchemaExtension',
        e.SCALAR_TYPE_EXTENSION = 'ScalarTypeExtension',
        e.OBJECT_TYPE_EXTENSION = 'ObjectTypeExtension',
        e.INTERFACE_TYPE_EXTENSION = 'InterfaceTypeExtension',
        e.UNION_TYPE_EXTENSION = 'UnionTypeExtension',
        e.ENUM_TYPE_EXTENSION = 'EnumTypeExtension',
        e.INPUT_OBJECT_TYPE_EXTENSION = 'InputObjectTypeExtension'
      }(S || (S = {}));
      const T = Object.freeze({
      });
      function E(e, t) {
        const n = e[t];
        return 'object' == typeof n ? n : 'function' == typeof n ? {
          enter: n,
          leave: void 0
        }
         : {
          enter: e.enter,
          leave: e.leave
        }
      }
      function I(e) {
        return function (e, t, n = v) {
          const r = new Map;
          for (const e of Object.values(S)) r.set(e, E(t, e));
          let o,
          c,
          l,
          m = Array.isArray(e),
          h = [
            e
          ],
          y = - 1,
          k = [],
          I = e;
          const path = [],
          _ = [];
          do {
            y++;
            const e = y === h.length,
            v = e &&
            0 !== k.length;
            if (e) {
              if (c = 0 === _.length ? void 0 : path[path.length - 1], I = l, l = _.pop(), v) if (m) {
                I = I.slice();
                let e = 0;
                for (const [t,
                n]of k) {
                  const r = t - e;
                  null === n ? (I.splice(r, 1), e++) : I[r] = n
                }
              } else {
                I = {
                  ...I
                };
                for (const [e,
                t]of k) I[e] = t
              }
              y = o.index,
              h = o.keys,
              k = o.edits,
              m = o.inArray,
              o = o.prev
            } else if (l) {
              if (c = m ? y : h[y], I = l[c], null == I) continue;
              path.push(c)
            }
            let S;
            if (!Array.isArray(I)) {
              var C,
              N;
              w(I) ||
              d(!1, `Invalid AST Node: ${ A = I,
              f(A, []) }.`);
              const n = e ? null === (C = r.get(I.kind)) ||
              void 0 === C ? void 0 : C.leave : null === (N = r.get(I.kind)) ||
              void 0 === N ? void 0 : N.enter;
              if (S = null == n ? void 0 : n.call(t, I, c, l, path, _), S === T) break;
              if (!1 === S) {
                if (!e) {
                  path.pop();
                  continue
                }
              } else if (void 0 !== S && (k.push([c,
              S]), !e)) {
                if (!w(S)) {
                  path.pop();
                  continue
                }
                I = S
              }
            }
            var x;
            void 0 === S &&
            v &&
            k.push([c,
            I]),
            e ? path.pop() : (
              o = {
                inArray: m,
                index: y,
                keys: h,
                edits: k,
                prev: o
              },
              m = Array.isArray(I),
              h = m ? I : null !== (x = n[I.kind]) &&
              void 0 !== x ? x : [],
              y = - 1,
              k = [],
              l &&
              _.push(l),
              l = I
            )
          } while (void 0 !== o);
          var A;
          return 0 !== k.length ? k[k.length - 1][1] : e
        }(e, _)
      }
      const _ = {
        Name: {
          leave: e => e.value
        },
        Variable: {
          leave: e => '$' + e.name
        },
        Document: {
          leave: e => C(e.definitions, '\n\n')
        },
        OperationDefinition: {
          leave(e) {
            const t = x('(', C(e.variableDefinitions, ', '), ')'),
            n = C([e.operation,
            C([e.name,
            t]),
            C(e.directives, ' ')], ' ');
            return ('query' === n ? '' : n + ' ') + e.selectionSet
          }
        },
        VariableDefinition: {
          leave: ({
            variable: e,
            type: t,
            defaultValue: n,
            directives: r
          }) => e + ': ' + t + x(' = ', n) + x(' ', C(r, ' '))
        },
        SelectionSet: {
          leave: ({
            selections: e
          }) => N(e)
        },
        Field: {
          leave({
            alias: e,
            name: t,
            arguments: n,
            directives: r,
            selectionSet: o
          }) {
            const c = x('', e, ': ') + t;
            let l = c + x('(', C(n, ', '), ')');
            return l.length > 80 &&
            (l = c + x('(\n', A(C(n, '\n')), '\n)')),
            C([l,
            C(r, ' '),
            o], ' ')
          }
        },
        Argument: {
          leave: ({
            name: e,
            value: t
          }) => e + ': ' + t
        },
        FragmentSpread: {
          leave: ({
            name: e,
            directives: t
          }) => '...' + e + x(' ', C(t, ' '))
        },
        InlineFragment: {
          leave: ({
            typeCondition: e,
            directives: t,
            selectionSet: n
          }) => C(['...',
          x('on ', e),
          C(t, ' '),
          n], ' ')
        },
        FragmentDefinition: {
          leave: ({
            name: e,
            typeCondition: t,
            variableDefinitions: n,
            directives: r,
            selectionSet: o
          }) => `fragment ${ e }${ x('(', C(n, ', '), ')') } on ${ t } ${ x('', C(r, ' '), ' ') }` + o
        },
        IntValue: {
          leave: ({
            value: e
          }) => e
        },
        FloatValue: {
          leave: ({
            value: e
          }) => e
        },
        StringValue: {
          leave: ({
            value: e,
            block: t
          }) => t ? function (e, t) {
            const n = e.replace(/"""/g, '\\"""'),
            o = n.split(/\r\n|[\n\r]/g),
            c = 1 === o.length,
            l = o.length > 1 &&
            o.slice(1).every((line => 0 === line.length || r(line.charCodeAt(0)))),
            d = n.endsWith('\\"""'),
            m = e.endsWith('"') &&
            !d,
            h = e.endsWith('\\'),
            f = m ||
            h,
            v = !(null != t && t.minimize) &&
            (!c || e.length > 70 || f || l || d);
            let y = '';
            const w = c &&
            r(e.charCodeAt(0));
            return (v && !w || l) &&
            (y += '\n'),
            y += n,
            (v || f) &&
            (y += '\n'),
            '"""' + y + '"""'
          }(e) : `"${ e.replace(o, c) }"`
        },
        BooleanValue: {
          leave: ({
            value: e
          }) => e ? 'true' : 'false'
        },
        NullValue: {
          leave: () => 'null'
        },
        EnumValue: {
          leave: ({
            value: e
          }) => e
        },
        ListValue: {
          leave: ({
            values: e
          }) => '[' + C(e, ', ') + ']'
        },
        ObjectValue: {
          leave: ({
            fields: e
          }) => '{' + C(e, ', ') + '}'
        },
        ObjectField: {
          leave: ({
            name: e,
            value: t
          }) => e + ': ' + t
        },
        Directive: {
          leave: ({
            name: e,
            arguments: t
          }) => '@' + e + x('(', C(t, ', '), ')')
        },
        NamedType: {
          leave: ({
            name: e
          }) => e
        },
        ListType: {
          leave: ({
            type: e
          }) => '[' + e + ']'
        },
        NonNullType: {
          leave: ({
            type: e
          }) => e + '!'
        },
        SchemaDefinition: {
          leave: ({
            description: e,
            directives: t,
            operationTypes: n
          }) => x('', e, '\n') + C(['schema',
          C(t, ' '),
          N(n)], ' ')
        },
        OperationTypeDefinition: {
          leave: ({
            operation: e,
            type: t
          }) => e + ': ' + t
        },
        ScalarTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            directives: n
          }) => x('', e, '\n') + C(['scalar',
          t,
          C(n, ' ')], ' ')
        },
        ObjectTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            interfaces: n,
            directives: r,
            fields: o
          }) => x('', e, '\n') + C(['type',
          t,
          x('implements ', C(n, ' & ')),
          C(r, ' '),
          N(o)], ' ')
        },
        FieldDefinition: {
          leave: ({
            description: e,
            name: t,
            arguments: n,
            type: r,
            directives: o
          }) => x('', e, '\n') + t + (O(n) ? x('(\n', A(C(n, '\n')), '\n)') : x('(', C(n, ', '), ')')) + ': ' + r + x(' ', C(o, ' '))
        },
        InputValueDefinition: {
          leave: ({
            description: e,
            name: t,
            type: n,
            defaultValue: r,
            directives: o
          }) => x('', e, '\n') + C([t + ': ' + n,
          x('= ', r),
          C(o, ' ')], ' ')
        },
        InterfaceTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            interfaces: n,
            directives: r,
            fields: o
          }) => x('', e, '\n') + C(
            ['interface',
            t,
            x('implements ', C(n, ' & ')),
            C(r, ' '),
            N(o)],
            ' '
          )
        },
        UnionTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            directives: n,
            types: r
          }) => x('', e, '\n') + C(['union',
          t,
          C(n, ' '),
          x('= ', C(r, ' | '))], ' ')
        },
        EnumTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            directives: n,
            values: r
          }) => x('', e, '\n') + C(['enum',
          t,
          C(n, ' '),
          N(r)], ' ')
        },
        EnumValueDefinition: {
          leave: ({
            description: e,
            name: t,
            directives: n
          }) => x('', e, '\n') + C([t,
          C(n, ' ')], ' ')
        },
        InputObjectTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            directives: n,
            fields: r
          }) => x('', e, '\n') + C(['input',
          t,
          C(n, ' '),
          N(r)], ' ')
        },
        DirectiveDefinition: {
          leave: ({
            description: e,
            name: t,
            arguments: n,
            repeatable: r,
            locations: o
          }) => x('', e, '\n') + 'directive @' + t + (O(n) ? x('(\n', A(C(n, '\n')), '\n)') : x('(', C(n, ', '), ')')) + (r ? ' repeatable' : '') + ' on ' + C(o, ' | ')
        },
        SchemaExtension: {
          leave: ({
            directives: e,
            operationTypes: t
          }) => C(['extend schema',
          C(e, ' '),
          N(t)], ' ')
        },
        ScalarTypeExtension: {
          leave: ({
            name: e,
            directives: t
          }) => C(['extend scalar',
          e,
          C(t, ' ')], ' ')
        },
        ObjectTypeExtension: {
          leave: ({
            name: e,
            interfaces: t,
            directives: n,
            fields: r
          }) => C(
            ['extend type',
            e,
            x('implements ', C(t, ' & ')),
            C(n, ' '),
            N(r)],
            ' '
          )
        },
        InterfaceTypeExtension: {
          leave: ({
            name: e,
            interfaces: t,
            directives: n,
            fields: r
          }) => C(
            ['extend interface',
            e,
            x('implements ', C(t, ' & ')),
            C(n, ' '),
            N(r)],
            ' '
          )
        },
        UnionTypeExtension: {
          leave: ({
            name: e,
            directives: t,
            types: n
          }) => C(['extend union',
          e,
          C(t, ' '),
          x('= ', C(n, ' | '))], ' ')
        },
        EnumTypeExtension: {
          leave: ({
            name: e,
            directives: t,
            values: n
          }) => C(['extend enum',
          e,
          C(t, ' '),
          N(n)], ' ')
        },
        InputObjectTypeExtension: {
          leave: ({
            name: e,
            directives: t,
            fields: n
          }) => C(['extend input',
          e,
          C(t, ' '),
          N(n)], ' ')
        }
      };
      function C(e, t = '') {
        var n;
        return null !== (n = null == e ? void 0 : e.filter((e => e)).join(t)) &&
        void 0 !== n ? n : ''
      }
      function N(e) {
        return x('{\n', A(C(e, '\n')), '\n}')
      }
      function x(e, t, n = '') {
        return null != t &&
        '' !== t ? e + t + n : ''
      }
      function A(e) {
        return x('  ', e.replace(/\n/g, '\n  '))
      }
      function O(e) {
        var t;
        return null !== (t = null == e ? void 0 : e.some((e => e.includes('\n')))) &&
        void 0 !== t &&
        t
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'c', (function () {
        return r
      })),
      n.d(t, 'b', (function () {
        return o
      })),
      n.d(t, 'e', (function () {
        return c
      })),
      n.d(t, 'a', (function () {
        return l
      })),
      n.d(t, 'd', (function () {
        return d
      }));
      const r = {
        USER: 'USER',
        ASSISTANT: 'ASSISTANT',
        INTERNAL: 'INTERNAL'
      },
      o = {
        TEXT: 'text/plain;charset=UTF-8',
        JSON: 'application/json',
        MD: 'text/markdown;charset=UTF-8'
      },
      c = {
        INPROGRESS: 'INPROGRESS',
        COMPLETED: 'COMPLETED',
        ERROR: 'ERROR'
      },
      l = {
        PROGRESSING: 'PROGRESSING',
        DONE: 'DONE'
      },
      d = {
        INPROGRESS: 'INPROGRESS',
        COMPLETED: 'COMPLETED',
        ERROR: 'ERROR'
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return r
      }));
      function r(e) {
        return (e = e || ('undefined' != typeof window ? window : {
        })).microAppApi
      }
    },
    function (e, t, n) {
      'use strict';
      e.exports = function (e) {
        var t = [];
        return t.toString = function () {
          return this.map(
            (
              function (t) {
                var content = e(t);
                return t[2] ? '@media '.concat(t[2], ' {').concat(content, '}') : content
              }
            )
          ).join('')
        },
        t.i = function (e, n, r) {
          'string' == typeof e &&
          (e = [
            [null,
            e,
            '']
          ]);
          var o = {};
          if (r) for (var i = 0; i < this.length; i++) {
            var c = this[i][0];
            null != c &&
            (o[c] = !0)
          }
          for (var l = 0; l < e.length; l++) {
            var d = [].concat(e[l]);
            r &&
            o[d[0]] ||
            (
              n &&
              (d[2] ? d[2] = ''.concat(n, ' and ').concat(d[2]) : d[2] = n),
              t.push(d)
            )
          }
        },
        t
      }
    },
    function (e, t, n) {
      'use strict';
      function r(e, t) {
        for (var n = [], r = {}, i = 0; i < t.length; i++) {
          var o = t[i],
          c = o[0],
          l = {
            id: e + ':' + i,
            css: o[1],
            media: o[2],
            sourceMap: o[3]
          };
          r[c] ? r[c].parts.push(l) : n.push(r[c] = {
            id: c,
            parts: [
              l
            ]
          })
        }
        return n
      }
      n.r(t),
      n.d(t, 'default', (function () {
        return w
      }));
      var o = 'undefined' != typeof document;
      if ('undefined' != typeof DEBUG && DEBUG && !o) throw new Error(
        'vue-style-loader cannot be used in a non-browser environment. Use { target: \'node\' } in your Webpack config to indicate a server-rendering environment.'
      );
      var c = {},
      head = o &&
      (document.head || document.getElementsByTagName('head') [0]),
      l = null,
      d = 0,
      m = !1,
      h = function () {
      },
      f = null,
      v = 'data-vue-ssr-id',
      y = 'undefined' != typeof navigator &&
      /msie [6-9]\b/.test(navigator.userAgent.toLowerCase());
      function w(e, t, n, o) {
        m = n,
        f = o ||
        {
        };
        var l = r(e, t);
        return k(l),
        function (t) {
          for (var n = [], i = 0; i < l.length; i++) {
            var o = l[i];
            (d = c[o.id]).refs--,
            n.push(d)
          }
          t ? k(l = r(e, t)) : l = [];
          for (i = 0; i < n.length; i++) {
            var d;
            if (0 === (d = n[i]).refs) {
              for (var m = 0; m < d.parts.length; m++) d.parts[m]();
              delete c[d.id]
            }
          }
        }
      }
      function k(e) {
        for (var i = 0; i < e.length; i++) {
          var t = e[i],
          n = c[t.id];
          if (n) {
            n.refs++;
            for (var r = 0; r < n.parts.length; r++) n.parts[r](t.parts[r]);
            for (; r < t.parts.length; r++) n.parts.push(T(t.parts[r]));
            n.parts.length > t.parts.length &&
            (n.parts.length = t.parts.length)
          } else {
            var o = [];
            for (r = 0; r < t.parts.length; r++) o.push(T(t.parts[r]));
            c[t.id] = {
              id: t.id,
              refs: 1,
              parts: o
            }
          }
        }
      }
      function S() {
        var e = document.createElement('style');
        return e.type = 'text/css',
        head.appendChild(e),
        e
      }
      function T(e) {
        var t,
        n,
        r = document.querySelector('style[' + v + '~="' + e.id + '"]');
        if (r) {
          if (m) return h;
          r.parentNode.removeChild(r)
        }
        if (y) {
          var o = d++;
          r = l ||
          (l = S()),
          t = _.bind(null, r, o, !1),
          n = _.bind(null, r, o, !0)
        } else r = S(),
        t = C.bind(null, r),
        n = function () {
          r.parentNode.removeChild(r)
        };
        return t(e),
        function (r) {
          if (r) {
            if (r.css === e.css && r.media === e.media && r.sourceMap === e.sourceMap) return;
            t(e = r)
          } else n()
        }
      }
      var E,
      I = (
        E = [],
        function (e, t) {
          return E[e] = t,
          E.filter(Boolean).join('\n')
        }
      );
      function _(e, t, n, r) {
        var o = n ? '' : r.css;
        if (e.styleSheet) e.styleSheet.cssText = I(t, o);
         else {
          var c = document.createTextNode(o),
          l = e.childNodes;
          l[t] &&
          e.removeChild(l[t]),
          l.length ? e.insertBefore(c, l[t]) : e.appendChild(c)
        }
      }
      function C(e, t) {
        var n = t.css,
        r = t.media,
        o = t.sourceMap;
        if (
          r &&
          e.setAttribute('media', r),
          f.ssrId &&
          e.setAttribute(v, t.id),
          o &&
          (
            n += '\n/*# sourceURL=' + o.sources[0] + ' */',
            n += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(o)))) + ' */'
          ),
          e.styleSheet
        ) e.styleSheet.cssText = n;
         else {
          for (; e.firstChild; ) e.removeChild(e.firstChild);
          e.appendChild(document.createTextNode(n))
        }
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return j
      }));
      var r = n(4),
      o = n(3),
      c = n(52),
      l = n.n(c),
      d = n(53),
      m = n.n(d),
      h = n(54),
      f = n.n(h),
      v = n(55),
      y = n.n(v),
      w = n(118),
      k = n.n(w),
      S = n(119),
      T = n.n(S),
      E = n(120),
      I = n.n(E),
      _ = n(121),
      C = n.n(_),
      N = n(122),
      x = n.n(N),
      A = n(123),
      O = n.n(A),
      D = n(124),
      R = n.n(D),
      P = n(125),
      L = n.n(P),
      U = n(126),
      F = n.n(U),
      M = n(127),
      $ = n.n(M);
      class j {
        static async getThreadsList(e) {
          return Object(o.a) (e) ({
            query: Object(r.a) (I.a)
          }, {
            dataKey: 'usiGetThreads',
            cache: {
            }
          })
        }
        static async getThreadMessages(e, t) {
          let {
            threadId: n
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (C.a),
            variables: {
              threadId: n
            }
          }, {
            dataKey: 'usiGetMessagesByThreadId',
            cache: {
            }
          })
        }
        static async createThread(e) {
          return Object(o.a) (e) ({
            query: Object(r.a) (T.a)
          }, {
            dataKey: 'usiCreateThread',
            cache: {
            },
            throwOnError: !0
          })
        }
        static async createMessagesInThread(e, t) {
          let {
            threadId: n,
            messages: c
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (x.a),
            variables: {
              threadId: n,
              messages: c
            }
          }, {
            dataKey: 'usiCreateMessagesByThreadId',
            throwOnError: !0,
            cache: {
            }
          })
        }
        static async getMessagesTurn(e, t) {
          let {
            threadId: n,
            turnId: c,
            subscribedEvents: l = []
          }
          = t;
          const d = Object(o.a) (e),
          data = await d({
            query: Object(r.a) (O.a),
            variables: {
              threadId: n,
              turnId: c,
              subscribedEvents: l
            }
          }, {
            dataKey: 'usiGetMessagesByThreadId',
            cache: {
            },
            throwOnError: !0
          }),
          m = null == data ? void 0 : data.turns;
          if (!Array.isArray(m)) throw new Error('Failed to fetch messages');
          return m.length ? m[0] : null
        }
        static async getMessage(e, t) {
          let {
            threadId: n,
            messageId: c,
            sinceChars: l = 0
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (R.a),
            variables: {
              threadId: n,
              messageId: c,
              sinceChars: l
            }
          }, {
            dataKey: 'usiGetMessageByMessageId',
            cache: {
            },
            throwOnError: !0
          })
        }
        static async updateThreadTitle(e, t) {
          let {
            threadId: n,
            title: title
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (L.a),
            variables: {
              threadId: n,
              title: title
            }
          }, {
            dataKey: 'updateThreadTitle',
            cache: {
            }
          })
        }
        static async deleteThread(e, t) {
          let {
            threadId: n
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (F.a),
            variables: {
              threadId: n
            }
          }, {
            dataKey: 'usiDeleteThread',
            cache: {
            }
          })
        }
        static async getUserDetails(e) {
          return Object(o.a) (e) ({
            query: Object(r.a) (l.a)
          }, {
            dataKey: 'user',
            cache: {
            }
          })
        }
        static async getAiToolsUsed(e, t) {
          var n;
          const c = Object(o.a) (e),
          l = null === (
            n = (
              await c({
                query: Object(r.a) (m.a),
                variables: {
                  application: t
                }
              }, {
                dataKey: 'completionAIGetAIToolsUsed',
                cache: {
                }
              })
            ).confirmations
          ) ||
          void 0 === n ? void 0 : n.find((e => e.application === t));
          return null == l ? void 0 : l.alreadyUsed
        }
        static async confirmAIToolUsed(e, t) {
          return Object(o.a) (e) ({
            query: Object(r.a) (f.a),
            variables: {
              toolsUsedRequest: t
            }
          }, {
            dataKey: 'confirmAIToolUsed',
            cache: {
            }
          })
        }
        static async getUsageStats(e) {
          return Object(o.a) (e) ({
            query: Object(r.a) ($.a)
          }, {
            dataKey: 'usageStats',
            cache: {
            }
          })
        }
        static async stopGeneratingAnswer(e, t) {
          let {
            questionId: n
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (y.a),
            variables: {
              questionId: n
            }
          }, {
            dataKey: 'stopGeneratingAnswer',
            cache: {
            }
          })
        }
        static async createMessageRating(e, t) {
          let {
            threadId: n,
            messageId: c,
            type: l,
            feedback: d = ''
          }
          = t;
          return Object(o.a) (e) ({
            query: Object(r.a) (k.a),
            variables: {
              threadId: n,
              messageId: c,
              request: {
                type: l,
                feedback: d
              }
            }
          }, {
            dataKey: 'usiCreateMessageRating',
            throwOnError: !0,
            cache: {
            }
          })
        }
      }
    },
    function (e, t, n) {
      'use strict';
      function r(e, t) {
        localStorage &&
        localStorage.setItem &&
        localStorage.setItem(e, t)
      }
      function o(e) {
        return localStorage &&
        localStorage.getItem ? localStorage.getItem(e) : null
      }
      n.d(t, 'b', (function () {
        return r
      })),
      n.d(t, 'a', (function () {
        return o
      }))
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          var n = function (e, t, n) {
            if (n || 2 === arguments.length) for (var r, i = 0, o = t.length; i < o; i++) !r &&
            i in t ||
            (r || (r = Array.prototype.slice.call(t, 0, i)), r[i] = t[i]);
            return e.concat(r || Array.prototype.slice.call(t))
          },
          r = {
            defaults: {
            },
            errorType: null,
            polyfills: {
              fetch: null,
              FormData: null,
              URLSearchParams: null,
              performance: null,
              PerformanceObserver: null,
              AbortController: null
            },
            polyfill: function (p, t) {
              for (
                var r = void 0 === t ? {
                }
                 : t,
                o = r.doThrow,
                c = void 0 === o ||
                o,
                l = r.instance,
                d = void 0 !== l &&
                l,
                m = [],
                h = 2;
                h < arguments.length;
                h++
              ) m[h - 2] = arguments[h];
              var f = this.polyfills[p] ||
              ('undefined' != typeof self ? self[p] : null) ||
              (void 0 !== e ? e[p] : null);
              if (c && !f) throw new Error(p + ' is not defined');
              return d &&
              f ? new (f.bind.apply(f, n([void 0], m, !1))) : f
            }
          };
          t.a = r
        }
      ).call(this, n(43))
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'c', (function () {
        return r
      })),
      n.d(t, 'b', (function () {
        return o
      })),
      n.d(t, 'a', (function () {
        return c
      }));
      n(36);
      function r(e, t) {
        let n = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : '';
        if (!e) return;
        const r = e.split(',').map((e => e.trim())).find(
          (
            e => e.split(';') [0].split('=') [0].match(new RegExp('^'.concat(n, '[^_\\W]+sb$')))
          )
        );
        if (r) {
          const e = t.getHeader('set-cookie') ||
          [];
          t.setHeader('set-cookie', [
            ...e,
            r
          ])
        }
      }
      const o = {
        user: 'UserNavigationServerNuxt',
        'user-skinny': 'UserNavigationServerNuxt',
        'test-m-app': 'UserNavigationServerNuxt',
        'visitor-v2': 'TopNavSsi',
        'visitor-skinny': 'TopNavSsi',
        'visitor-footer': 'TopNavSsi',
        innova: 'InnovaMicroAppNuxt',
        'global-microapp': 'GlobalMicroappNuxt',
        thunderclap: 'ThunderclapMicroAppNuxt',
        jobDetailsMicroApp: 'JobDetailsMicroAppNuxt'
      };
      function c(e, t) {
        var n;
        let r;
        r = '#'.concat(
          t,
          'user' === t ||
          'visitor-v2' === t ? '-top-navigation-container' : '-app-container'
        );
        return (
          null === (n = e.querySelector(''.concat(r, ' [data-internal-app]'))) ||
          void 0 === n ||
          null === (n = n.dataset) ||
          void 0 === n ? void 0 : n.internalApp
        ) === t
      }
    },
    function (e, t, n) {
      'use strict';
      let r;
      n.d(t, 'a', (function () {
        return y
      }));
      const o = {
        setItem(e, t) {
          this[e] = String(t)
        },
        getItem(e) {
          return this[e]
        },
        removeItem(e) {
          delete this[e]
        }
      };
      function c(e) {
        return e &&
        (
          'QUOTA_EXCEEDED_ERR' === e.name ||
          'NS_ERROR_DOM_QUOTA_REACHED' === e.name ||
          'QuotaExceededError' === e.name
        )
      }
      function l() {
        return function () {
          if (void 0 !== r) return r;
          const e = '__lstest__',
          t = e;
          try {
            if (!localStorage) return !1
          } catch (e) {
            return !1
          }
          try {
            localStorage[e] = t,
            delete localStorage[e],
            r = !0
          } catch (e) {
            r = !(!c(e) || !localStorage.length)
          }
          return r
        }() ? localStorage : o
      }
      function d(e) {
        const t = Object.keys(l());
        for (let i = t.length - 1; i >= 0; i -= 1) if (t[i].startsWith(''.concat(e, '-expire-'))) return t[i];
        return null
      }
      function m(e, time) {
        return ''.concat(e, '-expire-').concat(time)
      }
      function h(e, t, time) {
        const n = d(e);
        l().removeItem(n);
        const r = m(e, time);
        l().setItem(r, t)
      }
      function f(e) {
        l().removeItem(e)
      }
      function v(e) {
        const t = e &&
        e.match(/(.*)-expire-(\d+)$/),
        n = t &&
        t[1];
        if (n) {
          const e = t[2];
          return {
            key: n,
            expiration: parseInt(e, 10)
          }
        }
        return null
      }
      const y = {
        callbacks: [],
        set(e, t, n) {
          t = JSON.stringify(t);
          const r = 31536000000;
          (!n || n > r) &&
          (n = r);
          try {
            h(e, t, Date.now() + n)
          } catch (r) {
            const o = function () {
              const e = [],
              t = l();
              for (let i = t.length - 1; i >= 0; i -= 1) {
                const n = t.key(i),
                r = v(n);
                if (r) {
                  const {
                    expiration: o
                  }
                  = r;
                  e.push({
                    key: n,
                    size: (t.getItem(n) + n).length,
                    expiration: o
                  })
                }
              }
              return e.sort(((a, b) => b.expiration - a.expiration)),
              e
            }();
            let d,
            y = ((t || '') + m(e, n)).length;
            for (; o.length && y > 0; ) d = o.pop(),
            f(d.key),
            y -= d.size;
            try {
              h(e, t, Date.now() + n)
            } catch (r) {
              l().clear();
              try {
                h(e, t, Date.now() + n)
              } catch (e) {
                return c(e) ? console.error('[local-storage] item too large', e) : console.error('[local-storage] unknown error', e),
                e
              }
            }
            return r
          }
          return this.callbacks.forEach((t => t({
            key: m(e, n)
          }))),
          null
        },
        get(e) {
          if (
            function (e) {
              const t = d(e);
              if (!t) return !1;
              const n = t.match(/-expire-(\d+)$/),
              r = n &&
              n[1];
              if (r) {
                const e = parseInt(r, 10);
                if (Date.now() >= e) return f(t),
                !0
              }
              return !1
            }(e)
          ) return null;
          const t = function (e) {
            const t = d(e);
            return t ? l().getItem(t) : null
          }(e);
          if (!t) return t;
          try {
            return JSON.parse(t)
          } catch (e) {
            return t
          }
        },
        remove(e) {
          (function (e) {
            f(d(e))
          }) (e)
        },
        onUpdate(e) {
          const t = t => {
            const {
              key: n
            }
            = t,
            r = v(n);
            r &&
            e(r.key)
          };
          return this.callbacks.push(t),
          window.addEventListener('storage', t),
          () => {
            window.removeEventListener('storage', t),
            this.callbacks.splice(this.callbacks.indexOf(t), 1)
          }
        }
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'b', (function () {
        return x
      })),
      n.d(t, 'a', (function () {
        return A
      }));
      var r = n(24);
      let o;
      const c = 'Control',
      l = 'Mutation operations are not allowed in SUDO mode',
      d = {};
      function m(e) {
        if (!e) throw new Error('name is missing');
        const t = e.replace(/[^a-zA-Z_0-9]/g, '');
        return d[t] = e,
        t
      }
      const h = () => ({
        qt: {
        },
        qtAllocationType: {
        },
        ff: {
        },
        computedName: {
        }
      }),
      f = {
        hasQtAllocation: e => (t, n) => {
          if (void 0 === e.qt[t]) {
            const e = 'QT \''.concat(t, '\' is not loaded');
            throw new Error(e)
          }
          return e.qt[t] === n
        },
        isFFEnabled: e => t => {
          if (void 0 === e.ff[t]) {
            const e = 'FF \''.concat(t, '\' is not loaded');
            throw new Error(e)
          }
          return !0 === e.ff[t]
        }
      },
      v = {
        setData(e, t) {
          let {
            qtAutoAllocateData: n,
            qtAllocationData: r,
            ffData: c,
            ffOverrides: l,
            qtOverrides: m,
            ff: h = [],
            qtAllocation: f = [],
            qtAutoAllocate: v = []
          }
          = t;
          const y = {},
          w = {},
          k = {};
          if (n) {
            const data = n.data ||
            {
            };
            'user' in data ||
            'organization' in data ||
            'visitor' in data ? Object.keys(data || []).forEach((e => {
              Object.assign(k, data[e] || {
              })
            })) : Object.assign(k, data)
          }
          r &&
          Object.keys(r.data || {
          }).forEach((e => {
            Object.assign(k, r.data[e] || {
            })
          })),
          Object.keys(k).forEach(
            (
              t => {
                const n = k[t];
                if (n) {
                  const c = d[r = t] ||
                  r;
                  delete e.qt[c],
                  o.set(e.qt, c, n.cellName),
                  delete e.qtAllocationType[c],
                  o.set(e.qtAllocationType, c, n.allocationType),
                  w[c] = !0
                }
                var r
              }
            )
          ),
          c &&
          Object.keys(c.data || []).forEach(
            (
              t => {
                const n = c.data[t];
                n &&
                (delete e.ff[t], o.set(e.ff, t, n.value), y[t] = !0)
              }
            )
          ),
          l &&
          Object.keys(l).forEach(
            (
              t => {
                delete e.ff[t],
                this.$logger.log(
                  'using feature flag override for \''.concat(t, '\', value: \'').concat(l[t], '\'')
                ),
                o.set(e.ff, t, l[t])
              }
            )
          ),
          m &&
          Object.keys(m).forEach(
            (
              t => {
                delete e.qt[t],
                this.$logger.log(
                  'using qt override for \''.concat(t, '\', value: \'').concat(m[t], '\'')
                ),
                o.set(e.qt, t, m[t])
              }
            )
          );
          const S = [];
          h.forEach(
            (
              t => {
                let {
                  name: n,
                  alias: r,
                  computedName: c,
                  fallback: l
                }
                = t;
                o.set(e.computedName, r, c),
                y[r] ||
                (
                  S.push(
                    'ff '.concat(n, ' load failed').concat(n !== r ? ' (alias '.concat(r, ')') : '', ', using fallback value \'').concat(l, '\'')
                  ),
                  delete e.ff[r],
                  o.set(e.ff, r, l)
                )
              }
            )
          ),
          [].concat(v).concat(f).forEach(
            (
              t => {
                let {
                  name: n,
                  alias: r,
                  computedName: c,
                  fallback: l
                }
                = t;
                o.set(e.computedName, r, c),
                w[r] ||
                (
                  S.push(
                    'qt '.concat(c, ' load failed').concat(n !== r ? ' (alias '.concat(r, ')') : '', ', using fallback value \'').concat(l, '\'')
                  ),
                  delete e.qt[r],
                  o.set(e.qt, r, l)
                )
              }
            )
          );
          let T = 'error';
          [
            {
              data: n,
              name: 'qtAutoAllocation'
            },
            {
              data: r,
              name: 'qtAllocation'
            },
            {
              data: c,
              name: 'ff'
            }
          ].forEach(
            (
              e => {
                let {
                  data: data,
                  name: t
                }
                = e;
                if (data) {
                  if (data.fetchError) {
                    var n,
                    r;
                    let e;
                    null !== (n = data.fetchError.stack) &&
                    void 0 !== n &&
                    null !== (r = n.includes) &&
                    void 0 !== r &&
                    r.call(n, 'TypeError: Failed to fetch') &&
                    (T = 'warn'),
                    data.fetchError.redirectedToLogin ? (e = 'unauthorized', T = 'log') : data.fetchError.status &&
                    (e = 'response status '.concat(data.fetchError.status)),
                    S.push(
                      'failed fetch '.concat(t, '. ').concat(e ? 'Reason: '.concat(e, '.') : '', ' Error message: ').concat(data.fetchError.message)
                    )
                  }
                  data.errors &&
                  S.push(
                    'failed fetch '.concat(t, '. Errors: ').concat(JSON.stringify(data.errors))
                  )
                }
              }
            )
          ),
          S.length &&
          this.$logger[T](S.join('\n'))
        },
        setLocalQtAllocation(e, t) {
          let {
            testName: n,
            cellName: r
          }
          = t;
          delete e.qt[n],
          o.set(e.qt, n, r)
        }
      };
      function y(e) {
        e.forEach(
          (
            e => {
              const t = 'function' == typeof e.name;
              if (e.computedName = t ? e.name() : e.name, t && !e.alias) throw new Error('`alias` parameter is required when `name` is function');
              e.alias = e.alias ||
              e.name
            }
          )
        )
      }
      function w(e, t, n) {
        const o = Object(r.a) ({
          enabledFeatures: this.$cookies.get('enabled_ff')
        });
        return Object.keys(o).length &&
        (
          t(
            'setData',
            {
              ffData: {
                data: Object.keys(o).reduce(((e, t) => ({
                  ...e,
                  [
                    t
                  ]: {
                    value: o[t]
                  }
                })), {
                })
              },
              ffOverrides: n
            }
          ),
          e = e.filter((e => {
            let {
              name: t
            }
            = e;
            return void 0 === o[t]
          }))
        ),
        e
      }
      function k(e, t, n, r) {
        let o;
        return e.length ? (
          t ||
          (t = e.map((e => {
            let {
              computedName: t
            }
            = e;
            return t
          })).join('-')),
          o = this.$httpGql({
            ...n,
            requestAlias: ''.concat(t, '-ff')
          }).post({
            query: 'query {\n          '.concat(
              e.map(
                (
                  e => {
                    let {
                      computedName: t,
                      name: n
                    }
                    = e;
                    return ''.concat(n, ': featureFlag(name: "').concat(t, '", visitorId: "').concat(r, '") {value}')
                  }
                )
              ),
              '\n        }'
            )
          }).json().catch((e => ({
            fetchError: e
          })))
        ) : o = Promise.resolve(null),
        o
      }
      function S(e, t, n, r) {
        const o = e.qt.filter((e => {
          let {
            isVisitor: t
          }
          = e;
          return !t ||
          !!n
        }));
        if (o.length) {
          t ||
          (t = o.map((e => {
            let {
              computedName: t
            }
            = e;
            return t
          })).join('-'));
          const c = e.isAutoAllocationQt ? function (e, t) {
            return 'mutation {'.concat(
              e.map(
                (
                  e => {
                    let n,
                    {
                      alias: r,
                      computedName: o,
                      isVisitor: c,
                      isOrganization: l
                    }
                    = e;
                    return n = c ? 'allocateVisitorToQuantitativeTestAuto(testName: "'.concat(o, '", visitorId: "').concat(t, '")') : l ? 'allocateOrganizationToQuantitativeTestAuto(testName: "'.concat(o, '")') : 'allocateUserToQuantitativeTestAuto(testName: "'.concat(o, '")'),
                    ''.concat(m(r), ': ').concat(n, ' {cellName allocationType}')
                  }
                )
              ),
              '\n  }'
            )
          }(o, n) : function (e, t) {
            const n = [],
            r = [],
            o = [];
            return e.forEach(
              (
                e => {
                  let {
                    computedName: c,
                    alias: l,
                    isVisitor: d,
                    isOrganization: h
                  }
                  = e;
                  const f = ''.concat(m(l), ': quantitativeTestAllocation(testName: "').concat(c, '"').concat(
                    d ? ', visitorId: "'.concat(t, '"') : '',
                    ') {cellName allocationType}'
                  );
                  d ? o.push(f) : h ? r.push(f) : n.push(f)
                }
              )
            ),
            'query {\n    '.concat(n.length ? 'user { '.concat(n.join('\n'), ' }') : '', '\n    ').concat(
              r.length ? 'organization { '.concat(r.join('\n'), ' }') : '',
              '\n    '
            ).concat(o.length ? 'visitor { '.concat(o.join('\n'), ' }') : '', '\n  }')
          }(o, n),
          d = ''.concat(t, '-').concat(e.isAutoAllocationQt ? 'qt-auto-allocation' : 'qt-allocation');
          return this.$httpGql({
            ...r,
            requestAlias: d
          }).post({
            query: c
          }).json().then(
            (
              o => {
                let c = !1;
                return o.errors &&
                Array.isArray(o.errors) &&
                (c = o.errors.some((e => {
                  let {
                    message: t
                  }
                  = e;
                  return t === l
                }))),
                c ? (e.isAutoAllocationQt = !1, S.call(this, e, t, n, r)) : o
              }
            )
          ).catch((e => ({
            fetchError: e
          })))
        }
        return Promise.resolve(null)
      }
      function T(e, t, n, r, o) {
        return [{
          isAutoAllocationQt: !0,
          qt: t,
          promise: null
        },
        {
          qt: e,
          promise: null
        }
        ].map((e => S.call(this, e, n, r, o)))
      }
      function E(e) {
        return e.replace(/[^a-z0-9]/gi, '')
      }
      function I(e) {
        const t = [],
        n = [];
        return e.forEach(
          (
            e => {
              let r = !1;
              e.computedName ||
              (r = !0),
              e.ff &&
              !this.state.flags.ff[e.ff.alias ||
              E(e.alias)] &&
              (r = !0),
              r ? t.push(e) : n.push(e)
            }
          )
        ),
        {
          enabledQts: n,
          disabledQts: t
        }
      }
      function _(e) {
        const t = [];
        return e.forEach(
          (
            e => {
              if (e.ff) {
                let n;
                n = !0 === e.ff ? {
                  name: E(e.alias),
                  fallback: !1
                }
                 : e.ff,
                t.push(n)
              }
            }
          )
        ),
        t
      }
      function C(e, t) {
        const {
          getFFConfig: n,
          requestContext: o
        }
        = this.$featureFlags,
        c = n();
        if (Object.keys(c).length) {
          const n = Object(r.b) (e.map((e => e.alias)), c, o);
          t(
            'setData',
            {
              ffData: {
                data: Object.keys(n).reduce(((e, t) => (e[t] = {
                  value: n[t]
                }, e)), {
                })
              }
            }
          ),
          e = e.filter((e => {
            let {
              name: t
            }
            = e;
            return void 0 === n[t]
          }))
        }
        return e
      }
      const N = {
        async load(e, t) {
          var n,
          r,
          o,
          l;
          let {
            commit: d,
            dispatch: m,
            rootState: h
          }
          = e,
          {
            ff: f = [],
            qt: v = [],
            qtAllocation: S = [],
            cache: E = {
              storage: 'memory',
              strategy: 'cacheFirst',
              cacheIfSkipNetwork: !0
            },
            auth: N,
            requestAlias: x
          }
          = t,
          A = v;
          null !== (n = this.state.user) &&
          void 0 !== n &&
          n.isSudo &&
          (S = S.concat(A), A = []),
          y(f),
          y(A),
          y(S),
          null !== (r = this.state.bot) &&
          void 0 !== r &&
          r.isBot &&
          (
            !function (e, t, n) {
              const r = {};
              e.forEach((e => {
                let {
                  alias: t,
                  fallback: n = c
                }
                = e;
                r[t] = {
                  cellName: n
                }
              }));
              const o = {};
              t.forEach((e => {
                let {
                  alias: t,
                  fallback: n = c
                }
                = e;
                o[t] = {
                  cellName: n
                }
              })),
              n(
                'setData',
                {
                  qtAutoAllocateData: {
                    data: r
                  },
                  qtAllocationData: {
                    data: {
                      visitor: o
                    }
                  },
                  qtAllocation: t,
                  qtAutoAllocate: e
                }
              )
            }(A, S, d),
            S = [],
            A = []
          );
          const O = {
            cache: E,
            handleApiErrors: !1
          };
          void 0 !== N &&
          (O.auth = N);
          const D = {},
          {
            $ffOverrides: R
          }
          = this,
          P = (null === (o = this.state.vpn) || void 0 === o ? void 0 : o.isVpn) ||
          Object.keys(this.$qtCookieOverrides).length;
          null != this &&
          null !== (l = this.app) &&
          void 0 !== l &&
          null !== (l = l.context) &&
          void 0 !== l &&
          null !== (l = l.query) &&
          void 0 !== l &&
          l.waitForVpnBeforeFlags &&
          await this.state.vpn.promise,
          R &&
          P &&
          (
            f.forEach((e => {
              let {
                alias: t
              }
              = e;
              void 0 !== R[t] &&
              (D[t] = R[t])
            })),
            f = f.filter((e => {
              let {
                alias: t
              }
              = e;
              return void 0 === D[t]
            }))
          );
          const L = {},
          {
            $qtOverrides: U
          }
          = this;
          U &&
          P &&
          (
            [].concat(A).concat(S).forEach((e => {
              let {
                alias: t
              }
              = e;
              void 0 !== U[t] &&
              (L[t] = U[t])
            })),
            A = A.filter((e => {
              let {
                alias: t
              }
              = e;
              return !L[t]
            })),
            S = S.filter((e => {
              let {
                alias: t
              }
              = e;
              return !L[t]
            }))
          );
          const F = [
            ..._(A),
            ..._(S)
          ];
          F.length &&
          (await m('load', {
            ff: [
              ...F,
              ...f
            ],
            cache: E,
            auth: N
          }), f = []),
          f.length &&
          (f = w.call(this, f, d, D)),
          f.length &&
          this.$featureFlags &&
          (f = C.call(this, f, d));
          const M = this.state.flags.ff;
          f = f.filter((e => {
            let {
              computedName: t
            }
            = e;
            return void 0 === M[t]
          })),
          A = A.filter(
            (
              e => {
                let {
                  computedName: t
                }
                = e;
                const n = this.state.flags.qtAllocationType[t];
                return !n ||
                'NotAllocated' === n
              }
            )
          ),
          S = S.filter((e => {
            let {
              computedName: t
            }
            = e;
            return !this.state.flags.qt[t]
          }));
          const {
            enabledQts: $,
            disabledQts: j
          }
          = I.call(this, A),
          {
            enabledQts: V,
            disabledQts: G
          }
          = I.call(this, S);
          A = $,
          S = V,
          function (e, t) {
            const n = {};
            e.forEach((e => {
              let {
                alias: t,
                fallback: r = c
              }
              = e;
              n[t] = {
                cellName: r
              }
            })),
            t('setData', {
              qtAutoAllocateData: {
                data: n
              },
              qtAutoAllocate: e
            })
          }([...j,
          ...G], d);
          const B = h.visitor.id,
          z = k.call(this, f, x, O, B),
          H = T.call(this, S, A, x, B, O),
          [
            Q,
            W,
            K
          ] = await Promise.all([z,
          ...H]);
          d(
            'setData',
            {
              ffData: Q,
              qtAutoAllocateData: W,
              qtAllocationData: K,
              ffOverrides: D,
              qtOverrides: L,
              ff: f,
              qtAllocation: S,
              qtAutoAllocate: A
            }
          )
        },
        setLocalQtAllocation(e, data) {
          let {
            commit: t
          }
          = e;
          t('setLocalQtAllocation', data)
        }
      };
      function x(e, t) {
        e.hasModule('flags') ||
        e.registerModule(
          'flags',
          {
            namespaced: !0,
            state: h,
            getters: f,
            actions: N,
            mutations: v
          },
          {
            preserveState: !!e.state.flags
          }
        ),
        o = t ||
        {
          set(object, e, t) {
            object[e] = t
          }
        }
      }
      async function A(e, data, t) {
        x(e, t),
        await e.dispatch('flags/load', data)
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return r
      })),
      n.d(t, 'b', (function () {
        return o
      }));
      const r = 'unauthenticated',
      o = 'undefined'
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'b', (function () {
        return Qs
      })),
      n.d(t, 'a', (function () {
        return G
      }));
      var r = n(0),
      o = n(35),
      c = n(37),
      l = n(67),
      d = n.n(l),
      m = n(34),
      h = n.n(m),
      f = n(32),
      v = n(65),
      y = n.n(v);
      let w;
      function k(e) {
        return w ||
        (w = 'undefined' != typeof navigator ? navigator.userAgent : ''),
        /Upwork (Android|iOS)/.test(e || w)
      }
      var S = n(21),
      T = n(1);
      'scrollRestoration' in window.history &&
      (
        Object(T.u) ('manual'),
        window.addEventListener('beforeunload', (() => {
          Object(T.u) ('auto')
        })),
        window.addEventListener('load', (() => {
          Object(T.u) ('manual')
        }))
      );
      const E = () => {
      };
      r.default.use(f.a);
      const I = {
        mode: 'history',
        base: '/',
        linkActiveClass: 'nuxt-link-active',
        linkExactActiveClass: 'nuxt-link-exact-active',
        scrollBehavior: function (e, t, n) {
          let r = !1;
          const o = e !== t;
          n ? r = n : o &&
          function (e) {
            const t = Object(T.g) (e);
            if (1 === t.length) {
              const {
                options: e = {}
              }
              = t[0];
              return !1 !== e.scrollToTop
            }
            return t.some((e => {
              let {
                options: t
              }
              = e;
              return t &&
              t.scrollToTop
            }))
          }(e) &&
          (r = {
            x: 0,
            y: 0
          });
          const c = window.$nuxt;
          return (!o || e.path === t.path && e.hash !== t.hash) &&
          c.$nextTick((() => c.$emit('triggerScroll'))),
          new Promise(
            (
              t => {
                c.$once(
                  'triggerScroll',
                  (
                    () => {
                      if (e.hash) {
                        let t = e.hash;
                        void 0 !== window.CSS &&
                        void 0 !== window.CSS.escape &&
                        (t = '#' + window.CSS.escape(t.substr(1)));
                        try {
                          const e = document.querySelector(t);
                          if (e) {
                            var n;
                            r = {
                              selector: t
                            };
                            const o = Number(
                              null === (n = getComputedStyle(e) ['scroll-margin-top']) ||
                              void 0 === n ? void 0 : n.replace('px', '')
                            );
                            o &&
                            (r.offset = {
                              y: o
                            })
                          }
                        } catch (e) {
                          console.warn(
                            'Failed to save scroll position. Please add CSS.escape() polyfill (https://github.com/mathiasbynens/CSS.escape).'
                          )
                        }
                      }
                      t(r)
                    }
                  )
                )
              }
            )
          )
        },
        routes: [
          {
            path: '/apps/chatpro',
            component: () => Object(T.m) (n.e(104).then(n.bind(null, 383))),
            name: 'apps-chatpro'
          },
          {
            path: '/apps/uma',
            component: () => Object(T.m) (n.e(106).then(n.bind(null, 1257))),
            name: 'apps-uma'
          },
          {
            path: '/apps/uma/:id',
            component: () => Object(T.m) (n.e(105).then(n.bind(null, 1258))),
            name: 'apps-uma-id'
          }
        ],
        fallback: !1
      };
      var _ = [
        'en-us',
        'is-is',
        'en-gb'
      ];
      n(152);
      function C(e, t) {
        const n = Object.keys(e),
        r = Object.keys(t);
        if (n.length !== r.length) return !1;
        const o = a => 'object' == typeof a &&
        null !== a;
        return [...r,
        ...n].every(
          (
            n => {
              const a = e[n],
              b = t[n],
              r = o(a) &&
              o(b);
              return r &&
              C(a, b) ||
              !r &&
              a === b
            }
          )
        )
      }
      function N(e, t) {
        return e.name === t.name &&
        C(e.params, t.params)
      }
      const x = e => {
        var t,
        n;
        return (null === (t = e.meta) || void 0 === t ? void 0 : t.skipOpenInNewPage) ||
        'true' === (null === (n = e.query) || void 0 === n ? void 0 : n.skipOpenInNewPage)
      };
      function A(e) {
        return [...e.map(
          (
            e => {
              const t = {
                ...e
              };
              return e.children &&
              (t.children = A(e.children)),
              e.meta &&
              (t.meta = {
                ...e.meta
              }),
              t
            }
          )
        )]
      }
      function O(e, t) {
        let n,
        r = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : [];
        return e.forEach(
          (
            e => {
              n ||
              (e.children || []).some(
                (
                  (o, i) => (
                    o.name === t ? n = {
                      route: o,
                      routeIndex: i,
                      parentRoute: e,
                      parentRoutes: [
                        ...r,
                        e
                      ]
                    }
                     : o.children &&
                    (r.push(e), n = O(e.children, t, r), r.pop()),
                    !!n
                  )
                )
              )
            }
          )
        ),
        n
      }
      function D(e, t) {
        const {
          route: n,
          routeIndex: r,
          parentRoute: o,
          parentRoutes: c
        }
        = O(e, t);
        n &&
        (
          o.origChildren ||
          (o.origChildren = A(o.children)),
          o.children.splice(r, 1),
          n.path = function (e, t) {
            return t.concat(e).map((e => e.path)).filter(Boolean).map((path => path.replace(/\/$/, ''))).join('/')
          }(n, c),
          e.splice(e.indexOf(o) + 1, 0, n)
        )
      }
      function R(e) {
        let t = [];
        return e.forEach(
          (
            e => {
              e.meta &&
              e.meta.isModal &&
              t.push(e),
              e.children &&
              (t = t.concat(R(e.children)))
            }
          )
        ),
        t
      }
      const P = {};
      function L(e, t) {
        R(e).forEach(
          (
            n => {
              const {
                parentRoute: r
              }
              = O(e, n.name);
              P[n.name] = {
                getPrevRoute: () => n.getPrevRoute ? n.getPrevRoute(r) : r
              },
              t &&
              D(e, n.name)
            }
          )
        )
      }
      function U(e) {
        const t = I ||
        function (e, t) {
          const base = t._app &&
          t._app.basePath ||
          I.base,
          n = new f.a({
            ...I,
            base: base
          }),
          r = n.push;
          n.push = function (e) {
            let t = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : E,
            n = arguments.length > 2 ? arguments[2] : void 0;
            return r.call(this, e, t, n)
          };
          const o = n.resolve.bind(n);
          return n.resolve = (e, t, n) => ('string' == typeof e && (e = Object(S.c) (e)), o(e, t, n)),
          n
        }().options,
        n = k(navigator.userAgent),
        r = A(t.routes);
        L(r, n);
        const o = window.location.pathname.split('/') [1],
        base = t.base;
        let c = {
          ...t
        };
        c.originalBase = base;
        let l = '';
        if (
          _.includes(o) ? (l = o, c.base = '/'.concat(o).concat(base)) : c.base = base,
          void 0 !== window.__NUXT__.localeFromUrl &&
          window.__NUXT__.localeFromUrl !== l
        ) {
          const e = window.__NUXT__.localeFromUrl,
          t = ''.concat(e ? '/' : '').concat(e).concat(base);
          c.base = t;
          const n = l.length ? window.location.pathname.substring(l.length + 1) : window.location.pathname,
          r = ''.concat(e ? '/' : '').concat(e).concat(n).concat(window.location.search).concat(window.location.hash);
          window.history.replaceState({
          }, document.title, r)
        }
        const d = new f.a({
          ...c,
          routes: r
        });
        return function (e, t) {
          e.beforeEach(
            (
              (n, r, o) => {
                var c,
                l,
                d,
                m;
                const h = x(n);
                null === (c = n.query) ||
                void 0 === c ||
                delete c.skipOpenInNewPage;
                const f = null === (l = n.params) ||
                void 0 === l ? void 0 : l.$params;
                if (
                  !t ||
                  !r.name ||
                  h &&
                  (
                    x(r) ||
                    'pop' !== (null === (d = n.query) || void 0 === d ? void 0 : d.nav_dir) &&
                    'close' !== (null === (m = n.query) || void 0 === m ? void 0 : m.nav_dir) &&
                    'pop' !== (null == f ? void 0 : f.navDir) &&
                    'close' !== (null == f ? void 0 : f.navDir)
                  ) ||
                  N(r, n)
                ) o();
                 else {
                  var v,
                  y,
                  w;
                  o(!1);
                  const t = [];
                  null != f &&
                  f.pageTitle &&
                  t.push('pageTitle='.concat(f.pageTitle)),
                  null != f &&
                  f.navType &&
                  t.push('nav_type='.concat(f.navType || 'slider')),
                  null != f &&
                  f.navDir &&
                  t.push('nav_dir='.concat(f.navDir || 'push'));
                  const r = t.join('&');
                  let c = n.fullPath.replace(/^\//, '');
                  const l = c.split('#');
                  c = l[0];
                  const d = l[1];
                  window.location.href = ''.concat(
                    null === (
                      v = null !== (y = e.options.base) &&
                      void 0 !== y ? y : null === (w = e.options.history) ||
                      void 0 === w ? void 0 : w.base
                    ) ||
                    void 0 === v ? void 0 : v.replace(/\/$/, ''),
                    '/'
                  ).concat(c).concat(r ? ''.concat(c.includes('?') ? '&' : '?').concat(r) : '').concat(d ? '#'.concat(d) : '')
                }
              }
            )
          )
        }(d, n),
        d
      }
      r.default.use(f.a);
      var F = {
        name: 'NuxtChild',
        functional: !0,
        props: {
          nuxtChildKey: {
            type: String,
          default:
            ''
          },
          keepAlive: Boolean,
          keepAliveProps: {
            type: Object,
          default:
            void 0
          }
        },
        render(e, t) {
          let {
            parent: n,
            data: data,
            props: r
          }
          = t;
          const o = n.$createElement;
          data.nuxtChild = !0;
          const c = n,
          l = n.$nuxt.nuxt.transitions,
          d = n.$nuxt.nuxt.defaultTransition;
          let m = 0;
          for (; n; ) n.$vnode &&
          n.$vnode.data.nuxtChild &&
          m++,
          n = n.$parent;
          data.nuxtChildDepth = m;
          const h = l[m] ||
          d,
          f = {};
          M.forEach((e => {
            void 0 !== h[e] &&
            (f[e] = h[e])
          }));
          const v = {};
          $.forEach((e => {
            'function' == typeof h[e] &&
            (v[e] = h[e].bind(c))
          }));
          {
            const e = v.beforeEnter;
            v.beforeEnter = t => {
              if (
                window.$nuxt.$nextTick((() => {
                  window.$nuxt.$emit('triggerScroll')
                })),
                e
              ) return e.call(c, t)
            }
          }
          if (!1 === h.css) {
            const e = v.leave;
            (!e || e.length < 2) &&
            (v.leave = (t, n) => {
              e &&
              e.call(c, t),
              c.$nextTick(n)
            })
          }
          let y = o('routerView', data);
          return r.keepAlive &&
          (y = o('keep-alive', {
            props: r.keepAliveProps
          }, [
            y
          ])),
          o('transition', {
            props: f,
            on: v
          }, [
            y
          ])
        }
      };
      const M = [
        'name',
        'mode',
        'appear',
        'css',
        'type',
        'duration',
        'enterClass',
        'leaveClass',
        'appearClass',
        'enterActiveClass',
        'enterActiveClass',
        'leaveActiveClass',
        'appearActiveClass',
        'enterToClass',
        'leaveToClass',
        'appearToClass'
      ],
      $ = [
        'beforeEnter',
        'enter',
        'afterEnter',
        'enterCancelled',
        'beforeLeave',
        'leave',
        'afterLeave',
        'leaveCancelled',
        'beforeAppear',
        'appear',
        'afterAppear',
        'appearCancelled'
      ];
      var j = {
        layout: 'error-layout',
        components: {
          nuxtErrorPage: () => Promise.all([n.e(14),
          n.e(142),
          n.e(158)]).then(n.bind(null, 1181))
        },
        props: {
          error: {
            type: Object,
          default:
            null
          }
        }
      },
      V = n(2),
      G = Object(V.a) (
        j,
        (
          function () {
            return (0, this._self._c) ('nuxt-error-page', {
              attrs: {
                error: this.error
              }
            })
          }
        ),
        [],
        !1,
        null,
        null,
        null
      ).exports,
      B = {
        name: 'Nuxt',
        components: {
          NuxtChild: F,
          NuxtError: G
        },
        props: {
          nuxtChildKey: {
            type: String,
          default:
            void 0
          },
          keepAlive: Boolean,
          keepAliveProps: {
            type: Object,
          default:
            void 0
          },
          name: {
            type: String,
          default:
            'default'
          }
        },
        errorCaptured(e) {
          this.displayingNuxtError &&
          (this.errorFromNuxtError = e, this.$forceUpdate())
        },
        computed: {
          routerViewKey() {
            if (void 0 !== this.nuxtChildKey || this.$route.matched.length > 1) return this.nuxtChildKey ||
            Object(T.c) (this.$route.matched[0].path) (this.$route.params);
            const [e] = this.$route.matched;
            if (!e) return this.$route.path;
            const t = e.components.default;
            if (t && t.options) {
              const {
                options: e
              }
              = t;
              if (e.key) return 'function' == typeof e.key ? e.key(this.$route) : e.key
            }
            return /\/$/.test(e.path) ? this.$route.path : this.$route.path.replace(/\/$/, '')
          }
        },
        beforeCreate() {
          r.default.util.defineReactive(this, 'nuxt', this.$root.$options.nuxt)
        },
        render(e) {
          return this.nuxt.err ? this.errorFromNuxtError ? (
            this.$nextTick((() => this.errorFromNuxtError = !1)),
            e(
              'div',
              {
              },
              [
                e('h2', 'An error occurred while showing the error page'),
                e(
                  'p',
                  'Unfortunately an error occurred and while showing the error page another error occurred'
                ),
                e(
                  'p',
                  'Error details: '.concat(this.errorFromNuxtError.toString())
                ),
                e('nuxt-link', {
                  props: {
                    to: '/'
                  }
                }, 'Go back to home')
              ]
            )
          ) : (
            this.displayingNuxtError = !0,
            this.$nextTick((() => this.displayingNuxtError = !1)),
            e(G, {
              props: {
                error: this.nuxt.err
              }
            })
          ) : e('NuxtChild', {
            key: this.routerViewKey,
            props: this.$props
          })
        }
      };
      n(153),
      n(155),
      n(157),
      n(159);
      var z = n(57),
      H = {
        components: {
          nuxtLayoutUser: z.default
        },
        middleware(e) {
          let {
            store: t
          }
          = e;
          t.dispatch('context/load', 'user')
        }
      },
      Q = Object(V.a) (
        H,
        (
          function () {
            return (0, this._self._c) ('nuxt-layout-user', {
              attrs: {
                isFooterEnabled: !1
              }
            })
          }
        ),
        [],
        !1,
        null,
        null,
        null
      ).exports,
      W = {
        components: {
          nuxtLayoutUser: z.default
        },
        middleware(e) {
          let {
            store: t
          }
          = e;
          t.dispatch('context/load', 'user')
        }
      },
      K = Object(V.a) (
        W,
        (function () {
          return (0, this._self._c) ('nuxt-layout-user')
        }),
        [],
        !1,
        null,
        null,
        null
      ).exports,
      J = Object(V.a) ({
      }, (function () {
        return (0, this._self._c) ('nuxt')
      }), [], !1, null, null, null).exports,
      X = n(51),
      Z = n(72),
      Y = {
        components: {
          nuxtLayoutUser: () => Promise.resolve().then(n.bind(null, 57)),
          nuxtLayoutVisitorSsiV2: () => n.e(95).then(n.bind(null, 1185))
        },
        middleware(e) {
          let {
            store: t,
            $httpConfig: n
          }
          = e;
          n.redirToLogin = !1,
          t.dispatch('context/load')
        },
        async layoutFetch(e) {
          e.$cookies.get(''.concat(e.config.cookiePrefix, 'oauth2_global_js_token')) ? (e.$httpConfig.auth = !0, await Object(X.a) (e)) : (
            e.$httpConfig.auth = !1,
            await Promise.all([Object(Z.a) (e),
            e.store.dispatch('context/ready')])
          )
        }
      },
      ee = Object(V.a) (
        Y,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'span',
              [
                e.$store.getters['context/isUser'] ? t('nuxt-layout-user') : e._e(),
                e._v(' '),
                e.$store.getters['context/isVisitor'] ? t('nuxt-layout-visitor-ssi-v2') : e._e()
              ],
              1
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      ).exports;
      const te = {
        '_default-without-footer': Object(T.s) (Q),
        _default: Object(T.s) (K),
        '_error-layout': Object(T.s) (J),
        '_user-visitor': Object(T.s) (ee)
      };
      var ne = {
        render(e, t) {
          const n = e(this.layout || 'nuxt'),
          r = e('div', {
            domProps: {
              id: '__layout'
            },
            key: this.layoutName
          }, [
            n
          ]),
          o = e(
            'transition',
            {
              props: {
                name: 'layout',
                mode: 'out-in'
              },
              on: {
                beforeEnter(e) {
                  window.$nuxt.$nextTick((() => {
                    window.$nuxt.$emit('triggerScroll')
                  }))
                }
              }
            },
            [
              r
            ]
          );
          return e('div', {
            domProps: {
              id: '__nuxt'
            }
          }, [
            o
          ])
        },
        data: () => ({
          isOnline: !0,
          layout: null,
          layoutName: '',
          nbFetching: 0
        }),
        beforeCreate() {
          r.default.util.defineReactive(this, 'nuxt', this.$options.nuxt)
        },
        created() {
          this.$root.$options.$nuxt = this,
          window.$nuxt = this,
          this.refreshOnlineStatus(),
          window.addEventListener('online', this.refreshOnlineStatus),
          window.addEventListener('offline', this.refreshOnlineStatus),
          this.error = this.nuxt.error,
          this.context = this.$options.context
        },
        watch: {
          'nuxt.err': 'errorChanged'
        },
        computed: {
          isOffline() {
            return !this.isOnline
          },
          isFetching() {
            return this.nbFetching > 0
          }
        },
        methods: {
          refreshOnlineStatus() {
            void 0 === window.navigator.onLine ? this.isOnline = !0 : this.isOnline = window.navigator.onLine
          },
          async refresh() {
            const e = Object(T.h) (this.$route);
            if (!e.length) return;
            const t = e.map(
              (
                async e => {
                  let p = [];
                  e.$options.fetch &&
                  e.$options.fetch.length &&
                  p.push(Object(T.q) (e.$options.fetch, this.context)),
                  e.$options.asyncData &&
                  p.push(
                    Object(T.q) (e.$options.asyncData, this.context).then((t => {
                      for (const n in t) r.default.set(e.$data, n, t[n])
                    }))
                  ),
                  await Promise.all(p),
                  p = [],
                  e.$fetch &&
                  p.push(e.$fetch());
                  for (const component of Object(T.e) (e.$vnode.componentInstance)) p.push(component.$fetch());
                  return Promise.all(p)
                }
              )
            );
            try {
              await Promise.all(t)
            } catch (e) {
              Object(T.k) (e),
              this.error(e)
            }
          },
          errorChanged() {
            if (this.nuxt.err) {
              let e = (G.options || G).layout;
              'function' == typeof e &&
              (e = e(this.context)),
              this.setLayout(e)
            }
          },
          setLayout(e) {
            if (e && 'string' != typeof e) throw new Error('[nuxt] Avoid using non-string value as layout property.');
            return e &&
            te['_' + e] ||
            (e = 'default'),
            this.layoutName = e,
            this.layout = te['_' + e],
            this.layout
          },
          loadLayout: e => (e && te['_' + e] || (e = 'default'), Promise.resolve(te['_' + e]))
        }
      };
      r.default.use(o.a);
      const ie = [
        'state',
        'getters',
        'actions',
        'mutations'
      ];
      let re = {};
      re.modules = re.modules ||
      {
      },
      se(n(145), 'chatPro.js'),
      se(n(148), 'ffs.js'),
      se(n(147), 'umaLlmgw.js'),
      se(n(146), 'umaPro.js');
      const ae = re instanceof Function ? re : () => new o.a.Store(Object.assign({
        strict: !1
      }, re));
      function oe(e, t) {
        if (e.state && 'function' != typeof e.state) {
          console.warn(
            '\'state\' should be a method that returns an object in '.concat(t)
          );
          const n = Object.assign({
          }, e.state);
          e = Object.assign({
          }, e, {
            state: () => n
          })
        }
        return e
      }
      function se(e, t) {
        e = e.default ||
        e;
        const n = t.replace(/\.(js|mjs)$/, '').split('/');
        let r = n[n.length - 1];
        const o = 'store/'.concat(t);
        if (
          e = 'state' === r ? function (e, t) {
            if ('function' != typeof e) {
              console.warn(
                ''.concat(t, ' should export a method that returns an object')
              );
              const n = Object.assign({
              }, e);
              return () => n
            }
            return oe(e, t)
          }(e, o) : oe(e, o),
          ie.includes(r)
        ) {
          const t = r;
          return void le(ce(re, n, {
            isProperty: !0
          }), e, t)
        }
        'index' === r &&
        (n.pop(), r = n[n.length - 1]);
        const c = ce(re, n);
        for (const t of ie) le(c, e[t], t);
        !1 === e.namespaced &&
        delete c.namespaced
      }
      function ce(e, t) {
        let {
          isProperty: n = !1
        }
        = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : {
        };
        if (!t.length || n && 1 === t.length) return e;
        const r = t.shift();
        return e.modules[r] = e.modules[r] ||
        {
        },
        e.modules[r].namespaced = !0,
        e.modules[r].modules = e.modules[r].modules ||
        {
        },
        ce(e.modules[r], t, {
          isProperty: n
        })
      }
      function le(e, t, n) {
        t &&
        ('state' === n ? e.state = t ||
        e.state : e[n] = Object.assign({
        }, e[n], t))
      }
      var ue,
      de = n(23),
      me = e => {
        let {
          app: t
        }
        = e;
        t.head.changed = e => {
          let {
            title: title,
            nativeTitle: t
          }
          = e;
          t &&
          de.a.postMessage({
            type: 'up/page/v1/UPDATE',
            payload: {
              pageTitle: !0 === t ? title : t
            }
          })
        }
      };
      function he(e, t) {
        t('isCacheable', !!e.nuxtState.isCacheable)
      }
      function fe() {
        return new Promise((e => {
          setTimeout(e)
        }))
      }
      var pe = new Uint8Array(16);
      function ge() {
        if (
          !ue &&
          !(
            ue = 'undefined' != typeof crypto &&
            crypto.getRandomValues &&
            crypto.getRandomValues.bind(crypto) ||
            'undefined' != typeof msCrypto &&
            'function' == typeof msCrypto.getRandomValues &&
            msCrypto.getRandomValues.bind(msCrypto)
          )
        ) throw new Error(
          'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported'
        );
        return ue(pe)
      }
      var ve = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      for (
        var ye = function (e) {
          return 'string' == typeof e &&
          ve.test(e)
        },
        we = [],
        be = 0;
        be < 256;
        ++be
      ) we.push((be + 256).toString(16).substr(1));
      var ke = function (e) {
        var t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : 0,
        n = (
          we[e[t + 0]] + we[e[t + 1]] + we[e[t + 2]] + we[e[t + 3]] + '-' + we[e[t + 4]] + we[e[t + 5]] + '-' + we[e[t + 6]] + we[e[t + 7]] + '-' + we[e[t + 8]] + we[e[t + 9]] + '-' + we[e[t + 10]] + we[e[t + 11]] + we[e[t + 12]] + we[e[t + 13]] + we[e[t + 14]] + we[e[t + 15]]
        ).toLowerCase();
        if (!ye(n)) throw TypeError('Stringified UUID is invalid');
        return n
      };
      var Se = function (e, t, n) {
        var r = (e = e || {
        }).random ||
        (e.rng || ge) ();
        if (r[6] = 15 & r[6] | 64, r[8] = 63 & r[8] | 128, t) {
          n = n ||
          0;
          for (var i = 0; i < 16; ++i) t[n + i] = r[i];
          return t
        }
        return ke(r)
      };
      class Te {
        constructor() {
          let {
            headers: e
          }
          = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : {
          };
          this.serverSpan = function () {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : {
            };
            return {
              traceId: e['vnd-eo-trace-id'] ||
              Ee(),
              id: e['vnd-eo-span-id'] ||
              Ee(),
              parentId: e['vnd-eo-parent-span-id'] ||
              null,
              geoIpHeader: e['cf-ipcountry']
            }
          }(e)
        }
        setServerSpan(span) {
          this.serverSpan = span
        }
        getServerSpan() {
          return this.serverSpan
        }
        generateClientSpan() {
          const {
            traceId: e,
            id: t
          }
          = this.serverSpan;
          return {
            traceId: e,
            id: Ee(),
            parentId: t
          }
        }
      }
      function Ee() {
        return Se()
      }
      let Ie;
      function _e(e) {
        return e ? (e.tracer = e.tracer || new Te(e), e.tracer) : (Ie = Ie || new Te, Ie)
      }
      var span = {
        namespaced: !0,
        state: () => ({
          span: {
            id: null,
            parentId: null,
            traceId: null,
            isPopulated: !1
          }
        }),
        mutations: {
          setSpan(e, span) {
            Object.assign(e.span, span),
            e.span.isPopulated = !0
          }
        }
      },
      Ce = function (e, t) {
        !function (e, t) {
          const {
            store: n,
            req: r,
            $isCacheable: o
          }
          = e,
          c = _e(r);
          n.hasModule('tracing') ||
          n.registerModule('tracing', {
            namespaced: !0
          }, {
            preserveState: !!n.state.tracing
          }),
          n.hasModule(['tracing',
          'native']) ||
          n.registerModule(
            ['tracing',
            'native'],
            {
              ...span
            },
            {
              preserveState: !!n.state.tracing.native
            }
          ),
          n.state.tracing.native.span.isPopulated ? c.setServerSpan(n.state.tracing.native.span) : n.commit('tracing/native/setSpan', c.getServerSpan()),
          t('tracer', c)
        }(e, t)
      },
      Ne = (e, t) => {
        let {
          req: n,
          res: r
        }
        = e;
        const o = !1;
        t('cookiesUniversal', y() (n, r, o))
      };
      function xe(e, t) {
        function n(t, n) {
          let r,
          o = arguments.length > 2 &&
          void 0 !== arguments[2] ? arguments[2] : {
          };
          r = 'https:' === window.location.protocol,
          e.app.$cookiesUniversal.set(
            t,
            n,
            {
              path: '/',
              secure: r,
              ...null === e.config.cookieDomain ? {
              }
               : {
                domain: e.config.cookieDomain
              },
              ...o
            }
          )
        }
        const r = new Proxy({
        }, {
          get: (t, r) => 'set' === r ? n : function () {
            return e.app.$cookiesUniversal[r](...arguments)
          }
        });
        t('cookies', r)
      }
      var Ae = (e, t) => {
        const n = window.NUXT_APP_CONFIG;
        n.cookiePrefix = null != n.cookiePrefix ? n.cookiePrefix : e.app.$cookies.get('cookie_prefix') ||
        '',
        void 0 === n.cookieDomain &&
        (
          n.cookieDomain = e.app.$cookies.get('cookie_domain') ||
          '.upwork.com'
        ),
        e.config = n,
        t('config', n),
        t('appConfig', n)
      };
      n(17);
      function Oe(e, body) {
        var t,
        n,
        r,
        g,
        o = {
          label: 0,
          sent: function () {
            if (1 & r[0]) throw r[1];
            return r[1]
          },
          trys: [],
          ops: []
        };
        return g = {
          next: c(0),
          throw : c(1),
          return : c(2)
        },
        'function' == typeof Symbol &&
        (g[Symbol.iterator] = function () {
          return this
        }),
        g;
        function c(c) {
          return function (l) {
            return function (c) {
              if (t) throw new TypeError('Generator is already executing.');
              for (; o; ) try {
                if (
                  t = 1,
                  n &&
                  (
                    r = 2 & c[0] ? n.return : c[0] ? n.throw ||
                    ((r = n.return) && r.call(n), 0) : n.next
                  ) &&
                  !(r = r.call(n, c[1])).done
                ) return r;
                switch (n = 0, r && (c = [
                    2 & c[0],
                    r.value
                  ]), c[0]) {
                  case 0:
                  case 1:
                    r = c;
                    break;
                  case 4:
                    return o.label++,
                    {
                      value: c[1],
                      done: !1
                    };
                  case 5:
                    o.label++,
                    n = c[1],
                    c = [
                      0
                    ];
                    continue;
                  case 7:
                    c = o.ops.pop(),
                    o.trys.pop();
                    continue;
                  default:
                    if (
                      !(r = o.trys, (r = r.length > 0 && r[r.length - 1]) || 6 !== c[0] && 2 !== c[0])
                    ) {
                      o = 0;
                      continue
                    }
                    if (3 === c[0] && (!r || c[1] > r[0] && c[1] < r[3])) {
                      o.label = c[1];
                      break
                    }
                    if (6 === c[0] && o.label < r[1]) {
                      o.label = r[1],
                      r = c;
                      break
                    }
                    if (r && o.label < r[2]) {
                      o.label = r[2],
                      o.ops.push(c);
                      break
                    }
                    r[2] &&
                    o.ops.pop(),
                    o.trys.pop();
                    continue
                }
                c = body.call(e, o)
              } catch (e) {
                c = [
                  6,
                  e
                ],
                n = 0
              } finally {
                t = r = 0
              }
              if (5 & c[0]) throw c[1];
              return {
                value: c[0] ? c[1] : void 0,
                done: !0
              }
            }([c,
            l])
          }
        }
      }
      var De = function (e, t) {
        return n = void 0,
        r = void 0,
        c = function () {
          return Oe(
            this,
            (
              function (n) {
                switch (n.label) {
                  case 0:
                    return [4,
                    t.api.url(t.endpoint || '/upi/jslogger').formUrl(e).post()];
                  case 1:
                    return [2,
                    n.sent()]
                }
              }
            )
          )
        },
        new ((o = void 0) || (o = Promise)) (
          (
            function (e, t) {
              function l(e) {
                try {
                  m(c.next(e))
                } catch (e) {
                  t(e)
                }
              }
              function d(e) {
                try {
                  m(c.throw(e))
                } catch (e) {
                  t(e)
                }
              }
              function m(t) {
                t.done ? e(t.value) : new o((function (e) {
                  e(t.value)
                })).then(l, d)
              }
              m((c = c.apply(n, r || [])).next())
            }
          )
        );
        var n,
        r,
        o,
        c
      };
      const Re = (e, t) => {
        const n = e.split('; '.concat(t, '='));
        if (2 === n.length) try {
          return decodeURIComponent(n.pop().split(';').shift())
        } catch (e) {
          return null
        }
        return null
      },
      Pe = (e, t) => {
        if (null == e || !e.headers) return null;
        const n = '; '.concat(e.headers.cookie);
        return Re(n, t)
      },
      Le = [
        '@timestamp',
        'message',
        'trace',
        'url',
        'shortMessage',
        'level'
      ],
      Ue = data => {
        const e = {
          ...data
        };
        return Le.forEach((t => delete e[t])),
        e
      };
      function Fe(e) {
        let {
          config: t,
          store: n,
          route: r
        }
        = e;
        const o = [];
        if (!t.flagDependentMetrics || !n.state.flags) return o;
        const {
          flagName: c,
          routeNamePattern: l
        }
        = t.flagDependentMetrics;
        if (!c || !l) return o;
        var d,
        m;
        new RegExp(l).test(r.name) &&
        (
          c &&
          void 0 !== (null === (d = n.state.flags.ff) || void 0 === d ? void 0 : d[c]) &&
          o.push({
            flagName: c,
            flagValue: n.state.flags.ff[c] ? 'true' : 'false',
            routeName: r.name
          }),
          c &&
          void 0 !== (null === (m = n.state.flags.qt) || void 0 === m ? void 0 : m[c]) &&
          o.push({
            flagName: c,
            flagValue: n.state.flags.qt[c],
            routeName: r.name
          })
        );
        return o
      }
      function Me(e, t) {
        const n = e.appType ||
        'nuxt.app',
        r = [
          'error',
          'warn',
          'log'
        ],
        o = {
          commonLogger: async(data, t) => {
            if (!data) return;
            const o = 'string' == typeof data ? {
              message: data
            }
             : data;
            o.message = (
              (e, t) => {
                if ('object' == typeof e && null !== e) return e;
                const n = e ||
                'unknown error message',
                r = 'object' == typeof t ? '' : t;
                return ''.concat(r ? ''.concat(r, ': ') : '').concat(n)
              }
            ) (o.message, t.msgPrefix);
            const {
              hideRequestBody: c
            }
            = t;
            let l = - 1 !== r.indexOf('object' == typeof t ? t.level : '') ? t.level : 'error';
            o.level &&
            r.includes(o.level) &&
            (l = o.level);
            if (
              'error' === l &&
              o.message &&
              [
                'ResizeObserver loop limit exceeded',
                'ResizeObserver loop completed with undelivered notifications'
              ].some((pattern => o.message.includes(pattern)))
            ) return;
            const d = (
              (e, t, n) => {
                var r,
                o,
                c,
                l,
                d,
                m,
                h,
                f;
                const {
                  base: base,
                  config: v,
                  route: y,
                  req: w,
                  $tracer: k
                }
                = t,
                {
                  state: S
                }
                = t.store,
                T = k.getServerSpan() ||
                {
                },
                {
                  traceId: E
                }
                = T,
                I = Pe(w, 'cookie_prefix') ||
                '',
                _ = {
                  '@timestamp': (new Date).toISOString(),
                  message: ((null == e ? void 0 : e.message) || '').substr(0, 5000),
                  trace: ((null == e ? void 0 : e.stack) || '').substr(0, 5000),
                  url: ''.concat(base.replace(/\/$/, ''), '/').concat((y ? y.fullPath : '').replace(/^\//, '')),
                  visitorId: null === (r = S.visitor) ||
                  void 0 === r ? void 0 : r.id,
                  userUid: (null === (o = S.user) || void 0 === o ? void 0 : o.id) ||
                  Pe(w, ''.concat(I, 'user_uid')),
                  userNid: null === (c = S.user) ||
                  void 0 === c ? void 0 : c.nid,
                  isSudo: null === (l = S.user) ||
                  void 0 === l ? void 0 : l.isSudo,
                  orgUid: null === (d = S.orgs) ||
                  void 0 === d ? void 0 : d.current.id,
                  orgRid: null === (m = S.orgs) ||
                  void 0 === m ? void 0 : m.current.rid,
                  isVpn: null === (h = S.vpn) ||
                  void 0 === h ? void 0 : h.isVpn,
                  isBot: null === (f = S.bot) ||
                  void 0 === f ? void 0 : f.isBot,
                  serviceName: v.serviceName,
                  appVersion: v.application.rel.version,
                  routeName: y ? y.name : '',
                  handler: null == e ? void 0 : e.handler,
                  traceId: E
                };
                return e &&
                (
                  void 0 !== e.nuxtErrorCode &&
                  (_.nuxtErrorCode = e.nuxtErrorCode),
                  !e.shortMessage &&
                  e.message &&
                  (_.shortMessage = e.message.substr(0, 255))
                ),
                (null != e && e.responseStatus || S.responseStatus) &&
                (
                  _.responseStatus = (null == e ? void 0 : e.responseStatus) ||
                  S.responseStatus
                ),
                (null != e && e.shortMessage || S.shortMessage) &&
                (
                  _.shortMessage = (null == e ? void 0 : e.shortMessage) ||
                  S.shortMessage
                ),
                _.level = (null == e ? void 0 : e.level) ||
                n ||
                'error',
                _
              }
            ) (o, e, l);
            Object.keys(d).forEach((e => {
              void 0 !== o[e] &&
              (d[e] = o[e])
            })),
            'error' === l &&
            e.$sentry &&
            !o.isSentryHandled &&
            function (e) {
              let {
                ctx: t,
                errData: n,
                options: r
              }
              = e,
              o = (null == n ? void 0 : n.message) ||
              '';
              if (
                ('gqlResponse' === r.handler || 'gqlCatch' === r.handler) &&
                r.errors.length
              ) {
                var c;
                const e = r.errors.shift(),
                n = null == e ||
                null === (c = e.extensions) ||
                void 0 === c ? void 0 : c.classification;
                t.$sentry.addBreadcrumb({
                  category: 'graphQL',
                  type: 'info',
                  message: null == e ? void 0 : e.message,
                  level: 'error',
                  data: {
                    errorClassification: n,
                    traceId: r.traceId,
                    requestBody: r.requestBody
                  }
                }),
                o = 'GraphQL error: '.concat(null == e ? void 0 : e.message)
              }
              const l = Ue(n);
              void 0 !== (null == l ? void 0 : l.tags) &&
              null !== l.tags &&
              Object.keys(l.tags).forEach(
                (
                  e => {
                    var r;
                    null === (r = t.$sentry) ||
                    void 0 === r ||
                    r.setTag(e, n.tags[e])
                  }
                )
              ),
              null != t &&
              t.$sentry &&
              'function' == typeof t.$sentry.captureMessage &&
              t.$sentry.captureMessage(o, 'error')
            }({
              ctx: e,
              errData: o,
              options: t
            });
            {
              data &&
              data.unhandledError ||
              console[l](data),
              d.type = ''.concat(n, '.client');
              const t = Fe(e);
              t.length &&
              (d.dependentMetricsContext = JSON.stringify(t));
              const r = e.$http({
                handleApiErrors: !1,
                auth: !1,
                csrf: !1,
                hideRequestBody: c
              }).options({
                suppressLog: !0
              });
              r ? De(d, {
                api: r
              }) : console.warn('logger api is not initialized')
            }
          },
          error: function () {
            for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
            return o.commonLogger(t.shift(), Object.assign({
              level: 'error'
            }, ...t))
          },
          warn: function () {
            for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
            return o.commonLogger(t.shift(), Object.assign({
              level: 'warn'
            }, ...t))
          },
          log: function () {
            for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
            return o.commonLogger(t.shift(), Object.assign({
              level: 'log'
            }, ...t))
          }
        };
        return o
      }
      n(178);
      var $e = (e, t) => {
        const n = Me(e);
        r.default.config.errorHandler = (e, t) => {
          e &&
          (e.handler = 'vueErrorHandler'),
          null != t &&
          t.$logger ? t.$logger.error(e) : console.error(e)
        },
        e.disableGlobalErrorHandler ||
        window.addEventListener(
          'error',
          (
            e => {
              let {
                message: t,
                error: r
              }
              = e;
              null !== r ? (
                r.handler = 'windowErrorHandler',
                r.unhandledError = !0,
                n.error(r)
              ) : t &&
              n.error(t)
            }
          )
        ),
        t('logger', n),
        e.$logger = n
      };
      function qe(object, e) {
        Object.keys(e).forEach(
          (
            t => {
              Object.defineProperty(
                object,
                t,
                {
                  configurable: !0,
                  enumerable: !1,
                  writable: !0,
                  value: e[t]
                }
              )
            }
          )
        )
      }
      const je = () => ({
        current: {
          id: null,
          rid: null,
          type: null,
          legacyType: null,
          enterpriseType: null,
          title: null,
          typeTitle: null,
          photoUrl: null,
          flag: {
            client: null,
            vendor: null,
            agency: null,
            individual: null
          },
          portrait100: null
        },
        orgs: [],
        loading: null,
        loaded: null,
        promise: null,
        error: null
      }),
      Ve = {
        setInitialState(e, t) {
          Object.assign(e, t)
        },
        setOrg(e, t) {
          var n;
          let {
            organization: r,
            companySelector: o
          }
          = t;
          r &&
          (
            Object.assign(
              r,
              {
                portrait100: null === (n = o.profilePortrait) ||
                void 0 === n ? void 0 : n.portrait100
              }
            ),
            Object.assign(e.current, r),
            e.orgs = o.items.map(
              (
                t => {
                  const n = {
                    id: t.organizationId,
                    rid: t.organizationRid,
                    title: t.title,
                    enterpriseType: t.organizationEnterpriseType,
                    type: t.organizationType,
                    legacyType: t.organizationLegacyType,
                    typeTitle: t.typeTitle,
                    photoUrl: t.photoUrl
                  };
                  return r.id === n.id &&
                  [
                    'rid',
                    'enterpriseType',
                    'title',
                    'typeTitle',
                    'photoUrl'
                  ].forEach((p => {
                    e.current[p] = n[p]
                  })),
                  n
                }
              )
            ),
            this.$cookies.set(
              ''.concat(this.$config.cookiePrefix, 'current_organization_uid'),
              e.current.id,
              {
                path: '/',
                maxAge: 2678400
              }
            )
          )
        },
        setLoading(e, t) {
          e.loading = t
        },
        setLoaded(e, t) {
          e.loaded = t
        },
        setPromise(e, t) {
          e.promise = t
        },
        setError(e, t) {
          e.error = t
        }
      },
      Ge = {
        async load(e) {
          let {
            state: t,
            commit: n
          }
          = e,
          r = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          const o = r.cache ||
          {
            strategy: 'cacheAndNetwork'
          },
          c = void 0 === r.throwOnErrors ||
          r.throwOnErrors;
          if (t.loading) {
            if (await t.promise, c && this.state.orgs.error) throw this.state.orgs.error;
            return !0
          }
          if (t.loaded) {
            if (c && this.state.error) throw this.state.error;
            return !0
          }
          n('setLoading', !0);
          const l = this.$httpGql({
            requestAlias: 'orgs-context',
            auth: !0,
            redirToLogin: r.redirToLogin,
            handleApiErrors: !0,
            cache: o,
            onSuccess: e => n('setOrg', e.data),
            onError: (e, t) => !t &&
            n('setError', e),
            processGqlErrors: e => null == e ? void 0 : e.filter((e => 'No entity found for uid :null' !== e.message))
          }).options({
            suppressLog: !c
          }).post({
            query: 'query {\n          organization {\n            id\n            type\n            legacyType\n            flag {\n              client\n              vendor\n              agency\n              individual\n            }\n          }\n          companySelector {\n            items {\n              organizationId\n              organizationRid\n              organizationEnterpriseType\n              organizationType\n              organizationLegacyType\n              typeTitle\n              title\n              photoUrl\n            }\n            profilePortrait {\n              portrait100\n            }\n          }\n        }\n        '
          }).json();
          n('setPromise', l);
          try {
            await l
          } catch (e) {
            if (c) throw this.$logger.error(e, {
              msgPrefix: 'store orgs/load error'
            }),
            e
          }
          if (
            n('setPromise', null),
            n('setLoaded', !0),
            n('setLoading', !1),
            c &&
            this.state.orgs.error
          ) throw this.state.orgs.error;
          return !0
        }
      };
      const Be = () => ({
        items: [],
        activeItem: void 0
      }),
      ze = {
        activeOrgUid: e => e.activeItem ? e.activeItem.uid : void 0
      },
      He = {
        setOrganizations: (e, t) => {
          e.items = t.items,
          e.activeItem = t.activeItem
        }
      },
      Qe = {
        setFromOrg(e) {
          let {
            commit: t,
            rootState: n
          }
          = e;
          const {
            rid: r
          }
          = n.user,
          {
            current: o,
            orgs: c
          }
          = n.orgs;
          if (!c) return void t('setOrganizations', {
            items: []
          });
          const l = c.map(
            (
              e => ({
                label: e.title,
                photo_url: e.photoUrl,
                uid: e.id,
                ...We(e, r, this.$logger),
                ...Ke(e),
                is_active: o.id === e.id
              })
            )
          ),
          d = l.find((e => 'freelancer' === e.type));
          d &&
          (d.portrait100 = o.portrait100),
          t(
            'setOrganizations',
            {
              items: l,
              activeItem: {
                ...l.find((e => o.id === e.uid))
              }
            }
          )
        }
      };
      function We(e, t, n) {
        return 'Business' === e.type ? function (e) {
          var t;
          const n = {
            id: e.rid,
            link: '/signup/home?companyReference='.concat(e.rid)
          };
          return 'CLIENT' === (null === (t = e.legacyType) || void 0 === t ? void 0 : t.toUpperCase()) ? (
            n.type = 'client',
            n.client_type = {
              Standard: 'standard',
              Compliance: 'compliance'
            }
            [
              e.enterpriseType
            ] ||
            'client'
          ) : n.type = 'agency',
          n
        }(e) : 'SoleProprietor' === e.type ? function (e) {
          return {
            id: 'd'.concat(e),
            link: '/signup/home?companyReference=d'.concat(e),
            type: 'freelancer'
          }
        }(t) : void n.warn(
          'Organizations state: unknown organization type: "'.concat(e.type, '"')
        )
      }
      function Ke(e) {
        if (void 0 !== e.typeTitle) return {
          type_title: e.typeTitle
        }
      }
      const Je = () => ({
        id: null,
        rid: null,
        nid: null,
        loading: null,
        loaded: null,
        promise: null,
        error: null,
        isSudo: null
      }),
      Xe = {
        setInitialState(e, t) {
          Object.assign(e, t)
        },
        setUser(e, t) {
          Object.assign(e, t)
        },
        setIsSudo(e, t) {
          e.isSudo = t
        },
        setLoading(e, t) {
          e.loading = t
        },
        setPromise(e, t) {
          e.promise = t
        },
        setLoaded(e, t) {
          e.loaded = t
        },
        setError(e, t) {
          e.error = t
        }
      },
      Ze = {
        async load(e) {
          let {
            state: t,
            commit: n
          }
          = e,
          r = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          const o = r.cache ||
          {
            strategy: 'cacheAndNetwork'
          },
          c = void 0 === r.throwOnErrors ||
          r.throwOnErrors;
          if (t.loading) {
            if (await t.promise, c && this.state.user.error) throw this.state.user.error;
            return !0
          }
          if (t.loaded) {
            if (c && this.state.user.error) throw this.state.user.error;
            return !0
          }
          n('setLoading', !0);
          const l = this.$httpGql({
            requestAlias: 'user-context',
            auth: !0,
            redirToLogin: r.redirToLogin,
            handleApiErrors: !0,
            cache: o,
            onSuccess: e => {
              n('setUser', e.data.user),
              n('setIsSudo', e.data.requestMetadata.sudo),
              n('context/setIsLoggedIn', !0, {
                root: !0
              })
            },
            onError: (e, t) => !t &&
            n('setError', e)
          }).options({
            suppressLog: !c
          }).post({
            query: 'query {\n          user {\n            id\n            rid\n            nid\n          }\n          requestMetadata {\n            sudo\n          }\n        }'
          }).json();
          n('setPromise', l);
          try {
            await l
          } catch (e) {
            if (c) throw this.$logger.error(e, {
              msgPrefix: 'store user/load error'
            }),
            e
          }
          if (
            n('setPromise', null),
            n('setLoaded', !0),
            n('setLoading', !1),
            c &&
            this.state.user.error
          ) throw this.state.user.error;
          return !0
        }
      };
      const Ye = () => ({
        id: null
      }),
      et = {
        setInitialState(e, t) {
          Object.assign(e, t)
        },
        setId(e, t) {
          e.id = t
        },
        setIp(e, t) {
          e.ip = t
        }
      },
      tt = {
        load(e) {
          let {
            state: t,
            commit: n
          }
          = e;
          if (t.id) return !0;
          const r = 'visitor_id';
          let o = this.$cookies.get(r);
          return n('setId', o),
          !0
        }
      };
      const nt = () => ({
        isVpn: null,
        loading: null,
        loaded: null,
        error: null,
        promise: null
      }),
      it = {
        setInitialState(e, t) {
          Object.assign(e, t)
        },
        setIsVpn(e, t) {
          e.isVpn = t
        },
        setLoading(e, t) {
          e.loading = t
        },
        setLoaded(e, t) {
          e.loaded = t
        },
        setPromise(e, t) {
          e.promise = t
        },
        setError(e, t) {
          e.error = t
        }
      },
      at = {
        async load(e) {
          let {
            state: t,
            commit: n
          }
          = e,
          r = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          const o = r.cache ||
          {
            strategy: 'cacheAndNetwork'
          },
          c = void 0 === r.logErrors ||
          r.logErrors;
          if (t.loading) return await t.promise,
          !0;
          if (t.loaded) return !0;
          {
            n('setLoading', !0);
            const e = this.$httpGql({
              requestAlias: 'vpn-context',
              auth: r.auth,
              redirToLogin: r.redirToLogin,
              handleApiErrors: !1,
              cache: o,
              onSuccess(e) {
                n('setIsVpn', e.data.requestMetadata.internal)
              },
              onError: (e, t) => !t &&
              n('setError', !0)
            }).options({
              suppressLog: !c
            }).post({
              query: 'query{\n            requestMetadata{\n              internal\n            }\n          }'
            }).json();
            n('setPromise', e);
            try {
              await e
            } catch (e) {
              c &&
              this.$logger.error(e, {
                msgPrefix: 'store user/vpn error'
              })
            }
          }
          return n('setPromise', null),
          n('setLoaded', !0),
          n('setLoading', !1),
          !0
        }
      };
      var ot = n(13);
      const st = e => {
        return t = e,
        '[object Object]' === Object.prototype.toString.call(t) ? Object.keys(e).filter((t => e[t])).join(', ') : null;
        var t
      },
      ct = () => ({
        loaded: !1,
        loading: !1,
        error: null,
        promise: null,
        isLoggedIn: null,
        auth: null
      }),
      lt = {
        setInitialState(e, t) {
          Object.assign(e, t)
        },
        setLoading(e, t) {
          e.loading = t
        },
        setLoaded(e, t) {
          e.loaded = t
        },
        setPromise(e, t) {
          e.promise = t
        },
        setIsLoggedIn(e, t) {
          e.isLoggedIn = t
        },
        setError(e, t) {
          e.error = t
        },
        setAuth(e, t) {
          e.auth = t
        }
      },
      ut = {
        isUser: (e, t, n) => e.isLoggedIn &&
        null !== n.user.id,
        isVisitor: (e, t) => !t.isUser,
        surveyData(e, t, n) {
          const {
            orgs: {
              current: r
            },
            user: o,
            visitor: c
          }
          = n;
          return {
            'User Id': o.id,
            'Organization Id': r.id,
            'User Nid': o.nid,
            'User Rid': o.rid,
            'Organization Rid': r.rid,
            'Organization Type': r.type,
            'Organization Legacy Type': r.legacyType,
            'Organization Enterprise Type': r.enterpriseType,
            'Organization Title': r.title,
            'Organization Type Title': r.typeTitle,
            'Organization Type Flag': st(r.flag),
            'Visitor Id': c.id
          }
        }
      },
      mt = {
        async load(e, t) {
          let {
            state: n,
            commit: r,
            getters: o,
            dispatch: c
          }
          = e;
          if (n.loaded) return;
          if (n.promise) return void await n.promise;
          const l = this.$cookies.get(
            ''.concat(this.$config.cookiePrefix, 'oauth2_global_js_token')
          );
          let d;
          d = t &&
          t.contextType ? t.contextType : 'visitor' === t ? 'visitor' : this.$httpConfig.auth &&
          !this.$httpConfig.redirToLogin ? 'mixed' : this.$httpConfig.auth ? 'user' : 'visitor';
          const m = 'user' === d,
          h = 'user' === d,
          f = 'user' === d,
          v = l ||
          'user' === d;
          let y;
          t &&
          void 0 !== t.cache ? y = t.cache : 'user' !== d &&
          (y = {
            cacheIfSkipNetwork: !0
          });
          {
            const e = y &&
            y.cacheIfSkipNetwork;
            if (this.$skipNetwork || !e) {
              const {
                readyResolve: e
              }
              = n,
              t = ot.a.get('contextState');
              t &&
              (
                ['context',
                'orgs',
                'user',
                'visitor',
                'vpn',
                'currency'].forEach(
                  (
                    e => {
                      const n = t[e];
                      'object' == typeof n &&
                      null !== n &&
                      delete n.readyResolve,
                      this.commit(''.concat(e, '/setInitialState'), n),
                      this.$skipNetwork ||
                      'visitor' === e ||
                      'currency' === e ||
                      this.commit(''.concat(e, '/setLoaded'), !1)
                    }
                  )
                ),
                e.forEach((t => e.push(t)))
              )
            }
            if (
              n.loaded &&
              (
                await Promise.resolve(),
                n.readyResolve.forEach((e => e())),
                n.readyResolve = [],
                this.$skipNetwork
              )
            ) return
          }
          const w = Promise.all(
            [v ? this.dispatch('orgs/load', {
              cache: y,
              redirToLogin: m,
              throwOnErrors: f
            }) : null,
            v ? this.dispatch('user/load', {
              cache: y,
              redirToLogin: m,
              throwOnErrors: f
            }) : null,
            this.dispatch('visitor/load'),
            this.dispatch('vpn/load', {
              auth: v,
              redirToLogin: m,
              logErrors: h
            }),
            this.$hasI18nSelector ? this.dispatch(
              'currency/setCodeAndLoadRate',
              {
                currencyCode: this.$currencyCode,
                auth: v
              }
            ) : void 0].filter(Boolean)
          );
          r('setPromise', w),
          r('setLoading', !0);
          try {
            await w
          } catch (e) {
            r('setError', e),
            this.$logger.error(e, {
              msgPrefix: 'store context error'
            })
          }
          if (
            'mixed' === d &&
            (this.$httpConfig.auth = !!o.isUser),
            r('setAuth', this.$httpConfig.auth),
            r('setPromise', null),
            r('setLoading', !1),
            r('setLoaded', !0),
            f &&
            this.state.context.error
          ) throw n.readyReject.forEach((e => e(this.state.context.error))),
          n.readyReject = [],
          n.readyResolve = [],
          this.state.context.error;
          n.readyResolve.forEach((e => e())),
          n.readyReject = [],
          n.readyResolve = [],
          c('save')
        },
        save(e) {
          let {
            state: t
          }
          = e;
          if (t.loaded) {
            if (
              this.state.context.error ||
              this.state.orgs.error ||
              this.state.user.error ||
              this.state.vpn.error ||
              this.state.visitor.error
            ) return;
            ot.a.set(
              'contextState',
              {
                context: this.state.context,
                orgs: this.state.orgs,
                user: this.state.user,
                vpn: this.state.vpn,
                visitor: this.state.visitor,
                currency: this.state.currency
              }
            )
          }
        },
        async change(e) {
          let {
            commit: t,
            dispatch: n
          }
          = e;
          t('setLoaded', !1),
          t('user/setLoaded', !1, {
            root: !0
          }),
          t('orgs/setLoaded', !1, {
            root: !0
          }),
          this.$httpConfig.auth = !0,
          await n('load', {
            cache: {
              cacheIfSkipNetwork: !0
            },
            contextType: 'mixed'
          }),
          this.$setGtmData()
        },
        async ready(e) {
          let {
            state: t
          }
          = e;
          if (t.loaded) {
            if (t.error) throw t.error
          } else await new Promise(((e, n) => {
            t.readyResolve.push(e),
            t.readyReject.push(n)
          }))
        }
      };
      async function ht(e, t) {
        e.hasModule('context') ||
        (
          e.registerModule(
            'context',
            {
              namespaced: !0,
              state: ct,
              actions: mt,
              mutations: lt,
              getters: ut
            },
            {
              preserveState: !!e.state.context
            }
          ),
          qe(
            e.state.context,
            {
              readyResolve: [],
              readyReject: [],
              promise: null
            }
          )
        ),
        async function (e) {
          e.hasModule('orgs') ||
          (
            e.registerModule(
              'orgs',
              {
                namespaced: !0,
                state: je,
                actions: Ge,
                mutations: Ve
              },
              {
                preserveState: !!e.state.orgs
              }
            ),
            qe(e.state.orgs, {
              promise: null,
              error: null
            })
          )
        }(e),
        async function (e) {
          e.hasModule('user') ||
          (
            e.registerModule(
              'user',
              {
                namespaced: !0,
                state: Je,
                actions: Ze,
                mutations: Xe
              },
              {
                preserveState: !!e.state.user
              }
            ),
            qe(e.state.user, {
              promise: null,
              error: null
            })
          )
        }(e),
        async function (e) {
          e.hasModule('visitor') ||
          e.registerModule(
            'visitor',
            {
              namespaced: !0,
              state: Ye,
              actions: tt,
              mutations: et
            },
            {
              preserveState: !!e.state.visitor
            }
          )
        }(e),
        async function (e) {
          e.hasModule('vpn') ||
          (
            e.registerModule(
              'vpn',
              {
                namespaced: !0,
                state: nt,
                actions: at,
                mutations: it
              },
              {
                preserveState: !!e.state.vpn
              }
            ),
            qe(e.state.vpn, {
              promise: null
            })
          )
        }(e),
        function (e) {
          e.hasModule('organizations') ||
          (
            e.registerModule(
              'organizations',
              {
                namespaced: !0,
                state: Be,
                getters: ze,
                actions: Qe,
                mutations: He
              },
              {
                preserveState: !!e.state.organizations
              }
            ),
            e.subscribe(
              (
                t => {
                  'orgs/setOrg' !== t.type &&
                  'orgs/setInitialState' !== t.type &&
                  'user/setInitialState' !== t.type &&
                  'user/setUser' !== t.type ||
                  e.dispatch('organizations/setFromOrg')
                }
              )
            )
          )
        }(e),
        null == t ||
        t(e)
      }
      const ft = /bot|googlebot|crawler|spider|robot|crawling/i;
      const pt = () => ({
        isBot: null,
        loaded: null
      }),
      gt = {
        setIsBot(e, t) {
          e.isBot = t
        },
        setIsLoaded(e, t) {
          e.loaded = t
        }
      },
      vt = {
        async load(e) {
          let {
            state: t,
            commit: n
          }
          = e;
          return t.loaded ||
          (
            n('setIsBot', (r = window.navigator.userAgent, ft.test(r))),
            n('setIsLoaded', !0)
          ),
          !0;
          var r
        }
      };
      function yt(e, t, n) {
        const {
          store: r,
          error: o,
          route: c
        }
        = e;
        ht(r, n),
        async function (e) {
          e.hasModule('bot') ||
          e.registerModule(
            'bot',
            {
              namespaced: !0,
              state: pt,
              actions: vt,
              mutations: gt
            },
            {
              preserveState: !!e.state.bot
            }
          ),
          await e.dispatch('bot/load')
        }(r),
        r.dispatch('bot/load'),
        r.dispatch('visitor/load'),
        r.dispatch('context/save');
        const {
          companyReference: l
        }
        = c.query;
        l &&
        (
          e.$cookies.set(
            ''.concat(e.config.cookiePrefix, 'current_organization_uid'),
            l,
            {
              path: '/',
              maxAge: 2678400
            }
          ),
          r.dispatch('context/ready').then(
            (
              () => {
                const e = r.state.orgs &&
                r.state.orgs.current.id;
                e &&
                e !== l &&
                o({
                  status: 403
                })
              }
            )
          )
        ),
        t &&
        !e.disableContextSwitchModal &&
        t(e)
      }
      var wt = n(20),
      bt = {
        LS_NAME_FOR_CURRENT_ORG: 'current_organization_uid'
      };
      let kt,
      St = !1;
      function Tt(e) {
        const t = e.store.state.orgs.current.id,
        o = wt.a.get(bt.LS_NAME_FOR_CURRENT_ORG);
        !e.app.$isNativeApp &&
        t &&
        o &&
        t !== o &&
        function (e) {
          let {
            i18n: t
          }
          = e;
          if (St) return;
          St = !0;
          const o = new r.default({
            i18n: t,
            components: {
              contextSwitchModal: () => Promise.all([n.e(0),
              n.e(1),
              n.e(14),
              n.e(162)]).then(n.bind(null, 1190))
            },
            render: e => e('contextSwitchModal')
          }).$mount();
          document.body.appendChild(o.$el)
        }(e),
        setTimeout((() => wt.a.remove(bt.LS_NAME_FOR_CURRENT_ORG)), 0)
      }
      var Et = async e => {
        var t;
        await e.store.dispatch('context/ready');
        const n = null === (t = e.store.state.orgs) ||
        void 0 === t ||
        null === (t = t.current) ||
        void 0 === t ? void 0 : t.id;
        n &&
        (
          wt.a.set(bt.LS_NAME_FOR_CURRENT_ORG, n),
          function (e) {
            kt &&
            kt(),
            kt = wt.a.onUpdate((async t => {
              t === bt.LS_NAME_FOR_CURRENT_ORG &&
              Tt(e)
            })),
            St = !1
          }(e)
        )
      };
      var It = n(48),
      _t = n(6);
      const Ct = {
        rate: 1,
        currency: 'USD'
      },
      Nt = () => ({
        currencyRate: null,
        currencyCode: null,
        currencyPromise: null,
        currencyPopupShow: null,
        currencyName: null,
        currencySymbol: null
      }),
      xt = {
        getCurrencyRate: e => e.currencyRate,
        getCurrencyCode: e => e.currencyCode,
        getCurrencyShowPopup: e => e.currencyPopupShow
      },
      At = {
        setInitialState(e, t) {
          Object.assign(e, t),
          null != t &&
          t.currencyRate &&
          this.commit('currency/setCurrencyRate', t.currencyRate)
        },
        setCurrencyRate(e, t) {
          var n;
          e.currencyRate = t;
          const r = null === (n = this.app) ||
          void 0 === n ||
          null === (n = n.context) ||
          void 0 === n ? void 0 : n.$currencyRate;
          r.currency = t.currency,
          r.rate = t.rate
        },
        setCurrencyCode(e, code) {
          var t;
          e.currencyCode = code;
          const n = Object(It.a) (
            code,
            null === (t = this.app) ||
            void 0 === t ||
            null === (t = t.i18n) ||
            void 0 === t ? void 0 : t.locale
          ),
          {
            name: r,
            symbol: symbol
          }
          = n;
          var o;
          e.currencyName = r,
          e.currencySymbol = symbol,
          null === (o = Object(_t.a) ()) ||
          void 0 === o ||
          o.setState('core.currencyCode', code)
        },
        setCurrencyPromise(e, t) {
          e.currencyPromise = t
        },
        setCurrencyPopupShow(e, t) {
          e.currencyPopupShow = t
        }
      },
      Ot = {
        async load(e) {
          let {
            state: t
          }
          = e;
          return await t.currencyPromise,
          !0
        },
        async setCodeAndLoadRate(e, t) {
          let n,
          {
            commit: r
          }
          = e;
          if (
            t &&
            'object' == typeof t &&
            (n = t.auth, t = t.currencyCode),
            r('setCurrencyCode', t),
            this.app
          ) {
            let e = await async function (e, t) {
              let {
                $httpGql: n,
                $logger: r,
                auth: o
              }
              = e;
              try {
                var c;
                const e = await n({
                  cache: {
                    storage: 'memory',
                    strategy: 'cacheFirst',
                    ttl: 600000
                  },
                  requestAlias: 'currency-converter',
                  handleApiErrors: !1,
                  ssrCacheEnabled: !0,
                  auth: o
                }).post({
                  query: (
                    l = t,
                    '{\n        averageCurrencyRateToUSD(input: {currencyCode3:"'.concat(
                      l,
                      '"}) {\n          countryCode3\n          rate\n          originCurrencyCode\n          destinationCurrencyCode\n          timestamp\n        }\n      }'
                    )
                  )
                }).json(),
                r = null === (c = e.data) ||
                void 0 === c ? void 0 : c.averageCurrencyRateToUSD;
                if (r && r.length > 0) {
                  const {
                    countryCode3: t,
                    rate: n
                  }
                  = e.data.averageCurrencyRateToUSD[0];
                  return {
                    currency: t,
                    rate: n
                  }
                }
                return null
              } catch (e) {
                return r.error(e, {
                  msgPrefix: 'currency-converter'
                }),
                null
              }
              var l
            }({
              $httpGql: this.$httpGql,
              $logger: this.$logger,
              auth: n
            }, t);
            e ||
            (e = Ct),
            r('setCurrencyRate', e)
          }
          return !0
        }
      };
      function Dt(e) {
        if (!e.hasModule('currency')) {
          var t;
          e.registerModule(
            'currency',
            {
              namespaced: !0,
              state: Nt,
              actions: Ot,
              mutations: At,
              getters: xt
            },
            {
              preserveState: !!e.state.currency
            }
          ),
          qe(e.state.currency, {
            currencyPromise: null
          });
          const r = null === (t = e.state.currency) ||
          void 0 === t ? void 0 : t.currencyCode;
          var n;
          if (r) null === (n = Object(_t.a) ()) ||
          void 0 === n ||
          n.setState('core.currencyCode', r)
        }
      }
      var Rt = Dt,
      Pt = function (e) {
        yt(e, Et, Rt)
      };
      function Lt(e) {
        e.hasAuthConfig = !1
      }
      var Ut = n(19);
      Ut.a.metrics = () => {
      };
      var Ft = n(14),
      Mt = n(30);
      function $t(e, t, n, r, o) {
        if (e.store.state.vpn.isVpn && Object.keys(n).length) {
          let n;
          'ff' === t ? (n = {}, Object.keys(r).forEach((e => {
            n[e] = r[e] ? '1' : '0'
          }))) : n = r,
          e.$cookies.set(o, new URLSearchParams(n).toString())
        }
      }
      var qt = n(18);
      function jt(e, t) {
        !function (e, t) {
          Object(Ft.b) (e.store),
          [
            'qt',
            'ff'
          ].forEach(
            (
              n => {
                const r = 'ff' === n ? 'feature_override' : 'qt_override',
                o = Object(Mt.a) (e.$cookies.get(r), n),
                c = o,
                l = Object(Mt.b) (e.route.query, n);
                Object.keys(l).forEach((e => {
                  c[e] = l[e]
                })),
                e.store.state.vpn &&
                e.store.state.vpn.loaded ? $t(e, n, l, c, r) : e.store.subscribe((t => {
                  'vpn/setIsVpn' === t.type &&
                  $t(e, n, l, c, r)
                })),
                t({
                  qt: 'qtCookieOverrides',
                  ff: 'ffCookieOverrides'
                }
                [
                  n
                ], o),
                t({
                  qt: 'qtOverrides',
                  ff: 'ffOverrides'
                }
                [
                  n
                ], c)
              }
            )
          )
        }(e, t),
        t('loadFlags', qt.a)
      }
      var Vt = async(e, t, r) => {
        const {
          app: o,
          store: c,
          query: l
        }
        = e,
        {
          isSsr: d,
          isSubmodule: m,
          dashboardLoader: h,
          dashboardPublicLoader: f
        }
        = r;
        if (
          !0 === function (e) {
            let t = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : {
            };
            const n = 'perf',
            r = 'trace',
            o = 'perf';
            let c = !1;
            return void 0 === t[r] &&
            void 0 === t[o] ? c = !!e.get(n) : (
              c = !!parseInt(t[r], 10) ||
              !!parseInt(t[o], 10),
              !0 === c ? e.set(n, 1) : e.remove(n)
            ),
            !!c
          }(o.$cookies, l)
        ) {
          const r = new Promise(
            (
              async r => {
                const [o] = await Promise.all(
                  [n.e(113).then(n.bind(null, 1259)),
                  c.dispatch('context/ready')]
                );
                o.default(c),
                c.commit('profiling/setIsPublic', !c.state.vpn.isVpn);
                const l = [];
                c.state.vpn.isVpn &&
                l.push([n.e(110).then(n.bind(null, 1159)),
                [
                  e
                ]]),
                c.state.vpn.isVpn ? l.push(
                  [n.e(112).then(n.bind(null, 1160)),
                  [
                    e,
                    {
                      isSsr: d,
                      isSubmodule: m
                    }
                  ]]
                ) : l.push([n.e(115).then(n.bind(null, 1161)),
                [
                  e
                ]]),
                c.state.vpn.isVpn &&
                l.push([n.e(111).then(n.bind(null, 1162)),
                [
                  e,
                  t
                ]]),
                c.state.vpn.isVpn ? h &&
                l.push([h(),
                [
                  e
                ]]) : f &&
                l.push([f(),
                [
                  e
                ]]);
                (await Promise.all(l.map((p => p[0])))).forEach(
                  (function (e, t) {
                    e.default.apply(null, this[t])
                  }),
                  l.map((p => p[1]))
                ),
                r()
              }
            )
          );
          t('profilingPromise', r),
          e.profilingPromise = r
        } else t('profilingPromise', !1),
        e.profilingPromise = !1
      },
      Gt = (e, t) => {
        Vt(
          e,
          t,
          {
            dashboardLoader: () => Promise.all([n.e(144),
            n.e(164)]).then(n.bind(null, 1177)),
            dashboardPublicLoader: () => n.e(116).then(n.bind(null, 1188)),
            isSsr: !0,
            isSubmodule: !1
          }
        )
      };
      var Bt = n(26);
      function zt(e, t) {
        if (void 0 === t && (t = decodeURIComponent), 'string' != typeof e || !e) return null;
        var n = new RegExp(
          '(?:^|; )'.concat(
            e.replace(/[.*+?^$|[\](){}\\-]/g, '\\$&'),
            '(?:=([^;]*))?(?:;|$)'
          )
        ).exec(document.cookie);
        return null === n ? null : 'function' == typeof t ? t(n[1]) : n[1]
      }
      function Ht(e, t) {
        return 'function' == typeof e ? e(t) : !!e
      }
      'function' == typeof SuppressedError &&
      SuppressedError;
      const Qt = (e, t) => ({
        ...e,
        headers: {
          ...e.headers,
          Authorization: 'Bearer '.concat(t)
        }
      }),
      Wt = new Map;
      class Kt extends Error {
        constructor(e) {
          let t = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          super (e);
          const {
            additionalInfo: n,
            redirectedToLogin: r,
            requestUrl: o,
            requestAlias: c,
            reAuthReason: l
          }
          = {
            ...t
          };
          this.name = 'ReAuthError',
          this.message = [
            this.message,
            n,
            'requestUrl: '.concat(o || '', ', requestAlias: ').concat(c || '', ', reAuthReason: ').concat(l || '')
          ].filter(Boolean).join(' '),
          this.redirectedToLogin = r,
          this.redirectedToLogin &&
          (this.level = 'log')
        }
      }
      var Jt = e => {
        const {
          getToken: t,
          onAuthFail: n,
          skipReAuth: r,
          reAuth: o,
          errorMsg: c
        }
        = e;
        return e => async(l, d) => {
          const m = d.$logger ||
          console;
          if (Wt.has(o)) try {
            await Wt.get(o)
          } catch (e) {
            throw new Kt(
              'Request skipped due to recent reAuth failure.',
              {
                additionalInfo: e.message,
                requestUrl: l,
                requestAlias: d.requestAlias
              }
            )
          }
          let h = t(d);
          const f = async f => {
            let v,
            {
              reAuthReason: y
            }
            = f;
            if (r) {
              let e;
              throw n &&
              (e = await n(d)),
              new Kt(
                'Auth failed and reAuth skipped.',
                {
                  ...e,
                  requestUrl: l,
                  requestAlias: d.requestAlias,
                  reAuthReason: y
                }
              )
            }
            h = void 0;
            try {
              if (Wt.has(o)) await Wt.get(o);
               else {
                const e = o(d);
                Wt.set(o, e),
                await e
              }
              h = t(d)
            } catch (e) {
              v = e.message,
              Ht(d.suppressLog, e) ||
              m.error(e)
            }
            if (Wt.delete(o), !h) {
              const e = c ? 'Auth failed and reAuth '.concat(c, '.') : 'Auth failed and reAuth failed to obtain access token.';
              let t;
              throw n &&
              (t = await n(d)),
              new Kt(
                ''.concat(e).concat(v ? ' '.concat(v) : ''),
                {
                  ...t,
                  requestUrl: l,
                  requestAlias: d.requestAlias,
                  reAuthReason: y
                }
              )
            }
            return d.reAuth = !0,
            e(l, Qt(d, h))
          };
          if (!h) return f({
            reAuthReason: 'empty token'
          });
          const v = await e(l, Qt(d, h));
          return (d.unauthStatus || [
            401
          ]).includes(v.status) ? f({
            reAuthReason: 'response status '.concat(v.status)
          }) : v
        }
      };
      var Xt = function () {
        let e = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : {
        };
        const {
          ccstCookieName: t,
          getCookie: n,
          suppressLog: r
        }
        = e,
        o = e.$logger ||
        console,
        c = n(t);
        if (c) return c;
        Ht(r, 'getCcstToken') ||
        o.log(
          'Not able to provide the CCST token from the cookie. cookieName: '.concat(t, ', cookieValue: ').concat(c)
        )
      };
      var Zt = async e => {
        const {
          cookieName: t
        }
        = e,
        n = e.$logger ||
        console;
        let r = '',
        o = e.getCookie(t);
        return !o &&
        e.csrfEndpoint &&
        (
          await e.wretch().url(e.csrfEndpoint).get().res(),
          o = e.getCookie(e.cookieName)
        ),
        o ? r = o : n.error('Unable to get CSRF token from "'.concat(t, '" cookie.')),
        r
      };
      var Yt = function () {
        let e = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : {
        };
        const t = {
          Accept: 'application/json, text/plain, */*',
          'x-odesk-user-agent': 'oDesk LM'
        };
        return e.excludeXRequestedWithHeader ||
        (t['x-requested-with'] = 'XMLHttpRequest'),
        n => async(r, o) => {
          const {
            csrfTokenCookieName: c,
            csrfTokenHeaderName: l
          }
          = e,
          d = c &&
          'GET' !== o.method;
          let m;
          return d &&
          (
            m = await Zt({
              cookieName: c,
              getCookie: e.getCookie ||
              zt,
              csrfEndpoint: e.csrfEndpoint,
              wretch: o.wretch ||
              Bt.a,
              $logger: o.$logger
            })
          ),
          n(
            r,
            {
              ...o,
              headers: {
                ...t,
                ...d ? {
                  [
                    l ||
                    'x-odesk-csrf-token'
                  ]: m
                }
                 : {
                },
                ...o.headers
              }
            }
          )
        }
      };
      var en = e => {
        const {
          ccstCookieName: t,
          onAuthFail: n,
          skipReAuth: r,
          baseUrl: o
        }
        = e;
        if ('string' != typeof t) throw new TypeError('Must provide ccstCookieName string value');
        return Jt({
          getToken: n => Xt({
            getCookie: e.getCookie ||
            zt,
            suppressLog: n.suppressLog,
            $logger: n.$logger,
            ccstCookieName: t
          }),
          reAuth: () => async function () {
            const e = ''.concat(
              arguments.length > 0 &&
              void 0 !== arguments[0] ? arguments[0] : '',
              '/ab/account-security/login'
            );
            if (
              'unauthenticated' === (await Object(Bt.a) ().middlewares([Yt()]).url(e).get().res()).headers.get('x-upwork-authentication')
            ) throw new Error(
              'Attempted to reAuth at '.concat(e, ', but user is not authenticated.')
            )
          }(o),
          errorMsg: 'failed to obtain ccst token',
          onAuthFail: n,
          skipReAuth: r
        })
      };
      class tn {
        constructor() {
          this.tokens = [],
          this.currentIndex = 0,
          this.fragments = {}
        }
        parse(e) {
          try {
            this.tokenize(e);
            const t = [],
            n = 2 * this.tokens.length;
            let r = 0;
            for (; this.currentIndex < this.tokens.length; ) {
              if (r += 1, r > n) throw new Error(
                'Maximum iterations reached. Possible infinite loop detected.'
              );
              const e = this.tokens[this.currentIndex];
              [
                'query',
                'mutation',
                'subscription'
              ].includes(e) ? t.push(this.parseOperation(e)) : 'fragment' === e ? this.parseFragmentDefinition() : '{' === e ? t.push(this.parseOperation('query')) : this.currentIndex += 1
            }
            return {
              operations: t,
              fragments: this.fragments
            }
          } catch (e) {
            return console.warn('Failed to parse GraphQL query:', e),
            {
              operations: [],
              fragments: {
              }
            }
          }
        }
        tokenize(e) {
          const t = e.replace(/#.*(?:\r\n|\r|\n|$)/g, '');
          if (
            this.tokens = t.match(
              /([{}()[\]:$,@!=]|\.\.\.|(?:\d+\.?\d*)|\w+|"(?:\\.|[^"])*")/g
            ) ||
            [],
            this.tokens.length > 10000
          ) throw new Error('Query exceeds maximum allowed tokens.');
          this.currentIndex = 0
        }
        parseOperation() {
          const e = {
            type: arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : 'query',
            name: null,
            variables: [],
            selectionSet: null
          };
          return ['query',
          'mutation',
          'subscription'].includes(this.tokens[this.currentIndex]) &&
          (e.type = this.tokens[this.currentIndex], this.currentIndex += 1),
          this.isName(this.tokens[this.currentIndex]) &&
          (e.name = this.tokens[this.currentIndex], this.currentIndex += 1),
          '(' === this.tokens[this.currentIndex] &&
          (e.variables = this.parseVariableDefinitions()),
          e.selectionSet = '{' === this.tokens[this.currentIndex] ? this.parseSelectionSet() : [],
          e
        }
        parseFragment() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          if (e > 100) throw new Error(
            'Maximum fragment spread depth exceeded. Possible infinite loop detected.'
          );
          if (this.currentIndex += 1, 'on' === this.tokens[this.currentIndex]) {
            this.currentIndex += 1;
            const t = this.tokens[this.currentIndex];
            return this.currentIndex += 1,
            {
              kind: 'InlineFragment',
              typeCondition: t,
              selectionSet: this.parseSelectionSet(e + 1)
            }
          }
          const t = this.tokens[this.currentIndex];
          return this.currentIndex += 1,
          {
            kind: 'FragmentSpread',
            name: t
          }
        }
        parseFragmentDefinition() {
          this.currentIndex += 1;
          const e = this.tokens[this.currentIndex];
          if (this.currentIndex += 1, 'on' !== this.tokens[this.currentIndex]) throw new Error('Expected "on" in fragment definition');
          this.currentIndex += 1;
          const t = this.tokens[this.currentIndex];
          this.currentIndex += 1;
          const n = this.parseSelectionSet();
          this.fragments[e] = {
            kind: 'FragmentDefinition',
            name: e,
            typeCondition: t,
            selectionSet: n
          }
        }
        parseVariableDefinitions() {
          const e = [];
          this.currentIndex += 1;
          const t = this.currentIndex,
          n = this.tokens.length - t;
          for (; this.currentIndex < this.tokens.length; ) {
            if (')' === this.tokens[this.currentIndex]) {
              this.currentIndex += 1;
              break
            }
            const t = this.parseVariableDefinition();
            if (
              t ? e.push(t) : this.currentIndex += 1,
              ',' === this.tokens[this.currentIndex] &&
              (this.currentIndex += 1),
              e.length > n
            ) throw new Error(
              'Maximum number of variables exceeded. Possible infinite loop detected.'
            )
          }
          return e
        }
        parseVariableDefinition() {
          const e = {
            name: null,
            type: null,
            defaultValue: null
          };
          if ('$' !== this.tokens[this.currentIndex]) return null;
          if (
            this.currentIndex += 1,
            !this.isName(this.tokens[this.currentIndex])
          ) throw new Error('Invalid variable name');
          if (
            e.name = this.tokens[this.currentIndex],
            this.currentIndex += 1,
            ':' !== this.tokens[this.currentIndex]
          ) throw new Error('Expected colon after variable name');
          return this.currentIndex += 1,
          e.type = this.parseType(),
          this.currentIndex < this.tokens.length &&
          '=' === this.tokens[this.currentIndex] &&
          (this.currentIndex += 1, e.defaultValue = this.parseValue()),
          e
        }
        parseType() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          if (e > 100) throw new Error('Maximum type nesting depth exceeded.');
          let t = this.tokens[this.currentIndex];
          if (this.currentIndex += 1, '[' === t) {
            if (t += this.parseType(e + 1), ']' !== this.tokens[this.currentIndex]) throw new Error('Expected closing bracket for list type');
            t += ']',
            this.currentIndex += 1
          }
          return this.currentIndex < this.tokens.length &&
          '!' === this.tokens[this.currentIndex] &&
          (t += '!', this.currentIndex += 1),
          t
        }
        parseValue() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          if (e > 100) throw new Error('Maximum value nesting depth exceeded.');
          const t = this.tokens[this.currentIndex];
          if (this.currentIndex += 1, '[' === t) return this.parseArrayValue(e + 1);
          if ('{' === t) return this.parseObjectValue(e + 1);
          if ('$' === t) {
            const e = this.tokens[this.currentIndex];
            return this.currentIndex += 1,
            '$'.concat(e)
          }
          return t.startsWith('"') &&
          t.endsWith('"') ? t.slice(1, - 1) : 'true' === t ||
          'false' !== t &&
          ('null' === t ? null : Number.isNaN(Number(t)) ? t : Number(t))
        }
        parseArrayValue() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = this.currentIndex,
          n = this.tokens.length - t,
          r = [];
          for (; ']' !== this.tokens[this.currentIndex]; ) if (
            r.push(this.parseValue(e)),
            ',' === this.tokens[this.currentIndex] &&
            (this.currentIndex += 1),
            r.length > n
          ) throw new Error(
            'Maximum number of array elements exceeded. Possible infinite loop detected.'
          );
          return this.currentIndex += 1,
          r
        }
        parseObjectValue() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = {},
          n = this.currentIndex,
          r = this.tokens.length - n;
          let o = 0;
          for (; '}' !== this.tokens[this.currentIndex]; ) {
            const n = this.tokens[this.currentIndex];
            if (this.currentIndex += 1, ':' !== this.tokens[this.currentIndex]) throw new Error('Expected colon in object value');
            if (
              this.currentIndex += 1,
              t[n] = this.parseValue(e),
              ',' === this.tokens[this.currentIndex] &&
              (this.currentIndex += 1),
              o += 1,
              o > r
            ) throw new Error(
              'Maximum number of object properties exceeded. Possible infinite loop detected.'
            )
          }
          return this.currentIndex += 1,
          t
        }
        parseSelectionSet() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          if (e > 100) throw new Error('Maximum selection set nesting depth exceeded.');
          const t = [];
          this.currentIndex += 1;
          const n = this.currentIndex,
          r = this.tokens.length - n;
          for (; this.currentIndex < this.tokens.length; ) {
            if ('}' === this.tokens[this.currentIndex]) {
              this.currentIndex += 1;
              break
            }
            if (',' !== this.tokens[this.currentIndex]) {
              const n = this.parseField(e + 1);
              t.push(n)
            } else this.currentIndex += 1;
            if (t.length > r) throw new Error(
              'Maximum number of fields exceeded. Possible infinite loop detected.'
            )
          }
          return t
        }
        parseField() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = {
            name: null,
            alias: null,
            arguments: null,
            directives: [],
            selectionSet: null
          };
          if ('...' === this.tokens[this.currentIndex]) return this.parseFragment(e);
          if (!this.isName(this.tokens[this.currentIndex])) throw new Error(
            'Expected field name, got '.concat(this.tokens[this.currentIndex])
          );
          return t.name = this.tokens[this.currentIndex],
          this.currentIndex += 1,
          ':' === this.tokens[this.currentIndex] &&
          (
            this.currentIndex += 1,
            t.alias = t.name,
            t.name = this.tokens[this.currentIndex],
            this.currentIndex += 1
          ),
          '(' === this.tokens[this.currentIndex] &&
          (t.arguments = this.parseArguments()),
          t.directives = this.parseDirectives(),
          '{' === this.tokens[this.currentIndex] &&
          (t.selectionSet = this.parseSelectionSet()),
          t
        }
        parseArguments() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = [];
          this.currentIndex += 1;
          const n = this.currentIndex,
          r = this.tokens.length - n;
          for (
            ;
            this.currentIndex < this.tokens.length &&
            ')' !== this.tokens[this.currentIndex];
          ) if (
            t.push(this.parseArgument(e + 1)),
            ',' === this.tokens[this.currentIndex] &&
            (this.currentIndex += 1),
            t.length > r
          ) throw new Error(
            'Maximum number of arguments exceeded. Possible infinite loop detected.'
          );
          return ')' === this.tokens[this.currentIndex] &&
          (this.currentIndex += 1),
          t
        }
        parseArgument() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = {
            name: null,
            value: null
          };
          if (!this.isName(this.tokens[this.currentIndex])) throw new Error('Expected argument name');
          if (
            t.name = this.tokens[this.currentIndex],
            this.currentIndex += 1,
            ':' !== this.tokens[this.currentIndex]
          ) throw new Error('Expected colon after argument name');
          return this.currentIndex += 1,
          '$' === this.tokens[this.currentIndex] ? (
            t.value = '$'.concat(this.tokens[this.currentIndex + 1]),
            this.currentIndex += 2
          ) : t.value = this.parseValue(e + 1),
          t
        }
        parseDirectives() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = [],
          n = this.tokens.length - this.currentIndex;
          for (
            ;
            this.currentIndex < this.tokens.length &&
            '@' === this.tokens[this.currentIndex];
          ) {
            const r = this.parseDirective(e + 1);
            if (t.push(r), t.length > n) throw new Error(
              'Maximum number of directives exceeded. Possible infinite loop detected.'
            )
          }
          return t
        }
        parseDirective() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 0;
          const t = {
            name: null,
            arguments: []
          };
          if (
            this.currentIndex += 1,
            !this.isName(this.tokens[this.currentIndex])
          ) throw new Error('Expected directive name');
          return t.name = this.tokens[this.currentIndex],
          this.currentIndex += 1,
          '(' === this.tokens[this.currentIndex] &&
          (t.arguments = this.parseArguments(e + 1)),
          t
        }
        isName(e) {
          return /^[_A-Za-z][_0-9A-Za-z]*$/.test(e)
        }
      }
      const nn = 'X-Upwork-API-TenantId',
      rn = nn.toLowerCase();
      var an = e => {
        let {
          orgUid: t,
          warnOnErrors: n,
          processGqlErrors: r,
          shouldAddUrlAlias: o,
          hideRequestBody: c = !0
        }
        = e;
        return e => (l, d) => {
          const m = d.$logger ||
          console;
          if ('POST' === d.method && d && d.body && !d.requestAlias) {
            var h;
            const e = c ? '*** hidden ***' : d.body;
            try {
              const {
                query: e
              }
              = JSON.parse(d.body);
              d.requestAlias = function (e) {
                const t = new tn,
                {
                  operations: n
                }
                = t.parse(e),
                r = n.map(
                  (
                    e => {
                      if (!e.type || !e.selectionSet || 0 === e.selectionSet.length) return '';
                      const t = e.selectionSet.map((s => s.name)).filter(((e, t, n) => n.indexOf(e) === t));
                      return ''.concat(e.type, '-').concat(t.join('-'))
                    }
                  )
                ).filter(Boolean).map((e => e.replace(/[^a-zA-Z0-9-]/g, ''))).filter(Boolean);
                return r.length ? [
                  'gql',
                  ...r
                ].join('-').toLowerCase() : 'gql-alias-default'
              }(e).substring(0, 63)
            } catch (t) {
              m.warn({
                ...t,
                message: 'Error in generating a GraphQL request alias: '.concat(t.message, ', request body: ').concat(e)
              }, {
                hideRequestBody: c
              }),
              d.requestAlias = 'gql-alias-default'
            }(
              'gql-alias-default' === d.requestAlias ||
              (null === (h = d.requestAlias) || void 0 === h ? void 0 : h.length) >= 63
            ) &&
            m.warn({
              message: 'Error in generating a GraphQL request alias: '.concat(d.requestAlias, ', request body: ').concat(e)
            }, {
              hideRequestBody: c
            })
          }
          t &&
          d &&
          !function () {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : {
            };
            return Object.keys(e).some((e => e.toLowerCase().trim() === rn))
          }(d.headers) &&
          (d.headers[nn] = t);
          const f = o &&
          d.requestAlias &&
          'gql-alias-default' !== d.requestAlias ? d.requestAlias : '';
          return e(
            ''.concat(l, '/api/graphql/v1').concat(f ? '?alias='.concat(f) : ''),
            d
          ).then(
            (
              e => {
                const t = c ? '*** hidden ***' : d.body;
                return e.ok &&
                e.clone().text().then(
                  (
                    text => {
                      if (text) {
                        let o,
                        l,
                        d = {};
                        try {
                          if (l = JSON.parse(text), l.errors) {
                            const e = r ? r(l.errors) : l.errors;
                            null != e &&
                            e.length &&
                            (
                              d = {
                                requestBody: t,
                                errors: [
                                  ...e
                                ],
                                handler: 'gqlResponse'
                              },
                              o = 'graphql errors: '.concat(JSON.stringify(e), ', request body: ').concat(t)
                            )
                          }
                        } catch (e) {
                          o = e.message,
                          d.handler = 'gqlCatch',
                          d.message = o
                        }
                        if (o) {
                          const t = e.headers.get('vnd-eo-trace-id');
                          o = ''.concat(o, ', traceId: ').concat(t),
                          d.traceId = t;
                          const r = 'function' == typeof n ? n(l) : !!n;
                          d.hideRequestBody = c,
                          r ? m.warn(o, d) : m.error(o, d)
                        }
                      }
                    }
                  )
                ),
                e
              }
            )
          )
        }
      };
      var on = e => {
        const t = e => 'string' == typeof e ? e.split('?') [0] : '',
        n = async(n, r) => {
          const o = r.hideRequestBody ? '*** hidden ***' : null == r ? void 0 : r.body,
          c = r.$logger ||
          console,
          l = (d = n).headers.get('vnd-eo-trace-id') ||
          d.headers.get('vnd.eo.trace-id');
          var d;
          const m = [];
          null != r &&
          r.body &&
          m.push('body: '.concat(o)),
          null != n &&
          n.status &&
          m.push('status: '.concat(n.status)),
          l &&
          m.push('parentTraceId: '.concat(l)),
          null != r &&
          r.requestAlias &&
          m.push('requestAlias: '.concat(r.requestAlias));
          const h = m.join(', ');
          if (!n.ok && !Ht(r.suppressLog, n.status)) {
            if (!(r.unauthStatus || [
              401
            ]).includes(n.status) || r.reAuth) {
              c[403 === n.status ? 'warn' : 'error']({
                message: 'failed to fetch url: '.concat(n.url, ', ').concat(h),
                shortMessage: 'failed to fetch url: '.concat(t(n.url)),
                responseStatus: n.status,
                handler: 'httpErrors',
                tags: {
                  httpStatus: n.status,
                  parentTraceId: l,
                  requestAlias: null == r ? void 0 : r.requestAlias
                },
                isSentryHandled: !1
              })
            }
          }
          const f = r.unauthStatus ||
          [
            401
          ],
          v = 'function' == typeof e ? await e(n) : e;
          return 'undefined' != typeof window &&
          n.status >= 400 &&
          !f.includes(n.status) &&
          v &&
          (
            (e, t, n) => {
              const {
                url: r,
                status: o,
                statusText: c
              }
              = n;
              'undefined' != typeof window &&
              window.dispatchEvent(
                new CustomEvent(
                  'UpApiError',
                  {
                    detail: {
                      traceId: e,
                      errorActionMsg: t,
                      url: r,
                      statusText: c,
                      status: o
                    }
                  }
                )
              )
            }
          ) (l, 'object' == typeof v ? v.errorActionMsg : null, n),
          n
        };
        return e => (r, o) => {
          const c = o.$logger ||
          console;
          let l;
          return void 0 === o.hideRequestBody &&
          (o.hideRequestBody = !0),
          e(r, o).then((e => (l = e, n(e, o)))).catch(
            (
              e => {
                if (!Ht(o.suppressLog, e)) {
                  var n,
                  d;
                  const m = null == e ? void 0 : e.message,
                  h = [];
                  0;
                  const f = o.hideRequestBody ? '*** hidden ***' : null == o ? void 0 : o.body;
                  null != o &&
                  o.body &&
                  h.push('body: '.concat(f)),
                  null !== (n = l) &&
                  void 0 !== n &&
                  n.status &&
                  h.push('status: '.concat(l.status)),
                  null != o &&
                  o.requestAlias &&
                  h.push('requestAlias: '.concat(o.requestAlias)),
                  m &&
                  h.push('exceptionMessage: '.concat(m));
                  const v = h.join(', '),
                  y = (
                    (e, t) => 'AbortError' === (null == e ? void 0 : e.name) ||
                    t ? 'log' : 'error'
                  ) (e, undefined);
                  c[y]({
                    ...'string' == typeof e ? {
                    }
                     : e,
                    message: 'failed to fetch url: '.concat(r, ', ').concat(v),
                    shortMessage: 'failed to fetch url: '.concat(t(r), ', ').concat(v),
                    handler: 'httpErrors',
                    tags: {
                      httpStatus: null === (d = l) ||
                      void 0 === d ? void 0 : d.status,
                      requestAlias: o.requestAlias
                    },
                    isSentryHandled: !1
                  })
                }
                throw e
              }
            )
          )
        }
      },
      sn = n(68),
      cn = n.n(sn);
      function ln(e, t) {
        if (!Object.prototype.hasOwnProperty.call(e, t)) throw new TypeError('attempted to use private field on non-instance');
        return e
      }
      var un = 0;
      function dn(e) {
        return '__private_' + un++ + '_' + e
      }
      var mn = dn('remove'),
      hn = dn('shrinkStore');
      class fn {
        constructor(e) {
          Object.defineProperty(this, hn, {
            value: gn
          }),
          Object.defineProperty(this, mn, {
            value: pn
          }),
          this.maxCapacity = void 0,
          this.capacity = void 0,
          this.store = void 0,
          this.maxCapacity = e,
          this.capacity = 0,
          this.store = {}
        }
        set(e, t, n) {
          this.store[e] = {
            value: t,
            expireTime: new Date(Date.now() + n).getTime()
          },
          this.capacity += 1,
          this.maxCapacity > 0 &&
          this.capacity > this.maxCapacity &&
          ln(this, hn) [hn]()
        }
        get(e) {
          const data = this.store[e];
          return data ? data.expireTime < Date.now() ? (ln(this, mn) [mn](e), null) : data.value : null
        }
      }
      function pn(e) {
        this.store[e] &&
        (this.capacity -= 1, delete this.store[e])
      }
      function gn() {
        const e = Object.entries(this.store).map((e => {
          let[t,
          {
            expireTime: n
          }
          ] = e;
          return [t,
          n]
        })).sort(((e, t) => {
          let[,
          n] = e,
          [
            ,
            r
          ] = t;
          return n - r
        }));
        for (let i = 0; i < e.length; i += 1) {
          const [t] = e[i];
          if (ln(this, mn) [mn](t), this.maxCapacity >= this.capacity) break
        }
      }
      const vn = e => t => async(n, r) => {
        const o = e.cacheInfo ||
        vn.cacheInfo;
        o.networkSkipped ||
        (o.networkSkipped = {}),
        o.memoryCache ||
        (
          o.memoryCache = function () {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : {
            };
            const {
              maxCapacity: t
            }
            = e;
            return new fn(t)
          }({
            maxCapacity: e.maxCapacityMemoryCache ||
            0
          })
        );
        const {
          networkSkipped: c,
          memoryCache: l
        }
        = o,
        d = ''.concat(e.cacheKey(n, r), '-v2'),
        {
          storage: m,
          onSuccess: h,
          onError: f,
          strategy: v,
          cacheIfSkipNetwork: y,
          ttl: w,
          invalidateCache: k,
          ls: S,
          memcachedCache: T,
          processGqlErrors: E
        }
        = {
          ...e,
          ...r
        },
        I = [
          m ||
          'localStorage'
        ];
        y &&
        !I.includes('localStorage') &&
        I.push('localStorage');
        let _ = !1,
        C = !1;
        ('cacheFirst' === v || !v && 'memcached' === m) &&
        (_ = !0, C = !1),
        'cacheAndNetwork' === v &&
        (_ = !0, C = !0),
        e.skipNetwork &&
        !c[d] ? (_ = !0, C = !1, c[d] = !0) : y &&
        (C = !0),
        k &&
        (_ = !1, C = !0);
        const N = _ ? await(
          async e => {
            let t = null;
            if (I.includes('memcached')) try {
              t = await T.get(e)
            } catch (e) {
            }
            return I.includes('memory') &&
            (t = l.get(e)),
            I.includes('localStorage') &&
            null === t &&
            (t = S ? S.get(e) : cn.a.get(e)),
            t
          }
        ) (d) : null;
        C = C ||
        !N;
        let x = null;
        if (
          C &&
          (
            x = t(n, r).then(
              (
                async t => {
                  let n = t.ok;
                  if (n && e.isGraphql) {
                    const e = (await t.clone().json()).errors,
                    r = e &&
                    E ? E(e) : e;
                    n = !(null != r && r.length)
                  }
                  if (n) {
                    const body = await t.clone().json();
                    (
                      (e, t) => {
                        const n = w ||
                        3600000;
                        if (I.includes('memcached')) try {
                          T.set(e, t, w ? w / 1000 : null)
                        } catch (e) {
                        } else I.includes('memory') ? l.set(e, t, n) : S ? S.set(e, t, n) : cn.a.set(e, t, n / 60000)
                      }
                    ) (d, {
                      url: t.url,
                      body: body
                    }),
                    h &&
                    h(body, !1)
                  } else f &&
                  f(t, !!N);
                  return t
                }
              )
            ).catch((e => {
              throw f &&
              f(e, !!N),
              e
            }))
          ),
          N
        ) {
          h &&
          h(N.body, !0);
          const e = new (r.Response || Response) (JSON.stringify(N.body));
          return e.locals ||
          (e.locals = {}),
          e.locals.cached = {
            storages: I,
            url: N.url
          },
          Promise.resolve(e)
        }
        return x
      };
      vn.cacheInfo = {};
      var yn = vn,
      wn = function (e, t) {
        return t.skipDedupe ||
        'GET' !== t.method
      },
      bn = function (e, t) {
        return t.method + '@' + e
      },
      kn = function (e) {
        return e.clone()
      },
      Sn = function (e, t) {
        return e * t
      },
      Tn = function (e) {
        return e &&
        e.ok
      },
      En = function (e) {
        return e.clone()
      },
      In = function (e) {
        var t = void 0 === e ? {
        }
         : e,
        n = t.delayTimer,
        r = void 0 === n ? 500 : n,
        o = t.delayRamp,
        c = void 0 === o ? Sn : o,
        l = t.maxAttempts,
        d = void 0 === l ? 10 : l,
        m = t.until,
        h = void 0 === m ? Tn : m,
        f = t.onRetry,
        v = void 0 === f ? null : f,
        y = t.retryOnNetworkError,
        w = void 0 !== y &&
        y,
        k = t.resolver,
        S = void 0 === k ? En : k;
        return function (e) {
          return function (t, n) {
            var o = 0,
            l = function (m, f) {
              return Promise.resolve(h(m && m.clone(), f)).then(
                (
                  function (h) {
                    return h ? f ? Promise.reject(f) : m : (
                      o++,
                      !d ||
                      o <= d ? new Promise(
                        (
                          function (l) {
                            var d = c(r, o);
                            setTimeout(
                              (
                                function () {
                                  'function' == typeof v ? Promise.resolve(v({
                                    response: m &&
                                    S(m),
                                    error: f,
                                    url: t,
                                    options: n
                                  })).then((function (r) {
                                    void 0 === r &&
                                    (r = {}),
                                    l(e(r.url || t, r.options || n))
                                  })) : l(e(t, n))
                                }
                              ),
                              d
                            )
                          }
                        )
                      ).then(l).catch((function (e) {
                        if (!w) throw e;
                        return l(null, e)
                      })) : Promise.reject(f || new Error('Number of attempts exceeded.'))
                    )
                  }
                )
              )
            };
            return e(t, n).then(l).catch((function (e) {
              if (!w) throw e;
              return l(null, e)
            }))
          }
        }
      },
      _n = n(132),
      Cn = n(36);
      n(179);
      var Nn = () => e => (t, n) => {
        const r = _e(n.req),
        {
          traceId: o,
          id: c,
          parentId: l
        }
        = r.generateClientSpan();
        return n.headers = {
          ...n.headers,
          'vnd-eo-trace-id': o,
          'vnd-eo-span-id': c,
          'vnd-eo-parent-span-id': l
        },
        e(t, n)
      };
      const xn = {
        value: null,
        expiresIn: null
      };
      var An = e => t => (r, o) => (
        /(^|;)\s*perf=1($|;)/.test(o.headers.cookie) ||
        (
          o.headers.cookie ? o.headers.cookie += '; perf=1' : o.headers.cookie = 'perf=1',
          e.store.state.profiling &&
          !e.store.state.profiling.isPublic &&
          (o.headers['vnd-eo-gql-trace'] = !0)
        ),
        t(r, o).then(
          (
            t => {
              const c = t.clone();
              return e.profilingPromise.then(
                (
                  async() => {
                    var l;
                    if (e.store.state.profiling.isPublic) return;
                    const d = (await n.e(120).then(n.bind(null, 1163))).default,
                    m = await d(r, o, c);
                    if (null !== (l = t.locals) && void 0 !== l && l.cached) m.profile_type = 'request-cached',
                    m.cache_storage = t.locals.cached.storages,
                    m.response_uri = t.locals.cached.url,
                    e.store.commit('profiling/addProfile', m);
                     else if (t.headers.has('vnd-eo-profiling')) {
                      const r = (await n.e(48).then(n.bind(null, 1164))).default;
                      e.store.commit(
                        'profiling/addProfile',
                        {
                          ...m,
                          ...r(t.headers.get('vnd-eo-profiling'))
                        }
                      )
                    } else if (
                      t.headers.has('vnd-eo-server-sr') &&
                      t.headers.has('vnd-eo-server-ss')
                    ) {
                      const r = (await n.e(83).then(n.bind(null, 1165))).default;
                      e.store.commit(
                        'profiling/addProfile',
                        {
                          ...m,
                          ...r(
                            t.headers.get('vnd-eo-server-sr'),
                            t.headers.get('vnd-eo-server-ss')
                          )
                        }
                      )
                    } else e.store.commit('profiling/addProfile', m)
                  }
                )
              ).catch((e => {
                console.log(e)
              })),
              t
            }
          )
        )
      );
      function On(e) {
        return window.location.href.replace(window.location.origin, '')
      }
      const Dn = {},
      Rn = (e, t, n, r, o, c) => {
        const {
          cookiePrefix: l
        }
        = n.config,
        d = Object(Cn.a) (n.req);
        let m = !1;
        const h = () => {
          const {
            redirToLogin: e,
            disableRedirectToLogin: t
          }
          = n.$httpConfig;
          n.store.commit('context/setIsLoggedIn', !1);
          const r = !e &&
          !1;
          if (t || !e && !r) return {
            additionalInfo: 'Did not redirect user to login page.',
            redirectedToLogin: !1
          };
          if (m) return {
            additionalInfo: 'Already redirected user to login page.',
            redirectedToLogin: !0
          };
          m = !0,
          n.app.$cookies.remove(''.concat(l, 'master_access_token')),
          n.app.$cookies.remove(''.concat(l, 'oauth2_global_js_token'));
          const c = On(),
          d = '/ab/account-security/login?redir='.concat(encodeURIComponent(c)).concat(r ? '&unauthenticated-action=redirect' : '');
          return o(n, d, {
            i18nPrefix: !1
          }),
          {
            additionalInfo: 'Redirected user to login page.',
            redirectedToLogin: !0
          }
        },
        f = en({
          ccstCookieName: ''.concat(l, 'oauth2_global_js_token'),
          onAuthFail: h,
          getCookie: n.app.$cookies.get,
          skipReAuth: !1,
          baseUrl: d
        }),
        v = () => (
          n.req,
          n.res,
          n.config,
          n.ssrContext,
          Object(Bt.a) ().polyfills({
          }).headers({
          })
        ).options({
          wretch: () => v().middlewares(
            [null,
            Nn(),
            null,
            n.profilingPromise ? An(n) : null].filter(Boolean)
          ),
          timing: {
          },
          req: n.req,
          res: n.res,
          baseUrl: d,
          cookies: n.app.$cookies,
          cookiePrefix: l,
          Response: 'undefined' == typeof Response ? e &&
          e.Response : Response,
          $logger: n.$logger,
          $sentry: n.$sentry
        }),
        y = n.config.visitorGqlTokenCookie ||
        ''.concat(n.config.serviceName, '_vt'),
        w = async function () {
          if (
            !(!(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]) ||
            !xn.value
          ) try {
            const e = n.config.visitorGqlTokenUrl ||
            ''.concat(n.app.router.options.base, 'visitor-gql-token');
            let t,
            r;
            const o = await v().middlewares(
              [null,
              Nn(),
              null,
              n.profilingPromise ? An(n) : null].filter(Boolean)
            );
            if (n.config.visitorClientSecret) {
              const body = {
                client_id: n.config.visitorClientId,
                client_secret: n.config.visitorClientSecret,
                grant_type: 'client_credentials'
              },
              e = await o.url('/api/v3/oauth2/token').body(new URLSearchParams(body)).options({
                requestAlias: 'visitor-gql-token'
              }).headers({
                'Content-type': 'application/x-www-form-urlencoded'
              }).post().json();
              ({
                access_token: t,
                expires_in: r
              }
              = e)
            } else ({
              accessToken: t,
              expiresIn: r
            }
            = await o.url(e).post().json());
            n.app.$cookies.set(''.concat(l).concat(y), t, {
              maxAge: r ||
              0
            }),
            xn.value = t,
            xn.expiresIn = r
          } catch (e) {
            n.$logger.error(e, {
              msgPrefix: 'load visitor graphql token'
            })
          }
        };
        xn.value &&
        n.app.$cookies.set(''.concat(l).concat(y), xn.value, {
          maxAge: xn.expiresIn ||
          0
        });
        const k = Jt({
          getToken: () => xn.value ||
          n.app.$cookies.get(''.concat(l).concat(y)),
          reAuth: async() => {
            await w(!1)
          }
        });
        let S;
        const T = (e, t) => ''.concat(S ? 'org-'.concat(S) : '').concat(e, '@').concat(t.method, '@').concat(t.body || ''),
        E = (e, t) => ''.concat(e, '@').concat(t.method, '@').concat(t.body || ''),
        I = (
          N = (C = void 0 === (_ = {
            skip: () => !1,
            key: T
          }) ? {
          }
           : _).skip,
          x = void 0 === N ? wn : N,
          A = C.key,
          O = void 0 === A ? bn : A,
          D = C.resolver,
          R = void 0 === D ? kn : D,
          P = new Map,
          function (e) {
            return function (t, n) {
              if (x(t, n)) return e(t, n);
              var r = O(t, n);
              if (P.has(r)) return new Promise((function (e, t) {
                P.get(r).push([e,
                t])
              }));
              P.set(r, []);
              try {
                return e(t, n).then(
                  (
                    function (e) {
                      return P.get(r).forEach((function (t) {
                        return (0, t[0]) (R(e))
                      })),
                      P.delete(r),
                      e
                    }
                  )
                ).catch(
                  (
                    function (e) {
                      throw P.get(r).forEach((function (t) {
                        return t[0],
                        (0, t[1]) (e)
                      })),
                      P.delete(r),
                      e
                    }
                  )
                )
              } catch (e) {
                return P.delete(r),
                Promise.reject(e)
              }
            }
          }
        );
        var _,
        C,
        N,
        x,
        A,
        O,
        D,
        R,
        P;
        const L = {
          auth: void 0,
          redirToLogin: !0,
          handleApiErrors: !0,
          dedupe: !0,
          cache: !1,
          ssrCacheEnabled: !1,
          csrf: !0,
          warnOnUnfinishedApiRequest: !0,
          middlewares: [],
          hideRequestBodyInLogs: void 0 !== n.config.hideRequestBodyInLogs ? n.config.hideRequestBodyInLogs : 'prod' === n.config.env,
          shouldAddUrlAlias: !1 !== n.config.shouldAddUrlAlias
        };
        let U;
        U = ot.a.get('skipNetwork'),
        ot.a.remove('skipNetwork'),
        r('skipNetwork', U);
        const F = {},
        M = e => t => {
          var r,
          o,
          c;
          t &&
          void 0 !== t.handleApiErrors ||
          console.warn('should set handleApiErrors option');
          const {
            auth: m,
            handleApiErrors: y,
            dedupe: w,
            cache: _,
            ssrCacheEnabled: C,
            onSuccess: N,
            onError: x,
            useSubordinateOauth: A,
            useVisitorOauth: O,
            excludeXRequestedWithHeader: D,
            authMiddleware: R,
            csrf: P,
            redirToLogin: M,
            requestAlias: $,
            middlewares: j,
            warnOnGQLErrors: V,
            warnOnUnfinishedApiRequest: G,
            processGqlErrors: B,
            hideRequestBodyInLogs: z,
            shouldAddUrlAlias: H
          }
          = {
            ...L,
            ...(
              null === (r = n.$httpDefaultOptions) ||
              void 0 === r ? void 0 : r.call(n, {
                oauth: Jt
              })
            ) ||
            {
            },
            ...t
          };
          N &&
          (_.onSuccess = N),
          x &&
          (_.onError = x);
          const Q = void 0 === A ? n.config.useSubordinateOauth : A;
          let W;
          W = void 0 === m ? void 0 === n.$httpConfig.auth ||
          n.$httpConfig.auth : m;
          const K = ''.concat(n.config.cookiePrefix, 'current_organization_uid');
          S = n.app.$cookies.get(K);
          const J = n.app.$cookies.get('feature_override'),
          X = C &&
          !1,
          Z = n.app.$statsig &&
          n.app.$statsig.getCustomOverrides();
          return v().url(d).options({
            unauthStatus: e ? [
              401,
              403
            ] : [
              401
            ],
            redirToLogin: M,
            requestAlias: $,
            warnOnUnfinishedApiRequest: G,
            isGraphql: e,
            hideRequestBody: z,
            processGqlErrors: B
          }).headers({
            'X-Upwork-Accept-Language': (
              null === (o = n.app.i18n) ||
              void 0 === o ||
              null === (o = o.localeProperties) ||
              void 0 === o ? void 0 : o.iso
            ) ||
            'en-US',
            ...e &&
            J &&
            {
              'vnd-eo-feature-override': J
            },
            ...e &&
            {
              'vnd-eo-visitorId': n.app.$cookies.get('visitor_id')
            },
            ...Z &&
            {
              'vnd-eo-experiment-override': Z
            },
            ...e &&
            {
              'Accept-Encoding': 'gzip'
            }
          }).middlewares(
            [n.profilingPromise ? An(n) : null,
            _ &&
            'memcached' !== _.storage ? yn({
              cacheInfo: X ? Dn : F,
              cacheKey: X ||
              'memcached' === _.storage ? E : T,
              ls: ot.a,
              memcachedCache: n.$cache,
              skipNetwork: U,
              isGraphql: e,
              ...!0 === _ ? {
                storage: 'memory',
                strategy: 'cacheFirst'
              }
               : _,
              invalidateCache: _.invalidateCache ||
              (null === (c = n.$cache) || void 0 === c ? void 0 : c.shouldResetCache()),
              ...X ? {
                maxCapacityMemoryCache: n.config.ssrMaxCapacityMemoryCache ||
                1000
              }
               : {
              }
            }) : null,
            w ? I : null,
            null,
            Nn(),
            R,
            !W ||
            R ||
            Q ? null : f,
            W ||
            !e &&
            !O ? null : k,
            e ? null : Yt({
              csrfTokenCookieName: P ? ''.concat(l, 'XSRF-TOKEN') : null,
              getCookie: n.app.$cookies.get,
              csrfEndpoint: ''.concat(n.config.apiPath, 'visitor/csrf-token'),
              excludeXRequestedWithHeader: D
            }),
            e ? an({
              env: n.config.graphqlEnv ||
              n.config.env,
              orgUid: S &&
              W ? S : void 0,
              useRelativeUrl: !0,
              warnOnErrors: V,
              processGqlErrors: B,
              hideRequestBody: z,
              shouldAddUrlAlias: H
            }) : null,
            null,
            e ? In({
              delayTimer: 0,
              maxAttempts: 1,
              until: async e => {
                if (403 === (null == e ? void 0 : e.status)) {
                  let t;
                  try {
                    t = await e.json()
                  } catch (e) {
                  }
                  if (
                    t &&
                    'string' == typeof t.message &&
                    t.message.includes('tenant id could not be found')
                  ) return !1
                }
                return !0
              },
              onRetry: e => {
                let {
                  url: t,
                  options: n
                }
                = e;
                return delete n.headers[nn],
                {
                  url: t,
                  options: n
                }
              },
              retryOnNetworkError: !1
            }) : null,
            on(y),
            ...j,
            W &&
            Q ? (
              () => {
                if (!n.config.subordinateClientId) throw new Error('subordinateClientId missing');
                return Object(_n.a) (
                  n.config.subordinateClientId,
                  {
                    onUnauthorized: () => h(),
                    ssrContext: n,
                    redirToLogin: M
                  }
                )
              }
            ) () : null].filter(Boolean)
          )
        };
        return {
          http: M(!1),
          httpGql: M(!0),
          loadGqlVisitorToken: w
        }
      };
      var Pn = n(136);
      function Ln(e, t) {
        const n = (
          arguments.length > 2 &&
          void 0 !== arguments[2] ? arguments[2] : {
            i18nPrefix: !0
          }
        ).i18nPrefix &&
        'function' == typeof e.$localePrefix ? e.$localePrefix(t) : t;
        window.location.replace(n)
      }
      var Un = (e, t) => {
        !function (e, t) {
          const n = function (e) {
            return {
              auth: !e.store ||
              !e.store.state.context ||
              null === e.store.state.context.auth ||
              e.store.state.context.auth,
              redirToLogin: !0
            }
          }(e);
          t('httpConfig', n),
          e.$httpConfig = n
        }(e, t);
        const {
          http: n,
          httpGql: r,
          loadGqlVisitorToken: o
        }
        = ((e, t) => Rn(Object(Pn.a) (), 0, e, t, Ln, e.appType)) (e, t);
        t('http', n),
        e.$http = n,
        t('httpGql', r),
        e.$httpGql = r,
        t('loadGqlVisitorToken', o),
        e.$loadGqlVisitorToken = o
      },
      Fn = n(41);
      var Mn = {
        name: 'UpCAlertApiError',
        i18n: {
          messages: {
            'en-gb': n(137),
            en: n(138),
            is: n(139)
          }
        },
        beforeMount() {
          window.addEventListener('UpApiError', this.showAlert)
        },
        [
          Fn.a ? 'unmounted' : 'destroyed'
        ]() {
          window.removeEventListener('UpApiError', this.showAlert)
        },
        render() {
        },
        methods: {
          showAlert(e) {
            if (!e.detail) return;
            const {
              errorActionMsg: t,
              traceId: n
            }
            = e.detail,
            r = n ? this.$t('nsc_alert_api_error_msg.nsc_error_trace_id', {
              traceId: n
            }) : '',
            content = t ? this.$t(
              'nsc_alert_api_error_msg.nsc_with_error',
              {
                errorActionMsg: t,
                traceIdMsg: r
              }
            ) : this.$t('nsc_alert_api_error_msg.nsc_default', {
              traceIdMsg: r
            });
            this.createToaster({
              type: 'warning',
              duration: 0,
              content: content,
              close: !0
            })
          }
        }
      },
      $n = () => {
        new r.default(Mn).$mount()
      };
      async function qn(e) {
        let {
          store: t,
          $logger: n,
          req: r,
          $http: o
        }
        = e;
        t.hasModule('geo') ||
        t.registerModule(
          'geo',
          {
            namespaced: !0,
            state: () => ({
              countryCode: null,
              promise: null
            }),
            mutations: {
              setCountryCode(e, code) {
                e.countryCode = code
              },
              setPromise(e, t) {
                e.promise = t
              }
            },
            actions: {
              async load(e) {
                var t;
                let {
                  state: r,
                  commit: c
                }
                = e,
                l = null === (t = this.app) ||
                void 0 === t ? void 0 : t.context.route.query.region_override;
                if (
                  l ? this.$cookies.set('region_override', l) : l = this.$cookies.get('region_override'),
                  l
                ) return void c('setCountryCode', l);
                const d = this.$cookies.get('country_code');
                if (!r.countryCode && d && c('setCountryCode', d), !r.countryCode) {
                  try {
                    if (!r.promise) {
                      c(
                        'setPromise',
                        o({
                          auth: !1,
                          handleApiErrors: !1,
                          cache: {
                            strategy: 'cacheAndNetwork'
                          },
                          requestAlias: 'geo'
                        }).url('/api/v3/geo/ip/city').get().json()
                      )
                    }
                    const e = await r.promise;
                    e &&
                    c('setCountryCode', e.countryIsoCode)
                  } catch (e) {
                    n.warn(
                      'Failed to get the country code from API (code: '.concat(e.code, ')')
                    )
                  }
                  0
                }
              }
            }
          },
          {
            preserveState: !!t.state.geo
          }
        )
      }
      const jn = 'query getFirstRedirect($forceDisableCache: Boolean, $orgId: ID, $userId: ID, $redirectType: String) {\n  firstRedirect(\n    personId: $userId\n    forceDisableCache: $forceDisableCache\n    orgId: $orgId\n    redirectType: $redirectType\n  ) {\n    description\n    redirectId\n    redirectUrl\n  }\n}';
      async function Vn(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
        };
        const {
          $httpGql: n,
          store: r,
          $logger: o
        }
        = e;
        try {
          var c,
          l;
          const e = t.userId ||
          (
            null === (c = r.state) ||
            void 0 === c ||
            null === (c = c.user) ||
            void 0 === c ? void 0 : c.id
          ),
          o = t.orgId ||
          (
            null === (l = r.state) ||
            void 0 === l ||
            null === (l = l.orgs) ||
            void 0 === l ||
            null === (l = l.current) ||
            void 0 === l ? void 0 : l.id
          ),
          d = t.redirectType ||
          '',
          m = !!t.forceDisableCache;
          return (
            await n({
              handleApiErrors: !1
            }).post({
              query: jn,
              variables: {
                userId: e,
                orgId: o,
                forceDisableCache: m,
                redirectType: d
              }
            }).json()
          ).data.firstRedirect
        } catch (e) {
          o.error('GetHomeRedirect failed', e)
        }
        return null
      }
      function Gn(e, t) {
        t('getHomeRedirect', Vn)
      }
      var Bn = n(27),
      zn = n(140);
      const Hn = {
        COMPONENT_OPTIONS_KEY: 'nuxtI18n',
        STRATEGIES: {
          PREFIX: 'prefix',
          PREFIX_EXCEPT_DEFAULT: 'prefix_except_default',
          PREFIX_AND_DEFAULT: 'prefix_and_default',
          NO_PREFIX: 'no_prefix'
        },
        REDIRECT_ON_OPTIONS: {
          ALL: 'all',
          ROOT: 'root',
          NO_PREFIX: 'no prefix'
        }
      },
      Qn = {
        isUniversalMode: !0,
        trailingSlash: void 0
      },
      Wn = {
        vueI18n: {
          fallbackLocale: 'en-us',
          silentFallbackWarn: !0,
          numberFormats: {
            'en-us': {
              ordinal: {
                rtl: !1,
                rules: {
                  one: 'st',
                  two: 'nd',
                  few: 'rd',
                  other: 'th'
                }
              },
              currency: {
                style: 'currency',
                currency: 'USD'
              },
              currencyMaxDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                currency: 'USD'
              },
              currencyNoDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
                currency: 'USD'
              },
              currencyCompact: {
                style: 'currency',
                currency: 'USD',
                notation: 'compact'
              },
              percent: {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 1,
                useGrouping: !1
              },
              numberNoDecimal: {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              },
              numberOneDecimal: {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
              },
              numberTwoDecimal: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              fileSizeNarrow: {
                notation: 'compact',
                style: 'unit',
                unit: 'byte',
                unitDisplay: 'narrow'
              }
            },
            'en-gb': {
              ordinal: {
                rtl: !1,
                rules: {
                  one: 'st',
                  two: 'nd',
                  few: 'rd',
                  other: 'th'
                }
              },
              currency: {
                style: 'currency',
                currency: 'USD',
                currencyDisplay: 'symbol'
              },
              currencyMaxDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                currency: 'USD',
                currencyDisplay: 'symbol'
              },
              currencyNoDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
                currency: 'USD',
                currencyDisplay: 'symbol'
              },
              currencyCompact: {
                style: 'currency',
                currency: 'USD',
                notation: 'compact',
                currencyDisplay: 'symbol'
              },
              percent: {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 1,
                useGrouping: !1
              },
              numberNoDecimal: {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              },
              numberOneDecimal: {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
              },
              numberTwoDecimal: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              fileSizeNarrow: {
                notation: 'compact',
                style: 'unit',
                unit: 'byte',
                unitDisplay: 'narrow'
              }
            },
            'is-is': {
              ordinal: {
                rtl: !1,
                rules: {
                  other: ''
                }
              },
              currency: {
                style: 'currency',
                currency: 'USD'
              },
              currencyMaxDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                currency: 'USD'
              },
              currencyNoDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
                currency: 'USD'
              },
              currencyCompact: {
                style: 'currency',
                currency: 'USD',
                notation: 'compact'
              },
              percent: {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 1,
                useGrouping: !1
              },
              numberNoDecimal: {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              },
              numberOneDecimal: {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
              },
              numberTwoDecimal: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              fileSizeNarrow: {
                notation: 'compact',
                style: 'unit',
                unit: 'byte',
                unitDisplay: 'narrow'
              }
            },
            de: {
              currency: {
                style: 'currency',
                currency: 'USD'
              },
              currencyMaxDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                currency: 'USD'
              },
              currencyNoSymbol: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              currencyNoDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
                currency: 'USD'
              },
              currencyCompact: {
                style: 'currency',
                currency: 'USD',
                notation: 'compact'
              },
              percent: {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 1,
                useGrouping: !1
              },
              numberNoDecimal: {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              },
              numberOneDecimal: {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
              },
              numberTwoDecimal: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              fileSizeNarrow: {
                notation: 'compact',
                style: 'unit',
                unit: 'byte',
                unitDisplay: 'narrow'
              }
            },
            es: {
              currency: {
                style: 'currency',
                currency: 'USD'
              },
              currencyMaxDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                currency: 'USD'
              },
              currencyNoSymbol: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              currencyNoDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
                currency: 'USD'
              },
              currencyCompact: {
                style: 'currency',
                currency: 'USD',
                notation: 'compact'
              },
              percent: {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 1,
                useGrouping: !1
              },
              numberNoDecimal: {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              },
              numberOneDecimal: {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
              },
              numberTwoDecimal: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              fileSizeNarrow: {
                notation: 'compact',
                style: 'unit',
                unit: 'byte',
                unitDisplay: 'narrow'
              }
            },
            fr: {
              currency: {
                style: 'currency',
                currency: 'USD'
              },
              currencyMaxDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 2,
                currency: 'USD'
              },
              currencyNoSymbol: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              currencyNoDecimal: {
                style: 'currency',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
                currency: 'USD'
              },
              currencyCompact: {
                style: 'currency',
                currency: 'USD',
                notation: 'compact'
              },
              percent: {
                style: 'percent',
                minimumFractionDigits: 0,
                maximumFractionDigits: 1,
                useGrouping: !1
              },
              numberNoDecimal: {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
              },
              numberOneDecimal: {
                minimumFractionDigits: 1,
                maximumFractionDigits: 1
              },
              numberTwoDecimal: {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
              },
              fileSizeNarrow: {
                notation: 'compact',
                style: 'unit',
                unit: 'byte',
                unitDisplay: 'narrow'
              }
            }
          },
          dateTimeFormats: {
            'en-us': {
              relativeTime: {
                unit: 'hour'
              },
              short: {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              },
              long: {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              },
              longMonthDay: {
                month: 'long',
                day: 'numeric'
              },
              shortMonthDay: {
                month: 'short',
                day: 'numeric'
              },
              shortDateTime: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              shortDateTime24Hours: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTime: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              shortTime: {
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime24Hours: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortWeekDay: {
                weekday: 'short'
              },
              longWeekDay: {
                weekday: 'long'
              },
              numericDateTime: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              longDateTimeDay: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              shortUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longMonthDayUTC: {
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortMonthDayUTC: {
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTimeUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              shortDateTime24HoursUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              shortTimeUTC: {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTime24HoursUTC: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayUTC: {
                weekday: 'short',
                timeZone: 'UTC'
              },
              longWeekDayUTC: {
                weekday: 'long',
                timeZone: 'UTC'
              },
              numericDateTimeUTC: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              longDateTimeDayUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              shortWeekDayTime: {
                hour12: !0,
                minute: '2-digit',
                hour: '2-digit',
                weekday: 'short'
              }
            },
            'en-gb': {
              relativeTime: {
                unit: 'hour'
              },
              short: {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              },
              long: {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              },
              longMonthDay: {
                month: 'long',
                day: 'numeric'
              },
              shortMonthDay: {
                month: 'short',
                day: 'numeric'
              },
              shortDateTime: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              shortDateTime24Hours: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTime: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              shortTime: {
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime24Hours: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortWeekDay: {
                weekday: 'short'
              },
              longWeekDay: {
                weekday: 'long'
              },
              numericDateTime: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              longDateTimeDay: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0
              },
              shortUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longMonthDayUTC: {
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortMonthDayUTC: {
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTimeUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              shortDateTime24HoursUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              shortTimeUTC: {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTime24HoursUTC: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayUTC: {
                weekday: 'short',
                timeZone: 'UTC'
              },
              longWeekDayUTC: {
                weekday: 'long',
                timeZone: 'UTC'
              },
              numericDateTimeUTC: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              longDateTimeDayUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !0,
                timeZone: 'UTC'
              },
              shortWeekDayTime: {
                hour12: !0,
                minute: '2-digit',
                hour: '2-digit',
                weekday: 'short'
              }
            },
            'is-is': {
              relativeTime: {
                unit: 'hour'
              },
              short: {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              },
              long: {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              },
              longMonthDay: {
                month: 'long',
                day: 'numeric'
              },
              shortMonthDay: {
                month: 'short',
                day: 'numeric'
              },
              shortDateTime: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortDateTime24Hours: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTime: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortTime: {
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime24Hours: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortWeekDay: {
                weekday: 'short'
              },
              longWeekDay: {
                weekday: 'long'
              },
              numericDateTime: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTimeDay: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longMonthDayUTC: {
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortMonthDayUTC: {
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTimeUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortDateTime24HoursUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortTimeUTC: {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTime24HoursUTC: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayUTC: {
                weekday: 'short',
                timeZone: 'UTC'
              },
              longWeekDayUTC: {
                weekday: 'long',
                timeZone: 'UTC'
              },
              numericDateTimeUTC: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeDayUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayTime: {
                hour12: !0,
                minute: '2-digit',
                hour: '2-digit',
                weekday: 'short'
              }
            },
            de: {
              relativeTime: {
                unit: 'hour'
              },
              short: {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              },
              long: {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              },
              longMonthDay: {
                month: 'long',
                day: 'numeric'
              },
              shortMonthDay: {
                month: 'short',
                day: 'numeric'
              },
              shortDateTime: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortDateTime24Hours: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTime: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime: {
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime24Hours: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortWeekDay: {
                weekday: 'short'
              },
              longWeekDay: {
                weekday: 'long'
              },
              numericDateTime: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              longDateTimeDay: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longMonthDayUTC: {
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortMonthDayUTC: {
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTimeUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTime24HoursUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTimeUTC: {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTime24HoursUTC: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayUTC: {
                weekday: 'short',
                timeZone: 'UTC'
              },
              longWeekDayUTC: {
                weekday: 'long',
                timeZone: 'UTC'
              },
              numericDateTimeUTC: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              longDateTimeDayUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortWeekDayTime: {
                hour12: !0,
                minute: '2-digit',
                hour: '2-digit',
                weekday: 'short'
              }
            },
            es: {
              relativeTime: {
                unit: 'hour'
              },
              short: {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              },
              long: {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              },
              longMonthDay: {
                month: 'long',
                day: 'numeric'
              },
              shortMonthDay: {
                month: 'short',
                day: 'numeric'
              },
              longDateTimeDay: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortDateTime: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortDateTime24Hours: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTime: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime: {
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime24Hours: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortWeekDay: {
                weekday: 'short'
              },
              longWeekDay: {
                weekday: 'long'
              },
              numericDateTime: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longMonthDayUTC: {
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortMonthDayUTC: {
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longDateTimeDayUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTimeUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTime24HoursUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTimeUTC: {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTime24HoursUTC: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayUTC: {
                weekday: 'short',
                timeZone: 'UTC'
              },
              longWeekDayUTC: {
                weekday: 'long',
                timeZone: 'UTC'
              },
              numericDateTimeUTC: {
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortWeekDayTime: {
                hour12: !0,
                minute: '2-digit',
                hour: '2-digit',
                weekday: 'short'
              }
            },
            fr: {
              relativeTime: {
                unit: 'hour'
              },
              short: {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              },
              long: {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              },
              longMonthDay: {
                month: 'long',
                day: 'numeric'
              },
              shortMonthDay: {
                month: 'short',
                day: 'numeric'
              },
              shortDateTime: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortDateTime24Hours: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              longDateTime: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime: {
                hour: 'numeric',
                minute: 'numeric'
              },
              shortTime24Hours: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1
              },
              shortWeekDay: {
                weekday: 'short'
              },
              longWeekDay: {
                weekday: 'long'
              },
              longDateTimeDay: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric'
              },
              shortUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              longMonthDayUTC: {
                month: 'long',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortMonthDayUTC: {
                month: 'short',
                day: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTimeUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortDateTime24HoursUTC: {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              longDateTimeUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTimeUTC: {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortTime24HoursUTC: {
                hour: 'numeric',
                minute: 'numeric',
                hour12: !1,
                timeZone: 'UTC'
              },
              shortWeekDayUTC: {
                weekday: 'short',
                timeZone: 'UTC'
              },
              longWeekDayUTC: {
                weekday: 'long',
                timeZone: 'UTC'
              },
              longDateTimeDayUTC: {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long',
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'UTC'
              },
              shortWeekDayTime: {
                hour12: !0,
                minute: '2-digit',
                hour: '2-digit',
                weekday: 'short'
              }
            }
          }
        },
        vueI18nLoader: !1,
        locales: [
          {
            code: 'en-us',
            iso: 'en-US',
            name: 'English (US)',
            file: 'en-US.json'
          },
          {
            code: 'is-is',
            iso: 'is-IS',
            name: 'Íslenska (Ísland)',
            file: 'is-IS.json'
          },
          {
            code: 'en-gb',
            iso: 'en-GB',
            name: 'English (UK)',
            file: 'en-GB.json'
          }
        ],
        defaultLocale: 'en-us',
        defaultDirection: 'ltr',
        routesNameSeparator: '___',
        defaultLocaleRouteNameSuffix: 'default',
        sortRoutes: !0,
        strategy: 'no_prefix',
        lazy: !0,
        langDir: 'lang',
        rootRedirect: null,
        detectBrowserLanguage: !1,
        differentDomains: !1,
        baseUrl: '',
        vuex: {
          moduleName: 'i18n',
          syncRouteParams: !0
        },
        parsePages: !0,
        pages: {
        },
        skipSettingLocaleOnNavigate: !1,
        onBeforeLanguageSwitch: () => {
        },
        onLanguageSwitched: () => null,
        normalizedLocales: [
          {
            code: 'en-us',
            iso: 'en-US',
            name: 'English (US)',
            file: 'en-US.json'
          },
          {
            code: 'is-is',
            iso: 'is-IS',
            name: 'Íslenska (Ísland)',
            file: 'is-IS.json'
          },
          {
            code: 'en-gb',
            iso: 'en-GB',
            name: 'English (UK)',
            file: 'en-GB.json'
          }
        ],
        localeCodes: [
          'en-us',
          'is-is',
          'en-gb'
        ],
        additionalMessages: []
      },
      Kn = {
        'en-US.json': () => Promise.resolve(zn),
        'is-IS.json': () => n.e(94).then(n.t.bind(null, 1166, 3)),
        'en-GB.json': () => n.e(93).then(n.t.bind(null, 1167, 3))
      };
      n(180);
      var Jn = n(69),
      Xn = n.n(Jn);
      function Zn(text) {
        return '[@nuxtjs/i18n] '.concat(text)
      }
      function Yn(e, t) {
        const n = [],
        r = [];
        for (const t of e) {
          const {
            code: code
          }
          = t,
          e = t.iso ||
          code;
          r.push({
            code: code,
            iso: e
          })
        }
        for (const [e,
        o]of t.entries()) {
          const c = r.find((e => e.iso.toLowerCase() === o.toLowerCase()));
          if (c) {
            n.push({
              code: c.code,
              score: 1 - e / t.length
            });
            break
          }
        }
        for (const [e,
        o]of t.entries()) {
          const c = o.split('-') [0].toLowerCase(),
          l = r.find((e => e.iso.split('-') [0].toLowerCase() === c));
          if (l) {
            n.push({
              code: l.code,
              score: 0.999 - e / t.length
            });
            break
          }
        }
        return n.length > 1 &&
        n.sort(
          (
            (e, t) => e.score === t.score ? t.code.length - e.code.length : t.score - e.score
          )
        ),
        n.length ? n[0].code : void 0
      }
      function ei(e) {
        return new RegExp('^/('.concat(e.join('|'), ')(?:/|$)'))
      }
      async function ti(e, t) {
        const {
          app: n
        }
        = e,
        {
          i18n: r
        }
        = n;
        if (
          r.loadedLanguages ||
          (r.loadedLanguages = []),
          !r.loadedLanguages.includes(t)
        ) {
          const n = Wn.normalizedLocales.find((e => e.code === t));
          if (n) {
            const {
              file: o
            }
            = n;
            if (o) {
              let n;
              {
                const {
                  nuxtState: r
                }
                = e;
                r &&
                r.__i18n &&
                r.__i18n.langs[t] &&
                (n = r.__i18n.langs[t], e.isDev && Kn[o]())
              }
              if (!n) try {
                const r = await Kn[o]().then((e => e.default || e));
                n = 'function' == typeof r ? await Promise.resolve(r(e, t)) : r
              } catch (e) {
                console.error(Zn('Failed loading async locale export: '.concat(e.message)))
              }
              n &&
              (
                r.setLocaleMessage(t, n),
                ri(r, Wn.additionalMessages, Wn.localeCodes, [
                  t
                ]),
                r.loadedLanguages.push(t)
              )
            } else console.warn(Zn('Could not find lang file for locale '.concat(t)))
          } else console.warn(
            Zn(
              'Attempted to load messages for non-existant locale code "'.concat(t, '"')
            )
          )
        }
      }
      function ni(e, t, n, r) {
        let {
          differentDomains: o,
          normalizedLocales: c
        }
        = r;
        if ('function' == typeof e) return e(t);
        if (o && n) {
          const e = ii(n, t.req, {
            normalizedLocales: c
          });
          if (e) return e
        }
        return e
      }
      function ii(e, t, n) {
        let {
          normalizedLocales: r
        }
        = n;
        const o = r.find((t => t.code === e));
        if (o && o.domain) {
          if (Object(Bn.hasProtocol) (o.domain)) return o.domain;
          let e;
          return e = window.location.protocol.split(':') [0],
          ''.concat(e, '://').concat(o.domain)
        }
        console.warn(Zn('Could not find domain name for locale '.concat(e)))
      }
      function ri(e, t, n, r) {
        const o = r ||
        n;
        for (const n of t) for (const t of o) {
          const r = e.getLocaleMessage(t);
          e.mergeLocaleMessage(t, n[t]),
          e.mergeLocaleMessage(t, r)
        }
      }
      function ai(e, t) {
        const n = ci.call(this, e, t);
        return n ? n.route.redirectedFrom ||
        n.route.fullPath : ''
      }
      function oi(e, t) {
        const n = ci.call(this, e, t);
        return n ? n.route : void 0
      }
      function si(e, t) {
        const n = ci.call(this, e, t);
        return n ? n.location : void 0
      }
      function ci(e, t) {
        if (!e) return;
        const {
          i18n: n
        }
        = this;
        if (!(t = t || n.locale)) return;
        'string' == typeof e &&
        (e = '/' === e[0] ? {
          path: e
        }
         : {
          name: e
        });
        let r = Object.assign({
        }, e);
        if (r.path && !r.name) {
          const e = this.router.resolve(r).route,
          o = this.getRouteBaseName(e);
          if (o) r = {
            name: mi(o, t),
            params: e.params,
            query: e.query,
            hash: e.hash
          };
           else {
            !(
              t === Wn.defaultLocale &&
              [
                Hn.STRATEGIES.PREFIX_EXCEPT_DEFAULT,
                Hn.STRATEGIES.PREFIX_AND_DEFAULT
              ].includes(Wn.strategy) ||
              Wn.strategy === Hn.STRATEGIES.NO_PREFIX ||
              n.differentDomains
            ) &&
            (r.path = '/'.concat(t).concat(r.path)),
            r.path = Qn.trailingSlash ? Object(Bn.withTrailingSlash) (r.path, !0) : Object(Bn.withoutTrailingSlash) (r.path, !0)
          }
        } else {
          r.name ||
          r.path ||
          (r.name = this.getRouteBaseName()),
          r.name = mi(r.name, t);
          const {
            params: e
          }
          = r;
          e &&
          void 0 === e[0] &&
          e.pathMatch &&
          (e[0] = e.pathMatch)
        }
        const o = this.router.resolve(r);
        return o.route.name ? o : this.router.resolve(e)
      }
      function ui(e) {
        const t = this.getRouteBaseName();
        if (!t) return '';
        const {
          i18n: n,
          route: r,
          store: o
        }
        = this,
        {
          params: c,
          ...l
        }
        = r;
        let d = {};
        Wn.vuex &&
        Wn.vuex.syncRouteParams &&
        o &&
        (
          d = o.getters[''.concat(Wn.vuex.moduleName, '/localeRouteParams')](e)
        );
        const m = Object.assign({
        }, l, {
          name: t,
          params: {
            ...c,
            ...d,
            0: c.pathMatch
          }
        });
        let path = this.localePath(m, e);
        if (n.differentDomains) {
          const t = {
            differentDomains: n.differentDomains,
            normalizedLocales: Wn.normalizedLocales
          },
          r = ii(e, this.req, t);
          r &&
          (path = r + path)
        }
        return path
      }
      function di(e) {
        const t = void 0 !== e ? e : this.route;
        if (t && t.name) return t.name.split(Wn.routesNameSeparator) [0]
      }
      function mi(e, t) {
        let n = e + (
          Wn.strategy === Hn.STRATEGIES.NO_PREFIX ? '' : Wn.routesNameSeparator + t
        );
        return t === Wn.defaultLocale &&
        Wn.strategy === Hn.STRATEGIES.PREFIX_AND_DEFAULT &&
        (n += Wn.routesNameSeparator + Wn.defaultLocaleRouteNameSuffix),
        n
      }
      Ut.a.nuxti18n = async e => {
        const {
          app: t,
          isHMR: n
        }
        = e;
        if (n) return;
        const [r,
        o,
        c] = await t.i18n.__onNavigate(e.route);
        if (r && o) {
          const t = c ? e.route.query : void 0;
          e.redirect(r, o, t)
        }
      };
      const hi = function (e) {
        return function () {
          const t = {
            getRouteBaseName: this.getRouteBaseName,
            i18n: this.$i18n,
            localePath: this.localePath,
            localeRoute: this.localeRoute,
            localeLocation: this.localeLocation,
            req: null,
            route: this.$route,
            router: this.$router,
            store: this.$store
          };
          return e.call(t, ...arguments)
        }
      },
      fi = function (e, t) {
        return function () {
          const {
            app: n,
            req: r,
            route: o,
            store: c
          }
          = e,
          l = {
            getRouteBaseName: n.getRouteBaseName,
            i18n: n.i18n,
            localePath: n.localePath,
            localeLocation: n.localeLocation,
            localeRoute: n.localeRoute,
            req: null,
            route: o,
            router: n.router,
            store: c
          };
          return t.call(l, ...arguments)
        }
      },
      pi = {
        install(e) {
          e.mixin({
            methods: {
              localePath: hi(ai),
              localeRoute: hi(oi),
              localeLocation: hi(si),
              switchLocalePath: hi(ui),
              getRouteBaseName: hi(di)
            }
          })
        }
      };
      var gi = e => {
        r.default.use(pi);
        const {
          app: t,
          store: n
        }
        = e;
        t.localePath = e.localePath = fi(e, ai),
        t.localeRoute = e.localeRoute = fi(e, oi),
        t.localeLocation = e.localeLocation = fi(e, si),
        t.switchLocalePath = e.switchLocalePath = fi(e, ui),
        t.getRouteBaseName = e.getRouteBaseName = fi(e, di),
        n &&
        (
          n.localePath = t.localePath,
          n.localeRoute = t.localeRoute,
          n.localeLocation = t.localeLocation,
          n.switchLocalePath = t.switchLocalePath,
          n.getRouteBaseName = t.getRouteBaseName
        )
      },
      vi = VueI18n;
      function yi(e, t, n) {
        'object' == typeof n.value &&
        (n.value = wi(n.value)),
        n.enumerable &&
        !n.get &&
        !n.set &&
        n.configurable &&
        n.writable &&
        '__proto__' !== t ? e[t] = n.value : Object.defineProperty(e, t, n)
      }
      function wi(e) {
        if ('object' != typeof e) return e;
        var t,
        n,
        r,
        i = 0,
        o = Object.prototype.toString.call(e);
        if (
          '[object Object]' === o ? r = Object.create(e.__proto__ || null) : '[object Array]' === o ? r = Array(e.length) : '[object Set]' === o ? (r = new Set, e.forEach((function (e) {
            r.add(wi(e))
          }))) : '[object Map]' === o ? (r = new Map, e.forEach((function (e, t) {
            r.set(wi(t), wi(e))
          }))) : '[object Date]' === o ? r = new Date( + e) : '[object RegExp]' === o ? r = new RegExp(e.source, e.flags) : '[object DataView]' === o ? r = new e.constructor(wi(e.buffer)) : '[object ArrayBuffer]' === o ? r = e.slice(0) : 'Array]' === o.slice( - 6) &&
          (r = new e.constructor(e)),
          r
        ) {
          for (n = Object.getOwnPropertySymbols(e); i < n.length; i++) yi(r, n[i], Object.getOwnPropertyDescriptor(e, n[i]));
          for (i = 0, n = Object.getOwnPropertyNames(e); i < n.length; i++) Object.hasOwnProperty.call(r, t = n[i]) &&
          r[t] === e[t] ||
          yi(r, t, Object.getOwnPropertyDescriptor(e, t))
        }
        return r ||
        e
      }
      function bi() {
        let {
          addDirAttribute: e = !1,
          addSeoAttributes: t = !1
        }
        = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : {
        };
        if (!this.$i18n) return {
        };
        const n = {
          htmlAttrs: {
          },
          link: [],
          meta: []
        },
        r = this.$i18n.localeProperties,
        o = r.iso,
        l = r.dir ||
        Wn.defaultDirection;
        if (
          e &&
          (n.htmlAttrs.dir = l),
          t &&
          (c.a.hasMetaInfo ? c.a.hasMetaInfo(this) : this._hasMetaInfo) &&
          this.$i18n.locale &&
          this.$i18n.locales
        ) {
          o &&
          (n.htmlAttrs.lang = o);
          const e = this.$i18n.locales;
          (
            function (e, t, link) {
              if (Wn.strategy === Hn.STRATEGIES.NO_PREFIX) return;
              const n = new Map;
              for (const t of e) {
                const e = t.iso;
                if (!e) {
                  console.warn(Zn('Locale ISO code is required to generate alternate link'));
                  continue
                }
                const [r,
                o] = e.split('-');
                r &&
                o &&
                (t.isCatchallLocale || !n.has(r)) &&
                n.set(r, t),
                n.set(e, t)
              }
              for (const [e,
              r]of n.entries()) {
                const n = this.switchLocalePath(r.code);
                n &&
                link.push({
                  hid: 'i18n-alt-'.concat(e),
                  rel: 'alternate',
                  href: m(n, t),
                  hreflang: e
                })
              }
              if (Wn.defaultLocale) {
                const e = this.switchLocalePath(Wn.defaultLocale);
                e &&
                link.push({
                  hid: 'i18n-xd',
                  rel: 'alternate',
                  href: m(e, t),
                  hreflang: 'x-default'
                })
              }
            }
          ).bind(this) (e, this.$i18n.__baseUrl, n.link),
          function (e, link, t) {
            const n = this.localeRoute({
              ...this.$route,
              name: this.getRouteBaseName()
            });
            if (n) {
              let r = m(n.path, e);
              const o = 'boolean' != typeof t &&
              t.canonicalQueries ||
              [];
              if (o.length) {
                const e = n.query,
                t = new URLSearchParams;
                for (const n of o) if (n in e) {
                  const r = e[n];
                  Array.isArray(r) ? r.forEach((e => t.append(n, e || ''))) : t.append(n, r || '')
                }
                const c = t.toString();
                c &&
                (r = ''.concat(r, '?').concat(c))
              }
              link.push({
                hid: 'i18n-can',
                rel: 'canonical',
                href: r
              })
            }
          }.bind(this) (this.$i18n.__baseUrl, n.link, t),
          function (e, t, meta) {
            const n = e &&
            t;
            if (!n) return;
            meta.push({
              hid: 'i18n-og',
              property: 'og:locale',
              content: d(t)
            })
          }.bind(this) (r, o, n.meta),
          function (e, t, meta) {
            const n = e.filter((e => {
              const n = e.iso;
              return n &&
              n !== t
            }));
            if (n.length) {
              const e = n.map(
                (
                  e => ({
                    hid: 'i18n-og-alt-'.concat(e.iso),
                    property: 'og:locale:alternate',
                    content: d(e.iso)
                  })
                )
              );
              meta.push(...e)
            }
          }.bind(this) (e, o, n.meta)
        }
        function d(e) {
          return (e || '').replace(/-/g, '_')
        }
        function m(e, t) {
          return e.match(/^https?:\/\//) ? e : t + e
        }
        return n
      }
      r.default.use(vi);
      var ki = async e => {
        const {
          app: t,
          route: n,
          store: o,
          req: c,
          res: l,
          redirect: d
        }
        = e;
        Wn.vuex &&
        o &&
        function (e, t, n) {
          const r = {
            namespaced: !0,
            state: () => ({
              ...t.syncRouteParams ? {
                routeParams: {
                }
              }
               : {
              }
            }),
            actions: {
              ...t.syncRouteParams ? {
                setRouteParams(e, t) {
                  let {
                    commit: n
                  }
                  = e;
                  n('setRouteParams', t)
                }
              }
               : {
              }
            },
            mutations: {
              ...t.syncRouteParams ? {
                setRouteParams(e, t) {
                  e.routeParams = t
                }
              }
               : {
              }
            },
            getters: {
              ...t.syncRouteParams ? {
                localeRouteParams: e => {
                  let {
                    routeParams: t
                  }
                  = e;
                  return e => t &&
                  t[e] ||
                  {
                  }
                }
              }
               : {
              }
            }
          };
          e.registerModule(t.moduleName, r, {
            preserveState: !!e.state[t.moduleName]
          })
        }(o, Wn.vuex, Wn.localeCodes);
        const {
          lazy: m
        }
        = Wn;
        m &&
        (!0 === m || m.skipNuxtState);
        const {
          alwaysRedirect: h,
          fallbackLocale: f,
          redirectOn: v,
          useCookie: y,
          cookieAge: w,
          cookieKey: k,
          cookieDomain: S,
          cookieSecure: T,
          cookieCrossOrigin: E
        }
        = Wn.detectBrowserLanguage,
        I = function (e, t) {
          let {
            routesNameSeparator: n,
            defaultLocaleRouteNameSuffix: r
          }
          = t;
          const o = '('.concat(e.join('|'), ')'),
          c = '(?:'.concat(n).concat(r, ')?'),
          l = new RegExp(''.concat(n).concat(o).concat(c, '$')),
          d = ei(e);
          return e => {
            if (e.name) {
              const t = e.name.match(l);
              if (t && t.length > 1) return t[1]
            } else if (e.path) {
              const t = e.path.match(d);
              if (t && t.length > 1) return t[1]
            }
            return ''
          }
        }(
          Wn.localeCodes,
          {
            routesNameSeparator: Wn.routesNameSeparator,
            defaultLocaleRouteNameSuffix: Wn.defaultLocaleRouteNameSuffix
          }
        ),
        _ = async function (n) {
          let {
            initialSetup: o = !1
          }
          = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          if (!n) return;
          if (!o && t.i18n.differentDomains) return;
          const c = t.i18n.locale;
          if (n === c) return;
          const l = t.i18n.onBeforeLanguageSwitch(c, n, o, e);
          if (l && t.i18n.localeCodes.includes(l)) {
            if (l === c) return;
            n = l
          }
          if (y && t.i18n.setLocaleCookie(n), Wn.langDir) {
            const r = t.i18n.fallbackLocale;
            if (Wn.lazy) {
              if (r) {
                let t = [];
                Array.isArray(r) ? t = r.map((t => ti(e, t))) : 'object' == typeof r ? (
                  r[n] &&
                  (t = t.concat(r[n].map((t => ti(e, t))))),
                  r.default &&
                  (t = t.concat(r.default.map((t => ti(e, t)))))
                ) : n !== r &&
                t.push(ti(e, r)),
                await Promise.all(t)
              }
              await ti(e, n)
            } else await Promise.all(Wn.localeCodes.map((t => ti(e, t))))
          } else ri(t.i18n, Wn.additionalMessages, Wn.localeCodes);
          t.i18n.locale = n;
          const m = Wn.normalizedLocales.find((e => e.code === n)) ||
          {
            code: n
          };
          for (const e of Object.keys(t.i18n.localeProperties)) t.i18n.localeProperties[e] = void 0;
          for (const [e,
          n]of Object.entries(m)) r.default.set(t.i18n.localeProperties, e, wi(n));
          const {
            route: h
          }
          = e;
          let f = '';
          if (
            !t.i18n.differentDomains &&
            Wn.strategy !== Hn.STRATEGIES.NO_PREFIX &&
            (
              I(h) !== n ||
              Wn.strategy === Hn.STRATEGIES.PREFIX_AND_DEFAULT &&
              n === Wn.defaultLocale
            )
          ) {
            const e = t.switchLocalePath(n) ||
            t.localePath(h.fullPath, n);
            !e ||
            Object(Bn.isEqual) (e, h.fullPath) ||
            e.startsWith('//') ||
            (f = e)
          }
          o ? t.i18n.__redirect = f : (t.i18n.onLanguageSwitched(c, n), f && d(f))
        },
        C = async() => {
          t.i18n.__pendingLocale &&
          (
            await t.i18n.setLocale(t.i18n.__pendingLocale),
            t.i18n.__resolvePendingLocalePromise(''),
            t.i18n.__pendingLocale = null
          )
        },
        N = async() => {
          t.i18n.__pendingLocale &&
          await t.i18n.__pendingLocalePromise
        },
        x = () => 'undefined' != typeof navigator &&
        navigator.languages ? Yn(Wn.normalizedLocales, navigator.languages) : c &&
        void 0 !== c.headers['accept-language'] ? Yn(
          Wn.normalizedLocales,
          c.headers['accept-language'].split(',').map((e => e.split(';') [0]))
        ) : void 0,
        A = e => {
          if (Wn.strategy !== Hn.STRATEGIES.NO_PREFIX) if (v === Hn.REDIRECT_ON_OPTIONS.ROOT) {
            if ('/' !== e.path) return ''
          } else if (
            v === Hn.REDIRECT_ON_OPTIONS.NO_PREFIX &&
            !h &&
            e.path.match(ei(Wn.localeCodes))
          ) return '';
          let n;
          y &&
          (n = t.i18n.getLocaleCookie()) ||
          (n = x());
          const r = n ||
          f;
          return !r ||
          y &&
          !h &&
          t.i18n.getLocaleCookie() ||
          r === t.i18n.locale ? '' : r
        },
        O = e => {
          e.locales = wi(Wn.locales),
          e.localeCodes = wi(Wn.localeCodes),
          e.localeProperties = r.default.observable(
            wi(
              Wn.normalizedLocales.find((t => t.code === e.locale)) ||
              {
                code: e.locale
              }
            )
          ),
          e.defaultLocale = Wn.defaultLocale,
          e.differentDomains = Wn.differentDomains,
          e.onBeforeLanguageSwitch = Wn.onBeforeLanguageSwitch,
          e.onLanguageSwitched = Wn.onLanguageSwitched,
          e.setLocaleCookie = e => function (e, t, n) {
            let {
              useCookie: r,
              cookieAge: o,
              cookieDomain: c,
              cookieKey: l,
              cookieSecure: d,
              cookieCrossOrigin: m
            }
            = n;
            if (r) {
              const t = {
                expires: o,
                path: '/',
                sameSite: m ? 'none' : 'lax',
                secure: m ||
                d,
                ...c ? {
                  domain: c
                }
                 : {
                }
              };
              Xn.a.set(l, e, t)
            }
          }(
            e,
            0,
            {
              useCookie: y,
              cookieAge: w,
              cookieDomain: S,
              cookieKey: k,
              cookieSecure: T,
              cookieCrossOrigin: E
            }
          ),
          e.getLocaleCookie = () => function (e, t) {
            let {
              useCookie: n,
              cookieKey: r,
              localeCodes: o
            }
            = t;
            if (n) {
              let e;
              if (e = Xn.a.get(r), e && o.includes(e)) return e
            }
          }(0, {
            useCookie: y,
            cookieKey: k,
            localeCodes: Wn.localeCodes
          }),
          e.setLocale = e => _(e),
          e.getBrowserLocale = () => x(),
          e.finalizePendingLocaleChange = C,
          e.waitForPendingLocaleChange = N,
          e.__baseUrl = t.i18n.__baseUrl,
          e.__pendingLocale = t.i18n.__pendingLocale,
          e.__pendingLocalePromise = t.i18n.__pendingLocalePromise,
          e.__resolvePendingLocalePromise = t.i18n.__resolvePendingLocalePromise
        },
        D = 'function' == typeof Wn.vueI18n ? await Wn.vueI18n(e) : wi(Wn.vueI18n);
        if (
          D.componentInstanceCreatedListener = O,
          t.i18n = e.i18n = new vi(D),
          t.i18n.locale = '',
          t.i18n.fallbackLocale = D.fallbackLocale ||
          '',
          o &&
          (o.$i18n = t.i18n, o.state.localeDomains)
        ) for (const [e,
        t]of Wn.normalizedLocales.entries()) {
          const n = o.state.localeDomains[t.code];
          if (n) {
            t.domain = n;
            const r = Wn.locales[e];
            'string' != typeof r &&
            (r.domain = n)
          }
        }
        O(t.i18n);
        const R = {
          differentDomains: Wn.differentDomains,
          normalizedLocales: Wn.normalizedLocales
        };
        t.i18n.__baseUrl = ni(Wn.baseUrl, e, '', R),
        t.i18n.__onNavigate = async n => {
          if ('/' === n.path && Wn.rootRedirect) {
            let e = 302,
            path = Wn.rootRedirect;
            return 'string' != typeof Wn.rootRedirect &&
            (e = Wn.rootRedirect.statusCode, path = Wn.rootRedirect.path),
            [
              e,
              '/'.concat(path),
              !0
            ]
          }
          const r = t.i18n.__redirect;
          if (r) return t.i18n.__redirect = null,
          [
            302,
            r
          ];
          const o = {
            differentDomains: Wn.differentDomains,
            normalizedLocales: Wn.normalizedLocales
          };
          t.i18n.__baseUrl = ni(Wn.baseUrl, e, t.i18n.locale, o);
          const c = Wn.detectBrowserLanguage &&
          A(n) ||
          !Wn.differentDomains &&
          Wn.strategy !== Hn.STRATEGIES.NO_PREFIX &&
          I(n) ||
          t.i18n.locale ||
          t.i18n.defaultLocale ||
          '';
          return Wn.skipSettingLocaleOnNavigate ? (
            t.i18n.__pendingLocale = c,
            t.i18n.__pendingLocalePromise = new Promise((e => {
              t.i18n.__resolvePendingLocalePromise = e
            }))
          ) : await t.i18n.setLocale(c),
          [
            null,
            null
          ]
        },
        r.default.prototype.$nuxtI18nHead = bi;
        let P = Wn.detectBrowserLanguage ? A(n) : '';
        if (!P) if (t.i18n.differentDomains) {
          P = function (e, t) {
            let n;
            if (n = window.location.host, n) {
              const t = e.find((e => e.domain === n));
              if (t) return t.code
            }
            return ''
          }(Wn.normalizedLocales)
        } else if (Wn.strategy !== Hn.STRATEGIES.NO_PREFIX) {
          P = I(n)
        }
        !P &&
        y &&
        (P = t.i18n.getLocaleCookie()),
        P ||
        (P = t.i18n.defaultLocale || ''),
        await _(P, {
          initialSetup: !0
        })
      };
      function Si(e) {
        let {
          initialOptions: t,
          isVue3: n
        }
        = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
          isVue3: !1
        };
        e.$nc = function (e) {
          let r = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          const {
            currencyRate: o,
            locale: c,
            n: l
          }
          = function (e, t, n) {
            var r,
            o,
            c;
            return n ? {
              currencyRate: t.currencyRate,
              locale: t.i18n.locale,
              n: t.i18n.n
            }
             : {
              currencyRate: e.$currencyRate,
              locale: (null === (r = e.$i18n) || void 0 === r ? void 0 : r.locale) ||
              (
                null === (o = e.app) ||
                void 0 === o ||
                null === (o = o.i18n) ||
                void 0 === o ? void 0 : o.locale
              ) ||
              'en-US',
              n: e.$n ||
              (
                null === (c = e.app) ||
                void 0 === c ||
                null === (c = c.i18n) ||
                void 0 === c ? void 0 : c.n
              )
            }
          }(this, t, n),
          d = {
            rate: 1,
            currency: 'USD'
          },
          {
            rate: m,
            currency: h
          }
          = o ||
          d,
          f = {
            style: 'currency',
            currency: h,
            locale: c
          };
          let v = e;
          h !== d.currency &&
          1 !== m &&
          (v = r.reverse ? e / m : e * m),
          r.reverse &&
          (f.currency = 'USD');
          const y = {
            ...f,
            ...r
          };
          return 'magnitudeFloorAbove100' === y.roundingMode &&
          (
            v = function (e) {
              const t = + e;
              if (Number.isNaN(t) || t <= 100) return t;
              const n = 10**Math.floor(Math.log10(t));
              return Math.floor(t / n) * n
            }(v),
            delete y.roundingMode
          ),
          l.call(this, v, y)
        }
      }
      function Ti(e) {
        if (!e) return null;
        let t = e;
        for (let i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i += 1) {
          const e = i + 1 < 1 ||
          arguments.length <= i + 1 ? void 0 : arguments[i + 1];
          if (!t[e]) return null;
          t = t[e]
        }
        return t
      }
      function Ei(e, t, n) {
        if (Array.isArray(e)) {
          for (let i = 0; i < e.length; i += 1) {
            const r = Ei(e[i], t, n);
            if (r) return r
          }
          return {
          }
        }
        {
          const r = e.locale,
          o = e.fallbackLocale ||
          'en';
          let c = Ti(e, t, r, n),
          l = r;
          return c ||
          (c = Ti(e, t, o, n), l = o),
          c ? {
            config: c,
            locale: l
          }
           : null
        }
      }
      function Ii(e, t, n) {
        return n ? {
          localI18n: t.i18n
        }
         : function (e) {
          var t,
          n,
          r;
          return {
            rootI18n: null !== (t = null === (n = e.$nuxt) || void 0 === n ? void 0 : n.$i18n) &&
            void 0 !== t ? t : null === (r = e.$root) ||
            void 0 === r ? void 0 : r.$i18n,
            localI18n: e.$i18n
          }
        }(e)
      }
      function _i(e) {
        let {
          options: t,
          isVue3: n
        }
        = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
          isVue3: !1
        };
        e.$o = function (e) {
          try {
            const r = function (e, t, n) {
              const r = Ii(e, t, n),
              o = [
                r.localI18n
              ];
              return n ||
              o.push(r.rootI18n),
              o
            }(this, t, n),
            {
              config: o = null,
              locale: c = null
            }
            = Ei(r, 'numberFormats', 'ordinal');
            if (o && c) {
              const {
                rtl: t
              }
              = o,
              {
                rules: n
              }
              = o,
              r = new Intl.NumberFormat(c),
              l = n[new Intl.PluralRules(c, {
                type: 'ordinal'
              }).select(e)];
              return ((e, t, n) => n ? ''.concat(t).concat(e) : ''.concat(e).concat(t)) (r.format(e), l, t)
            }
            return console.warn('[i18n Ordinal Plugin]: Configurations not found'),
            e
          } catch (t) {
            return console.warn('[i18n Ordinal Plugin]: '.concat(t)),
            e
          }
        }
      }
      Math.pow(10, 8);
      const Ci = 604800000,
      Ni = 86400000,
      xi = 60000,
      Ai = 3600000,
      Oi = 3600,
      Di = 60,
      Ri = 24 * Oi,
      Pi = 7 * Ri,
      Li = 365.2425 * Ri,
      Ui = Li / 12,
      Fi = 3 * Ui;
      function Mi(e) {
        const t = Object.prototype.toString.call(e);
        return e instanceof Date ||
        'object' == typeof e &&
        '[object Date]' === t ? new e.constructor( + e) : 'number' == typeof e ||
        '[object Number]' === t ||
        'string' == typeof e ||
        '[object String]' === t ? new Date(e) : new Date(NaN)
      }
      function $i(e) {
        const t = Mi(e);
        return t.setHours(0, 0, 0, 0),
        t
      }
      function qi(e) {
        const t = Mi(e),
        n = new Date(
          Date.UTC(
            t.getFullYear(),
            t.getMonth(),
            t.getDate(),
            t.getHours(),
            t.getMinutes(),
            t.getSeconds(),
            t.getMilliseconds()
          )
        );
        return n.setUTCFullYear(t.getFullYear()),
        + e - + n
      }
      function ji(e, t) {
        const n = $i(e),
        r = $i(t),
        o = + n - qi(n),
        c = + r - qi(r);
        return Math.round((o - c) / Ni)
      }
      function Vi(e, t) {
        const n = Mi(e),
        r = Mi(t);
        return 12 * (n.getFullYear() - r.getFullYear()) + (n.getMonth() - r.getMonth())
      }
      function Gi(e) {
        const t = Mi(e);
        return Math.trunc(t.getMonth() / 3) + 1
      }
      function Bi(e, t) {
        const n = Mi(e),
        r = Mi(t);
        return 4 * (n.getFullYear() - r.getFullYear()) + (Gi(n) - Gi(r))
      }
      let zi = {};
      function Hi(e, t) {
        var n,
        r,
        o,
        c,
        l,
        d;
        const m = zi,
        h = null !== (
          n = null !== (
            r = null !== (
              o = null !== (c = null == t ? void 0 : t.weekStartsOn) &&
              void 0 !== c ? c : null == t ||
              null === (l = t.locale) ||
              void 0 === l ||
              null === (l = l.options) ||
              void 0 === l ? void 0 : l.weekStartsOn
            ) &&
            void 0 !== o ? o : m.weekStartsOn
          ) &&
          void 0 !== r ? r : null === (d = m.locale) ||
          void 0 === d ||
          null === (d = d.options) ||
          void 0 === d ? void 0 : d.weekStartsOn
        ) &&
        void 0 !== n ? n : 0,
        f = Mi(e),
        v = f.getDay(),
        y = (v < h ? 7 : 0) + v - h;
        return f.setDate(f.getDate() - y),
        f.setHours(0, 0, 0, 0),
        f
      }
      function Qi(e, t, n) {
        const r = Hi(e, n),
        o = Hi(t, n),
        c = + r - qi(r),
        l = + o - qi(o);
        return Math.round((c - l) / Ci)
      }
      function Wi(e, t) {
        const n = Mi(e),
        r = Mi(t);
        return n.getFullYear() - r.getFullYear()
      }
      function Ki(e) {
        return t => {
          const n = (e ? Math[e] : Math.trunc) (t);
          return 0 === n ? 0 : n
        }
      }
      function Ji(e, t) {
        return + Mi(e) - + Mi(t)
      }
      function Xi(e, t, n) {
        const r = Ji(e, t) / Ai;
        return Ki(null == n ? void 0 : n.roundingMethod) (r)
      }
      function Zi(e, t, n) {
        const r = Ji(e, t) / xi;
        return Ki(null == n ? void 0 : n.roundingMethod) (r)
      }
      function Yi(e, t, n) {
        const r = Ji(e, t) / 1000;
        return Ki(null == n ? void 0 : n.roundingMethod) (r)
      }
      function er(e, t, n) {
        let r,
        o = 0;
        const c = Mi(e),
        l = Mi(t);
        if (null != n && n.unit) r = null == n ? void 0 : n.unit,
        'second' === r ? o = Yi(c, l) : 'minute' === r ? o = Zi(c, l) : 'hour' === r ? o = Xi(c, l) : 'day' === r ? o = ji(c, l) : 'week' === r ? o = Qi(c, l) : 'month' === r ? o = Vi(c, l) : 'quarter' === r ? o = Bi(c, l) : 'year' === r &&
        (o = Wi(c, l));
         else {
          const e = Yi(c, l);
          Math.abs(e) < Di ? (o = Yi(c, l), r = 'second') : Math.abs(e) < Oi ? (o = Zi(c, l), r = 'minute') : Math.abs(e) < Ri &&
          Math.abs(ji(c, l)) < 1 ? (o = Xi(c, l), r = 'hour') : Math.abs(e) < Pi &&
          (o = ji(c, l)) &&
          Math.abs(o) < 7 ? r = 'day' : Math.abs(e) < Ui ? (o = Qi(c, l), r = 'week') : Math.abs(e) < Fi ? (o = Vi(c, l), r = 'month') : Math.abs(e) < Li &&
          Bi(c, l) < 4 ? (o = Bi(c, l), r = 'quarter') : (o = Wi(c, l), r = 'year')
        }
        return new Intl.RelativeTimeFormat(
          null == n ? void 0 : n.locale,
          {
            localeMatcher: null == n ? void 0 : n.localeMatcher,
            numeric: (null == n ? void 0 : n.numeric) ||
            'auto',
            style: null == n ? void 0 : n.style
          }
        ).format(o, r)
      }
      const nr = {
        seconds: 1000,
        minutes: xi,
        hours: Ai,
        days: Ni,
        weeks: Ci,
        months: 1000 * Ui,
        years: 1000 * Li
      };
      function ir(time, e, t, n) {
        let {
          unit: r
        }
        = e,
        o = t,
        c = new Intl.RelativeTimeFormat(o, {
          ...e
        });
        return n &&
        (
          n.locale &&
          (o = n.locale),
          n.unit &&
          ({
            unit: r
          }
          = n),
          c = new Intl.RelativeTimeFormat(o, {
            ...e,
            ...n
          })
        ),
        c.format(
          function (time) {
            return time > 0 ? Math.floor(time) : Math.ceil(time)
          }(time),
          r
        )
      }
      function rr(e, t) {
        if (e < nr[t]) return t.slice(0, - 1)
      }
      function ar(e, t) {
        let {
          options: n,
          isVue3: r
        }
        = t;
        e.$r = function (time) {
          let e = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          try {
            const {
              i18nInstances: t,
              dateTimeFormats: o
            }
            = function (e, t, n) {
              const r = Ii(e, t, n);
              let o = 'datetimeFormats';
              const c = [
                r.localI18n
              ];
              return n ||
              (c.push(r.rootI18n), o = 'dateTimeFormats'),
              {
                i18nInstances: c,
                dateTimeFormats: o
              }
            }(this, n, r);
            let {
              config: c = null,
              locale: l = null
            }
            = Ei(t, o, 'relativeTime');
            return c &&
            l ? time instanceof Date ? function (time, e, t) {
              const n = new Date;
              return er(time, n, {
                unit: rr(Math.abs(time - n), e),
                locale: t
              })
            }(time, e.minimumUnit, l) : ir(time, c, l, e) : (
              console.warn('[i18n RelativeTime Plugin]: Configurations not found'),
              time
            )
          } catch (e) {
            return console.warn('[i18n RelativeTime Plugin]: '.concat(e)),
            time
          }
        }
      }
      const or = [
        'byte',
        'kilobyte',
        'megabyte',
        'gigabyte',
        'terabyte',
        'petabyte'
      ],
      sr = {
        style: 'unit',
        unit: 'byte',
        unitDisplay: 'narrow'
      };
      function cr(e) {
        if (0 === e) return or[0];
        const t = Math.floor(Math.log(e) / Math.log(1024));
        return t >= or.length ? or[or.length - 1] : or[t]
      }
      function lr(e) {
        const t = Math.round(10 * e) / 10;
        return 1 === Math.round(Math.log(t) / Math.log(1024)) ? Math.trunc(10 * e) / 10 : t
      }
      function ur(e) {
        let {
          isVue3: t,
          options: n
        }
        = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
          isVue3: !1
        };
        e.$f = function (e) {
          const r = function (e, t, n) {
            return n ? t.i18n : e.$i18n
          }(this, n, t),
          {
            locale: o = 'en'
          }
          = r,
          c = {
            ...sr,
            unit: cr(e)
          };
          return new Intl.NumberFormat(o, c).format(
            function (e) {
              if (0 === e) return 0;
              const t = Math.floor(Math.log(e) / Math.log(1024));
              return t <= 1 ? Math.floor(e / 1024**t) : t < or.length ? lr(e / 1024**t) : lr(e / 1024**(or.length - 1))
            }(e)
          )
        }
      }
      var dr = () => ({
        install(e, t) {
          const n = '3' === e.version[0],
          r = function (e, t) {
            return t ? e.config.globalProperties : e.prototype
          }(e, n),
          o = {
            options: t,
            isVue3: n
          };
          var c;
          Si(r, {
            isVue3: n,
            initialOptions: t
          }),
          _i(r, o),
          ar(r, o),
          ur(r, o),
          c = r,
          t ||
          (c.$localePrefix = e => e)
        }
      }),
      mr = n(61);
      const fr = dr(r.default);
      r.default.use(fr, (() => {
      }));
      var pr = (e, t) => {
        var n;
        const {
          store: o
        }
        = e;
        t('currencyRate', r.default.observable({
          currency: 'USD',
          rate: 1
        })),
        t('nc', r.default.prototype.$nc);
        const c = null === (n = o.state.currency) ||
        void 0 === n ? void 0 : n.currencyRate;
        c &&
        (
          o.$currencyRate.currency = c.currency,
          o.$currencyRate.rate = c.rate
        ),
        t(
          'localePrefix',
          function (e) {
            const t = path => _.some((e => path.startsWith('/'.concat(e))));
            return function (n) {
              const r = e.$localeFromUrl;
              if (!r || !n) return n;
              if (n.startsWith('/')) return t(n) ? n : '/'.concat(r).concat(n);
              let o;
              try {
                o = new URL(n)
              } catch (e) {
                return n
              }
              const c = window.location.host;
              return o.host !== c ||
              t(o.pathname) ? n : (o.pathname = '/'.concat(r).concat(o.pathname), o.toString())
            }
          }(e)
        ),
        r.default.component(mr.a.name, mr.a)
      },
      gr = {
        'en-gb': 'GBP',
        'en-us': 'USD'
      },
      vr = {
        US: 'en-us',
        GB: 'en-gb'
      };
      function yr(e, component, t) {
        return '{\n    componentUserPreferences(\n      input: {globalOrganization: '.concat(e, ',component: "').concat(component, '", prefKey: "').concat(
          t,
          '" }\n    ) {\n      componentName\n      preferences {\n        key\n        value\n      }\n    }\n  } '
        )
      }
      function wr(e, component, t) {
        return '\n    mutation {\n      createComponentUserPreferences(\n        input: {\n          component: "'.concat(component, '"\n          globalOrganization: ').concat(e, '\n          preferences: [').concat(
          t.map(
            (
              e => '{ key: "'.concat(e.key, '", value: "').concat(e.value, '" }')
            )
          ),
          ']\n        }\n      )\n    }'
        )
      }
      async function kr(e, t, n, r, o) {
        let {
          $httpGql: c,
          $logger: l
        }
        = e;
        const d = Array.isArray(r) ? r : [
          {
            key: r,
            value: o
          }
        ];
        try {
          return await c({
            requestAlias: 'set-user-pref',
            handleApiErrors: !1,
            auth: !0
          }).post({
            query: wr(t, n, d)
          }).json(),
          !0
        } catch (e) {
          l.error(e)
        }
        return !1
      }
      async function Sr(e, t, n, r, o) {
        let {
          $httpGql: c,
          $logger: l
        }
        = e;
        if (!n) return null;
        try {
          var d;
          const e = null === (
            d = (
              await c({
                requestAlias: 'get-user-pref',
                cache: {
                  strategy: 'cacheAndNetwork',
                  invalidateCache: o
                },
                handleApiErrors: !1,
                auth: !0
              }).post({
                query: yr(t, n, r)
              }).json()
            ).data
          ) ||
          void 0 === d ||
          null === (d = d.componentUserPreferences) ||
          void 0 === d ? void 0 : d.preferences;
          if (e && e.length > 0) return r ? e[0].value : e
        } catch (e) {
          l.error(e)
        }
        return null
      }
      const Tr = 'i18nGA',
      Er = 'CI15674i18nUser',
      Ir = 'CI15674i18nVisitor',
      _r = 'i18nOn',
      Cr = 'vlang',
      Nr = 'ulang',
      xr = 'vcurr',
      Ar = 'ucurr',
      Or = 'en-gb',
      Dr = 'GBP',
      Rr = 'USD';
      function Pr(e, t) {
        let[n,
        r] = t;
        n &&
        e.$cookies.set(
          ''.concat(e.config.cookiePrefix).concat(Cr),
          n,
          {
            path: '/',
            maxAge: 32140800
          }
        ),
        r &&
        e.$cookies.set(
          ''.concat(e.config.cookiePrefix).concat(xr),
          r,
          {
            path: '/',
            maxAge: 32140800
          }
        )
      }
      function Lr(e, t) {
        let[n,
        r] = t;
        n &&
        e.$cookies.set(''.concat(e.config.cookiePrefix).concat(Nr), n, {
          path: '/'
        }),
        r &&
        e.$cookies.set(''.concat(e.config.cookiePrefix).concat(Ar), r, {
          path: '/'
        })
      }
      function Ur(e) {
        const t = e.$cookies.get(''.concat(e.config.cookiePrefix).concat(Cr)),
        n = e.$cookies.get(''.concat(e.config.cookiePrefix).concat(xr));
        return t ? [
          t,
          n
        ] : void 0
      }
      function Fr(e) {
        const t = e.$cookies.get(''.concat(e.config.cookiePrefix).concat(Nr)),
        n = e.$cookies.get(''.concat(e.config.cookiePrefix).concat(Ar));
        return t ? [
          t,
          n
        ] : void 0
      }
      function Mr(e) {
        return Promise.all(
          [Sr(e, !0, 'i18nl10n', 'locale', !0),
          Sr(e, !0, 'i18nl10n', 'currencyCode', !0)]
        )
      }
      async function $r(e, t) {
        let[n,
        r] = t;
        return kr(
          e,
          !0,
          'i18nl10n',
          [
            n ? {
              key: 'locale',
              value: n
            }
             : void 0,
            r ? {
              key: 'currencyCode',
              value: r
            }
             : void 0
          ].filter(Boolean)
        )
      }
      async function qr(e, t, n, r) {
        r &&
        (Lr(e, [
          t,
          n
        ]), await $r(e, [
          t,
          n
        ])),
        Pr(e, [
          t,
          n
        ])
      }
      async function jr(e) {
        return 'GB' === await Vr(e)
      }
      async function Vr(e) {
        return await e.store.dispatch('geo/load'),
        (e.store.state.geo.countryCode || '').toUpperCase()
      }
      async function Gr(e) {
        if (!await jr(e)) return;
        if (
          await async function (e) {
            return Object(qt.a) (
              e.store,
              {
                qt: [
                  {
                    name: Er,
                    fallback: 'Control',
                    ff: {
                      name: _r,
                      fallback: !1
                    }
                  }
                ],
                auth: !0
              }
            )
          }(e),
          'Treatment' !== e.store.state.flags.qt[Er]
        ) return;
        const t = Fr(e);
        if (t) return t;
        const n = await Mr(e);
        if (n[0]) return Pr(e, n),
        Lr(e, n),
        n;
        const r = Ur(e);
        return r ? (Lr(e, r), $r(e, r), r) : (qr(e, Or, Dr, !0), [
          Or,
          Dr
        ])
      }
      async function Br(e) {
        if (!await jr(e)) return;
        if (
          await async function (e) {
            return Object(qt.a) (
              e.store,
              {
                qt: [
                  {
                    name: Ir,
                    fallback: 'Control',
                    isVisitor: !0,
                    ff: {
                      name: _r,
                      fallback: !1
                    }
                  }
                ],
                auth: !1
              }
            )
          }(e),
          'Treatment' !== e.store.state.flags.qt[Ir]
        ) return;
        const t = Ur(e);
        return t ||
        (Pr(e, [
          Or,
          Dr
        ]), [
          Or,
          Dr
        ])
      }
      async function zr(e, t) {
        let n = function (e) {
          const t = e.split('/') [1];
          return _.includes(t) ? t : null
        }(window.location.pathname);
        const r = e.$cookies.get(''.concat(e.config.cookiePrefix, 'oauth2_global_js_token')) ||
        !e.config.visitorClientId &&
        !e.hasAuthConfig,
        o = await async function (e) {
          return await Object(qt.a) (e.store, {
            ff: [
              {
                name: Tr,
                fallback: !1
              }
            ],
            auth: !1
          }),
          e.store.state.flags.ff[Tr]
        }(e);
        let c,
        l;
        t('isI18nGA', o),
        [
          c,
          l
        ] = o ? await(
          r ? async function (e, t) {
            const n = Fr(e);
            if (n) return n;
            const r = await Mr(e);
            if (r[0]) return Pr(e, r),
            Lr(e, r),
            r;
            const o = Ur(e);
            if (o) return Lr(e, o),
            $r(e, o),
            o;
            const c = await Vr(e),
            l = vr[c];
            if (l) {
              const t = gr[l] ||
              Rr;
              return qr(e, l, t, !0),
              [
                l,
                t
              ]
            }
            if (t) return [t,
            gr[t] ||
            Rr]
          }(e, n) : async function (e, t) {
            const n = Ur(e);
            if (n) return n;
            if (t) return [t,
            gr[t] ||
            Rr]
          }(e, n)
        ) ||
        [] : await(r ? Gr(e) : Br(e)) ||
        [];
        const d = o ||
        !!c;
        if (
          t('hasI18nSelector', d),
          t('currencyCode', l || Rr),
          t('setCurrencyCode', (e => {
            t('currencyCode', e)
          })),
          t('setLocaleAndCurrency', ((t, n) => qr(e, t, n, r))),
          c &&
          n !== c
        ) {
          n = c === e.i18n.defaultLocale ? '' : c;
          {
            const {
              router: t
            }
            = e.app,
            {
              originalBase: r
            }
            = t.options,
            o = ''.concat(n ? '/' : '').concat(n).concat(r.replace(/\/$/, ''));
            t.options.base = o,
            t.history.base = o
          }
          await e.i18n.setLocale(n)
        } else n &&
        await e.i18n.setLocale(n);
        t('localeFromUrl', n || null);
        const m = await Vr(e),
        h = m &&
        vr[m];
        let f = null;
        var v;
        (
          o &&
          !r &&
          !Ur(e) &&
          h &&
          h !== e.i18n.locale &&
          (f = {
            locale: h,
            currency: gr[h]
          }),
          t('localeBanner', f),
          Dt(e.store),
          d
        ) &&
        (
          (
            !o ||
            h &&
            h === e.i18n.locale &&
            e.i18n.locale !== e.i18n.defaultLocale
          ) &&
          e.store.commit('currency/setCurrencyPopupShow', !0),
          null !== (v = e.store.state.currency) &&
          void 0 !== v &&
          v.currencyCode &&
          e.$currencyCode !== e.store.state.currency.currencyCode &&
          await e.store.dispatch('currency/setCodeAndLoadRate', e.$currencyCode)
        );
        if (n) {
          {
            const base = document.head.querySelector('base');
            base &&
            (base.href = e.app.router.options.base)
          }
          return
        }
        const y = e.route.query.locale_override;
        var w;
        if (y) if (e.store.state.vpn && e.store.state.vpn.loaded) {
          if (null !== (w = e.store.state.vpn) && void 0 !== w && w.isVpn) return await e.i18n.setLocale(y),
          void e.$cookies.set('locale_override', y)
        } else e.store.subscribe(
          (
            t => {
              'vpn/setIsVpn' === t.type &&
              e.$cookies.set('locale_override', y)
            }
          )
        );
        const k = e.$cookies.get('locale_override');
        k &&
        await e.i18n.setLocale(k)
      }
      function Hr(e) {
        return 'object' == typeof e ? Object.fromEntries(Object.entries(e).map((e => {
          const [t,
          n] = e;
          return [t,
          Hr(n)]
        }))) : e
      }
      const Qr = {
        beforeCreate() {
          var e;
          const t = null === (e = this.$options) ||
          void 0 === e ? void 0 : e.i18n;
          if (!t || !this.$i18nTranslation || !t.messages) return;
          const {
            defaultLocale: n,
            languages: r
          }
          = this.$i18nTranslation,
          {
            messages: o
          }
          = t,
          c = n.split('-') [0],
          l = o[n] ||
          o[c];
          if (!l) return;
          const d = Object.keys(l);
          r.forEach(
            (
              e => {
                const n = e.split('-') [0],
                r = o[e] ||
                o[n];
                if (0 === Object.keys(r).length) {
                  const {
                    messagesNonDefaultLocale: r
                  }
                  = this.$i18nTranslation,
                  o = {},
                  c = r[e] ||
                  r[n];
                  d.forEach((e => {
                    const t = c[e];
                    t &&
                    (o[e] = Hr(t))
                  })),
                  t.messages[e] = o
                }
              }
            )
          )
        }
      };
      var Wr = {
        install(e) {
          e.mixin(Qr)
        }
      };
      function Kr(e, t) {
        const {
          defaultLocale: n,
          loadedLanguages: r
        }
        = e.app.context.i18n,
        o = {},
        c = [];
        r.filter((e => e !== n)).forEach(
          (
            t => {
              let n;
              n = e.app.context.i18n.messages[t],
              n &&
              (o[t] = n, c.push(t))
            }
          )
        );
        const l = {
          defaultLocale: n,
          messagesNonDefaultLocale: o,
          languages: c
        };
        e.$i18nTranslation = l,
        t('i18nTranslation', l)
      }
      r.default.use(Wr);
      let Jr = !1;
      n(182);
      function Xr() {
        !function () {
          const e = [
            'Tab',
            'ArrowRight',
            'ArrowLeft',
            'ArrowDown',
            'ArrowUp',
            'PageUp',
            'PageDown',
            'Home',
            'End',
            'Esc'
          ],
          t = [
            'Shift',
            'Control',
            'Alt',
            'Meta'
          ];
          let n;
          const r = e => {
            n ||
            'BUTTON' === e.target.nodeName ||
            (Jr = !1, document.body.classList.remove('keyboard-user'))
          };
          document.addEventListener(
            'keydown',
            (
              r => {
                - 1 !== e.indexOf(r.key) &&
                (Jr = !0, document.body.classList.add('keyboard-user')),
                n = - 1 !== t.indexOf(r.key)
              }
            ),
            {
              passive: !0
            }
          ),
          document.addEventListener('pointerdown', r, {
            passive: !0
          }),
          document.addEventListener('touchmove', r, {
            passive: !0
          }),
          document.addEventListener(
            'mousedown',
            (
              e => {
                e.target !== document.documentElement &&
                e.target !== document.body ||
                document.querySelectorAll('[inert]').forEach((element => {
                  element.removeAttribute('inert')
                }))
              }
            ),
            {
              passive: !0
            }
          )
        }()
      }
      var Zr = (e, t) => {
        let {
          req: n,
          $isCacheable: r
        }
        = e;
        const o = k(navigator.userAgent);
        t('isNativeApp', o),
        o &&
        document.body.classList.add('is-mobile-app')
      };
      var Yr = e => {
        if (e.$isNativeApp) {
          de.a.on(
            'up/page/v1/NATIVE_TRANSITION_INFO',
            'no_id',
            (
              e => t => {
                let {
                  transitionStarted: n,
                  transitionFinished: r
                }
                = t;
                const o = r - n;
                e.$rumLogger &&
                e.$rumLogger.sendTiming('nativeTransition', o)
              }
            ) (e)
          );
          const t = e.app.router.afterEach(
            (
              () => {
                t(),
                function () {
                  var e;
                  const t = () => {
                    de.a.postMessage({
                      type: 'up/page/v1/STATE_CHANGED',
                      payload: {
                        id: 'state-update',
                        state: 'rendered'
                      }
                    })
                  };
                  null !== (e = window) &&
                  void 0 !== e &&
                  e.requestAnimationFrame ? window.requestAnimationFrame(t) : setTimeout(t, 20)
                }()
              }
            )
          )
        }
      },
      ea = e => {
        Yr(e)
      };
      const ta = {
        install(e, t) {
          let o = null;
          async function c() {
            var e;
            return o = null !== (e = o) &&
            void 0 !== e ? e : async function (e) {
              let t = null,
              o = () => null;
              await Promise.all(
                [n.e(125).then(n.bind(null, 1168)).then((e => {
                  o = e.default ||
                  e
                })),
                Promise.all([n.e(2),
                n.e(145),
                n.e(149)]).then(n.bind(null, 1189)).then((e => {
                  t = e.default ||
                  e
                }))]
              );
              const c = o();
              if (!c.hasContainer()) {
                const n = new (r.default.extend({
                  i18n: e
                })) ({
                  ...t,
                  propsData: {
                    vueRoot: window.$nuxt
                  }
                });
                c.setContainer(n),
                n.$mount(),
                document.body.appendChild(n.$el)
              }
              return c
            }(t),
            o
          }
          r.default.prototype.createToaster = async e => (await c()).getContainer().addToaster(e)
        }
      };
      function na(e) {
        let {
          i18n: t
        }
        = e;
        r.default.use(ta, t)
      }
      var ia,
      ra = function (e, t) {
        return e(t = {
          exports: {
          }
        }, t.exports),
        t.exports
      }(
        (
          function (e, t) {
            Object.defineProperty(t, '__esModule', {
              value: !0
            });
            t.isiOS = function (e) {
              return /(iPad|iPhone|iPod)/gi.test(e)
            },
            t.isAndroid = function (e) {
              return /(Android)/gi.test(e)
            }
          }
        )
      );
      (ia = ra) &&
      ia.__esModule &&
      Object.prototype.hasOwnProperty.call(ia, 'default') &&
      ia.default;
      var aa = ra.isiOS,
      oa = (
        ra.isAndroid,
        function (e) {
          return [e].concat(
            ['width=device-width',
            'initial-scale=1',
            'maximum-scale=1',
            'user-scalable=no'].filter((function (t) {
              return !e.includes(t)
            }))
          ).filter(Boolean).join(', ')
        }
      ),
      sa = e => {
        let {
          app: t,
          req: n,
          $isCacheable: r
        }
        = e;
        const o = t.head.meta.find((e => {
          let {
            hid: t
          }
          = e;
          return 'viewport' === t
        }));
        if (!o) throw new Error('Unable to find viewport meta tag');
        var c,
        l;
        o.content = (c = window.navigator.userAgent, l = o.content, aa(c) ? oa(l) : l)
      };
      const ca = () => ({
        width: null,
        mobile: !1,
        desktop: !1,
        tablet: !1
      }),
      la = {
        setWidth(e, t) {
          e.width = t
        },
        setMobile(e, t) {
          e.mobile = t
        },
        setTablet(e, t) {
          e.tablet = t
        },
        setDesktop(e, t) {
          e.desktop = t
        }
      };
      function ua(e) {
        let t,
        {
          store: n,
          $cookies: r
        }
        = e;
        !async function (e) {
          e.hasModule('umq') ||
          e.registerModule(
            'umq',
            {
              namespaced: !0,
              state: ca,
              mutations: la
            },
            {
              preserveState: !!e.state.umq
            }
          )
        }(n);
        const o = () => {
          t = ''.concat(window.innerWidth),
          r.set('umq', t, {
            maxAge: 15552000
          })
        };
        t = r.get('umq'),
        t ||
        o(),
        window.addEventListener(
          'beforeunload',
          (() => {
            t !== ''.concat(window.innerWidth) &&
            o()
          }),
          {
            passive: !0,
            once: !0
          }
        )
      }
      var da = e => {
        ua(e)
      };
      var ma = function (e, t) {
        let {
          store: r,
          $cookies: o
        }
        = e;
        t(
          'cookieConsent',
          (
            async() => {
              let e = function (e) {
                let t;
                const n = () => t ||
                e.get('OptanonConsent').split('&').filter((q => /^groups=/.test(q))).pop() ||
                '',
                r = (e, t) => t.includes(''.concat(e, ':1'));
                return {
                  isNecessaryAllowed: () => r('C0001', n()),
                  isPerformanceAllowed: () => r('C0002', n()),
                  isFunctionalAllowed: () => r('C0003', n()),
                  isTargetingAllowed: () => r('C0004', n()),
                  isSupported: () => (t = e.get('OptanonConsent'), !!t)
                }
              }(o);
              if (!e.isSupported()) {
                const t = (await n.e(82).then(n.bind(null, 1169))).default;
                e = await t({
                  store: r
                })
              }
              return {
                isNecessaryAllowed: () => e.isNecessaryAllowed(),
                isPerformanceAllowed: () => e.isPerformanceAllowed(),
                isFunctionalAllowed: () => e.isFunctionalAllowed(),
                isTargetingAllowed: () => e.isTargetingAllowed()
              }
            }
          )
        )
      };
      var ha = (e, t) => {
        const {
          setGtmData: n
        }
        = function (e) {
          let {
            config: t,
            store: n,
            app: r
          }
          = e;
          function o() {
            var e;
            const {
              cookiePrefix: o
            }
            = t,
            c = {
              site: {
                application: t.serviceName ||
                '',
                version: t.version ||
                '',
                environment: t.env
              },
              user: {
                userAgent: navigator.userAgent,
                visitor_id: n.state.visitor.id,
                recognized: !!r.$cookies.get(''.concat(o, 'recognized')),
                loggedIn: n.getters['context/isUser'],
                internal: n.state.vpn.isVpn,
                ...n.getters['context/isUser'] ? {
                  user_id: n.state.user.id,
                  'primary-type': (
                    l = n.state.orgs.current.legacyType,
                    d = n.state.orgs.current.type,
                    'CLIENT' === l ? 'client' : 'VENDOR' === l &&
                    'BUSINESS' === d ? 'agency' : 'VENDOR' === l &&
                    'SOLE_PROPRIETOR' === d ? 'freelancer' : 'undefined'
                  )
                }
                 : {
                }
              }
            };
            var l,
            d;
            r.$isNativeApp &&
            (
              c.mobile_native_app = function (e) {
                const {
                  platform: t,
                  version: n
                }
                = function (e) {
                  const t = e.match(
                    /Upwork (iOS|Android)\/(\d+\.\d+\.\d+)(?:\s\((Freelancer|Client)\))?/
                  );
                  return {
                    platform: t[1],
                    version: t[2],
                    type: t[3]
                  }
                }(e);
                return {
                  platform: t,
                  version: n
                }
              }(navigator.userAgent)
            ),
            null === (e = window.dataLayer) ||
            void 0 === e ||
            e.push(c)
          }
          if (
            async function () {
              var e;
              await n.dispatch('context/ready'),
              o(),
              null === (e = window.dataLayer) ||
              void 0 === e ||
              e.push({
                'gtm.start': (new Date).getTime(),
                event: 'gtm.js'
              })
            }(),
            t.gtmId
          ) {
            const e = document.createElement('script');
            e.innerHTML = 'window.dataLayer = window.dataLayer || []',
            document.head.appendChild(e);
            const script = document.createElement('script');
            script.src = '//www.googletagmanager.com/gtm.js?id='.concat(t.gtmId),
            script.async = !0,
            document.head.appendChild(script)
          }
          return {
            setGtmData: o
          }
        }(e);
        t('setGtmData', n)
      },
      fa = n(28);
      var pa = (e, t) => {
        let n = 0,
        r = !1,
        o = null;
        const c = () => {
          l(),
          'function' == typeof t &&
          t({
            metricName: 'tbt',
            data: n
          })
        },
        l = () => {
          o &&
          (clearTimeout(o), o = null)
        },
        d = () => {
          o ||
          (
            o = setTimeout(
              (
                () => {
                  var e;
                  r = !0,
                  e = c,
                  'function' == typeof window.requestIdleCallback ? window.requestIdleCallback(e, {
                    timeout: 3000
                  }) : e()
                }
              ),
              5000
            )
          )
        };
        d();
        const m = (
          (e, t) => {
            try {
              if (PerformanceObserver.supportedEntryTypes.includes(e)) {
                if (
                  'first-input' === e &&
                  'function' != typeof window.PerformanceEventTiming
                ) return;
                const n = new PerformanceObserver((e => e.getEntries().map(t)));
                return n.observe({
                  type: e,
                  buffered: !0
                }),
                n
              }
            } catch (e) {
            }
          }
        ) (
          'longtask',
          (
            t => {
              if ('self' !== t.name || t.startTime < e || r) return;
              const o = t.duration - 50;
              o > 0 &&
              (n += o),
              l(),
              d()
            }
          )
        );
        m &&
        (
          (e, t) => {
            const n = r => {
              'pagehide' !== r.type &&
              'hidden' !== document.visibilityState ||
              (
                e(r),
                t &&
                (
                  window.removeEventListener('visibilitychange', n, !0),
                  window.removeEventListener('pagehide', n, !0)
                )
              )
            };
            window.addEventListener('visibilitychange', n, !0),
            window.addEventListener('pagehide', n, !0)
          }
        ) ((() => {
          m.disconnect()
        }), !0)
      };
      const ga = 'redirectTime';
      const va = [
        'api',
        'app'
      ],
      ya = e => 'ttfb'.concat(e.charAt(0).toUpperCase() + e.slice(1)),
      wa = function () {
        let {
          endPoint: e,
          rate: t = 0.5,
          pageId: r,
          pageLabel: o,
          ignoreSamplingRate: c = !1,
          renderType: l,
          presentationType: d,
          appVersion: m,
          beforeSendMiddleware: h = (() => {
          }),
          reportOnly: f = !1
        }
        = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : {
        };
        const v = function (e) {
          let t = !(arguments.length > 1 && void 0 !== arguments[1]) ||
          arguments[1];
          const n = (
            e => 'object' != typeof e ? 'object is absent' : e.hasOwnProperty('metrics') ? e.hasOwnProperty('context') ? e.hasOwnProperty('sampleRate') ? 'undefined' !== e.context.pageId &&
            void 0 !== e.context.pageId &&
            e.context.pageId ? '' : 'pageId is undefined' : 'sampleRate is absent' : 'context section is absent' : 'metrics section is absent'
          ) (e);
          if (n) {
            const t = new Error(
              'Incorrect RUM object, '.concat(n, ', rum: ').concat(JSON.stringify(e))
            );
            throw t.level = 'warn',
            t
          }
          const r = Object.assign(e, {
            v: '1.0'
          });
          return t ? JSON.stringify(r) : r
        },
        y = {
          sendMetric: function (e) {
            let r = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : {
            };
            const o = {
              sampleRate: t,
              metrics: e.map(
                (
                  e => {
                    let {
                      metricName: t,
                      data: data,
                      webVitalMetric: n
                    }
                    = e;
                    const r = {
                      name: t,
                      value: data
                    };
                    return n &&
                    (r.webVitalMetric = n),
                    r
                  }
                )
              ),
              context: {
                pageId: y.pageId,
                pageLabel: y.pageLabel,
                renderType: y.renderType,
                visitorType: y.presentationType,
                appVersion: y.appVersion,
                ...r
              }
            };
            if (h(o), f) {
              const e = v(o, !1);
              n.e(119).then(n.bind(null, 1170)).then(
                (t => {
                  (t.default || t) (e)
                }),
                (e => {
                  console.error('Reporter not loaded', e)
                })
              )
            } else {
              const e = v(o, !0);
              (
                (e, t) => {
                  if (!t) return;
                  let n;
                  if (navigator.sendBeacon && Blob) {
                    const r = new Blob([t], {
                      type: 'application/json'
                    });
                    n = navigator.sendBeacon(e, r)
                  }
                  n ||
                  fetch(
                    e,
                    {
                      method: 'post',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: t,
                      keepalive: !0
                    }
                  )
                }
              ) (y.endPoint, e)
            }
          },
          endPoint: e,
          rate: t,
          pageId: r,
          pageLabel: o,
          ignoreSamplingRate: c,
          renderType: l,
          presentationType: d,
          appVersion: m
        };
        return y
      },
      ba = () => {
        if ('connection' in navigator) return {
          networkType: navigator.connection.effectiveType
        }
      };
      var ka = () => ({
        ...ba()
      });
      var Sa = function () {
        let {
          endPoint: e,
          delayTime: t,
          rate: n,
          pageId: r,
          pageLabel: o,
          namespacePrefix: c,
          context: l,
          backends: d,
          beforeSendMiddleware: m,
          renderType: h,
          presentationType: f,
          isTrackingEnabled: v,
          appVersion: y,
          reportOnly: w
        }
        = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : {
        };
        d.push(
          wa({
            endPoint: e,
            rate: n,
            pageId: r,
            pageLabel: o,
            namespacePrefix: c,
            context: l,
            renderType: h,
            presentationType: f,
            appVersion: y,
            beforeSendMiddleware: m,
            reportOnly: w
          })
        );
        let k = [];
        const S = ka(),
        T = (e, t) => {
          d.forEach((n => {
            n[e] = t
          }))
        },
        E = () => {
          d.forEach(
            (
              e => {
                (v || e.ignoreSamplingRate) &&
                k.length > 0 &&
                e.sendMetric(k, S)
              }
            )
          ),
          k = []
        },
        I = e => function () {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : {
          };
          const {
            metricName: n,
            data: data,
            webVitalMetric: o
          }
          = e;
          if (Number.isNaN(data) || data < 0 || void 0 === data || void 0 === n) return void console.warn('Incorrect value %f, of metric: %s', data, n);
          const c = {
            metricName: n,
            data: 'function' == typeof data.toFixed ? data.toFixed(3) : data
          };
          o &&
          (c.webVitalMetric = o),
          k.push(c),
          k.length > 0 &&
          void 0 !== r &&
          setTimeout(E, t)
        }(e);
        return Object.defineProperty(
          I,
          'pageId',
          {
            set(e) {
              const t = void 0 !== r,
              n = void 0 !== e &&
              k.length > 0;
              t &&
              n &&
              E(),
              r = e,
              T('pageId', e),
              !t &&
              n &&
              E()
            },
            get: () => r
          }
        ),
        Object.defineProperty(I, 'pageLabel', {
          set(e) {
            o = e,
            T('pageLabel', e)
          },
          get: () => o
        }),
        Object.defineProperty(I, 'endPoint', {
          set(t) {
            e = t,
            T('endPoint', t)
          },
          get: () => e
        }),
        Object.defineProperty(I, 'rate', {
          set(e) {
            n = e,
            T('rate', e)
          },
          get: () => n
        }),
        Object.defineProperty(I, 'delayTime', {
          set(e) {
            t = e,
            T('delayTime', e)
          },
          get: () => t
        }),
        Object.defineProperty(
          I,
          'namespacePrefix',
          {
            set(e) {
              c = e,
              T('namespacePrefix', e)
            },
            get: () => c
          }
        ),
        Object.defineProperty(I, 'context', {
          set(e) {
            l = e,
            T('context', e)
          },
          get: () => l
        }),
        Object.defineProperty(
          I,
          'presentationType',
          {
            set(e) {
              f = e,
              T('presentationType', e)
            },
            get: () => f
          }
        ),
        Object.defineProperty(I, 'backends', {
          set(e) {
            d = e,
            T('context', e)
          },
          get: () => d
        }),
        I.sendMetrics = () => {
          E()
        },
        I
      };
      const Ta = {
        LCP: 2500,
        FID: 100,
        CLS: 0.1,
        INP: 200
      };
      class Ea {
        constructor(e) {
          this.pageId = void 0,
          this.apiEndpoint = void 0,
          this.delay = void 0,
          this.queue = void 0,
          this.enabled = void 0,
          this.pageId = e.pageId,
          this.apiEndpoint = e.apiEndpoint,
          this.delay = e.delay,
          this.enabled = e.enabled,
          this.queue = []
        }
        setPageId(e) {
          e &&
          (this.pageId = e, this.send())
        }
        send() {
          if (this.pageId && this.queue.length > 0) {
            const data = {
              metrics: this.queue,
              context: {
                pageId: this.pageId
              }
            };
            (
              (e, t) => {
                let n;
                if (navigator.sendBeacon && Blob) {
                  const r = new Blob([JSON.stringify(t)], {
                    type: 'application/json'
                  });
                  n = navigator.sendBeacon(e, r)
                }
                n ||
                fetch(
                  e,
                  {
                    method: 'post',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(t),
                    keepalive: !0
                  }
                )
              }
            ) (this.apiEndpoint, data),
            this.queue = []
          }
        }
        trackMetric(e, t, n) {
          this.enabled &&
          (
            this.queue.push(
              (
                (e, t, n) => {
                  const r = {
                    name: e.toLowerCase(),
                    value: Math.round(1000 * t) / 1000
                  };
                  switch (
                      n.url &&
                      (
                        r.url = (
                          e => {
                            if (e && 'string' == typeof e) return e.length > 200 ? e.slice(0, 197) + '...' : e
                          }
                        ) (n.url)
                      ),
                      e
                    ) {
                    case 'LCP':
                      r.element = n.element,
                      r.renderTime = n.renderTime;
                      break;
                    case 'FID':
                      r.element = n.eventTarget,
                      r.eventType = n.eventType,
                      r.loadState = n.loadState;
                      break;
                    case 'CLS':
                      r.element = n.largestShiftTarget,
                      r.time = n.largestShiftTime,
                      r.loadState = n.loadState;
                      break;
                    case 'INP':
                      r.element = n.eventTarget,
                      r.time = n.eventTime,
                      r.eventType = n.eventType,
                      r.loadState = n.loadState;
                      const {
                        eventEntry: e
                      }
                      = n;
                      if (e) {
                        const t = Math.max(e.processingEnd + 4, e.startTime + e.duration);
                        r.inpInputDelay = Math.round(e.processingStart - e.startTime, 0),
                        r.inpProcessingTime = Math.round(e.processingEnd - e.processingStart, 0),
                        r.inpPresentationDelay = Math.round(t - e.processingEnd, 0)
                      }
                  }
                  return r
                }
              ) (e, t, n)
            ),
            void 0 !== this.pageId &&
            setTimeout((() => {
              this.send()
            }), this.delay)
          )
        }
        isGoodMetric(e, t) {
          return t <= Ta[e]
        }
        isTrackedMetric(e) {
          return void 0 !== Ta[e]
        }
      }
      var Ia = n(142);
      var _a = e => {
        window.performance.measure(e, 'mark_'.concat(e, '_start'), 'mark_'.concat(e, '_end'));
        const t = window.performance.getEntriesByName(e).pop();
        return t &&
        'measure' === t.entryType ? t.duration : - 1
      };
      var Ca = function (e) {
        let {
          backends: t = [],
          beforeSendMiddleware: n,
          endPoint: r = '/upi/metrics/rum/v1',
          delayTime: o = 1000,
          rate: c = 1,
          pageId: l,
          pageLabel: d,
          namespacePrefix: m,
          context: h = '',
          renderType: f = 'client',
          presentationType: v,
          extSampling: y = !1,
          debugApiEndpoint: w = '/upi/metrics/rum/debug',
          debugEnabled: k = !1,
          appVersion: S,
          reportOnly: T = !1
        }
        = e,
        E = f;
        [
          'client',
          'server'
        ].includes(f) ||
        (E = 'client');
        const I = !0 === y ||
        c >= Math.random(),
        _ = Sa({
          endPoint: r,
          delayTime: o,
          rate: c,
          pageId: l,
          pageLabel: d,
          namespacePrefix: m,
          context: h,
          backends: t,
          beforeSendMiddleware: n,
          renderType: E,
          presentationType: v,
          isTrackingEnabled: I,
          appVersion: S,
          reportOnly: T
        });
        let C = !1;
        I &&
        !T &&
        (C = !(!k && !0 !== y) || 1 / (100 * c) >= Math.random());
        const N = new Ea({
          pageId: l,
          apiEndpoint: w,
          delay: o,
          enabled: C
        }),
        x = new class {
          constructor(e) {
            let {
              analyticsTracker: t,
              debugTracker: n
            }
            = e;
            this.v = Ia.a,
            this.metrics = [],
            this.analyticsTracker = t,
            this.debugTracker = n;
            const r = e => {
              const {
                name: t,
                value: n,
                attribution: r
              }
              = e;
              r.url = window.location.pathname.concat(window.location.search),
              this.trackDebugMetric(t, n, r),
              this.analyticsTracker({
                metricName: this.normalizeMetricName(t),
                data: n,
                webVitalMetric: T ? e : null
              })
            },
            o = {};
            T &&
            (o.reportAllChanges = !0),
            Object(fa.h) (
              (
                e => {
                  const {
                    name: t,
                    value: n
                  }
                  = e;
                  this.analyticsTracker({
                    metricName: this.normalizeMetricName(t),
                    data: n,
                    webVitalMetric: T ? e : null
                  }),
                  pa(n, this.analyticsTracker)
                }
              ),
              o
            ),
            Object(fa.g) (r, o),
            Object(fa.k) (r, o),
            Object(fa.i) (r, o),
            Object(fa.l) (r, o),
            Object(fa.j) (r, o),
            function (e) {
              var t;
              const {
                performance: n
              }
              = window;
              if (!n || !n.getEntriesByType) return;
              const r = null === (t = n.getEntriesByType('navigation')) ||
              void 0 === t ? void 0 : t[0];
              if (!r) return;
              const o = r.redirectEnd - r.redirectStart;
              e({
                metricName: ga,
                data: o
              })
            }(this.analyticsTracker),
            (
              e => {
                if (performance && performance.getEntriesByType) for (
                  const {
                    serverTiming: t
                  }
                  of performance.getEntriesByType('navigation')
                ) if (t) for (const {
                  name: n,
                  duration: r
                }
                of t) va.includes(n) &&
                e({
                  metricName: ya(n),
                  data: r
                })
              }
            ) (this.analyticsTracker)
          }
          sendCustomTiming(e, data) {
            return this.analyticsTracker({
              metricName: e,
              data: data
            })
          }
          sendTiming(e, data) {
            return this.analyticsTracker({
              metricName: e,
              data: data
            })
          }
          start(e) {
            this.metrics[e] ||
            (
              this.metrics[e] = !0,
              window.performance.mark('mark_'.concat(e, '_start'))
            )
          }
          end(e) {
            if (!this.metrics[e]) return;
            window.performance.mark('mark_'.concat(e, '_end')),
            delete this.metrics[e];
            const t = _a(e);
            this.analyticsTracker({
              metricName: e,
              data: t
            })
          }
          endPaint(e, t) {
            setTimeout((() => {
              this.end(e, t)
            }))
          }
          trackDebugMetric(e, t, n) {
            this.debugTracker.isTrackedMetric(e) &&
            !this.debugTracker.isGoodMetric(e, t) &&
            this.debugTracker.trackMetric(e, t, n)
          }
          normalizeMetricName(e) {
            return (e || '').toLowerCase()
          }
          onLoad() {
            console.warn('window.perfume.onLoad() is deprecated')
          }
          set pageId(e) {
            void 0 !== e &&
            (
              this.analyticsTracker.pageId = e,
              this.debugTracker.setPageId(e)
            )
          }
          get pageId() {
            return this.analyticsTracker.pageId
          }
          set pageLabel(e) {
            void 0 !== e &&
            (this.analyticsTracker.pageLabel = e)
          }
          get pageLabel() {
            return this.analyticsTracker.pageLabel
          }
          set endPoint(e) {
            this.analyticsTracker.endPoint = e
          }
          get endPoint() {
            return this.analyticsTracker.endPoint
          }
          set rate(e) {
            this.analyticsTracker.rate = e
          }
          get rate() {
            return this.analyticsTracker.rate
          }
          set delayTime(e) {
            this.analyticsTracker.delayTime = e
          }
          get delayTime() {
            return this.analyticsTracker.delayTime
          }
          set namespacePrefix(e) {
            this.analyticsTracker.namespacePrefix = e
          }
          get namespacePrefix() {
            return this.analyticsTracker.namespacePrefix
          }
          set context(e) {
            this.analyticsTracker.context = e
          }
          get context() {
            return this.analyticsTracker.context
          }
          set presentationType(e) {
            this.analyticsTracker.presentationType = e
          }
          get presentationType() {
            return this.analyticsTracker.presentationType
          }
          set backends(e) {
            this.analyticsTracker.backends = e
          }
          get backends() {
            return this.analyticsTracker.backends
          }
        }({
          analyticsTracker: _,
          debugTracker: N,
          backends: t,
          endPoint: r,
          delayTime: o,
          rate: c,
          pageId: l,
          pageLabel: d,
          namespacePrefix: m,
          context: h,
          presentationType: v,
          renderType: E
        });
        return window &&
        window.addEventListener(
          'pagehide',
          (() => {
            _.sendMetrics(),
            N.send()
          }),
          {
            passive: !0,
            once: !0
          }
        ),
        x
      };
      function Na(e) {
        var t;
        return !(null !== (t = e.app.router.options) && void 0 !== t && t.routes)
      }
      async function xa(e) {
        var t;
        const {
          route: n,
          $logger: r,
          config: o
        }
        = e,
        meta = function (e) {
          return Array.isArray(e.meta) ? function (e, t) {
            for (let i = e.length - 1; i >= 0; i -= 1) if (t(e[i])) return e[i]
          }(e.meta, (e => e.pageId)) : e.meta
        }(n);
        let c,
        l,
        d;
        const m = Na(e);
        var h;
        (
          meta &&
          meta.pageId ||
          null !== (t = o.rum) &&
          void 0 !== t &&
          t.pageId &&
          m ||
          r.warn('required meta.pageId missed. Route ['.concat(n.name, ']')),
          meta &&
          (
            c = 'function' == typeof meta.pageId ? await meta.pageId(e) : meta.pageId,
            l = 'function' == typeof meta.pageLabel ? await meta.pageLabel(e) : meta.pageLabel,
            d = 'function' == typeof meta.presentationType ? meta.presentationType(e) : meta.presentationType
          ),
          !c &&
          m
        ) &&
        (c = null === (h = o.rum) || void 0 === h ? void 0 : h.pageId);
        return l = function (e) {
          let {
            ctx: t,
            pageId: n,
            pageLabel: r,
            $logger: o
          }
          = e;
          if (!r || !n) return;
          const {
            rum: c
          }
          = t.config ||
          {
          };
          if (c && Array.isArray(c[n]) && c[n].includes(r)) return r;
          null == o ||
          o.warn('Unregistered RUM label: '.concat(r))
        }({
          ctx: e,
          pageId: c,
          pageLabel: l,
          $logger: r
        }),
        Promise.all([d,
        l,
        c])
      }
      function Aa(e, t, n) {
        var r,
        o,
        c,
        l;
        const {
          renderType: d
        }
        = n,
        m = /^[a-z0-9-]+\.upwork\.com$/.test(window.location.hostname) ||
        '1' === (
          null === (r = e.route.query) ||
          void 0 === r ? void 0 : r.rum_tracking_only
        ) ||
        !0 === (
          null === (o = e.config) ||
          void 0 === o ||
          null === (o = o.rum) ||
          void 0 === o ? void 0 : o.trackingOnly
        ),
        h = Ca({
          namespacePrefix: 'agate.metrics',
          endPoint: '/upi/metrics/rum/v1',
          rate: (
            () => {
              var t,
              n;
              let r = parseFloat(
                null === (t = e.route.query) ||
                void 0 === t ? void 0 : t.psmetrics_traffic_rate
              );
              if (Number.isNaN(r)) {
                var o;
                const {
                  psmetricsTrafficRate: t
                }
                = e.config ||
                {
                },
                {
                  trafficRate: n
                }
                = (null === (o = e.config) || void 0 === o ? void 0 : o.rum) ||
                {
                };
                r = n ||
                0 === n ? n : t ||
                0 === t ? t : 0.5
              }
              return r > 0 &&
              '1' === (null === (n = e.route.query) || void 0 === n ? void 0 : n.perf) &&
              (r = 1),
              r
            }
          ) (),
          renderType: d,
          debugEnabled: !(
            null === (c = e.config) ||
            void 0 === c ||
            null === (c = c.rum) ||
            void 0 === c ||
            !c.debugEnabled
          ),
          appVersion: null == e ||
          null === (l = e.config) ||
          void 0 === l ||
          null === (l = l.application) ||
          void 0 === l ||
          null === (l = l.rel) ||
          void 0 === l ? void 0 : l.version,
          reportOnly: !m,
          beforeSendMiddleware: t => {
            let {
              context: n
            }
            = t;
            const r = Fe(e);
            r.length &&
            (
              n.dependentMetricsContext = JSON.stringify(
                r.map(
                  (
                    e => {
                      let {
                        flagName: t,
                        flagValue: n
                      }
                      = e;
                      return {
                        flagName: t,
                        flagValue: n
                      }
                    }
                  )
                )
              )
            )
          }
        });
        t('rumLogger', h);
        const f = async() => {
          const [,
          ,
          t] = await xa(e);
          return t
        };
        t('rumRoutePageId', f);
        const v = Na(e);
        let y;
        const w = () => {
          h.pageIdPromise = xa(e).then(
            (
              t => {
                let[n,
                r,
                o] = t;
                const c = v ? '' : null === (l = e.route.matched) ||
                void 0 === l ||
                null === (l = l[0]) ||
                void 0 === l ? void 0 : l.path;
                var l;
                if (y !== c) {
                  y = c;
                  const {
                    $rumLogger: t
                  }
                  = e;
                  t.presentationType = n,
                  t.pageLabel = r,
                  t.pageId !== o &&
                  (t.pageId = o)
                }
              }
            )
          )
        };
        return w(),
        e.app.router.afterEach((() => {
          w()
        })),
        {
          rumLogger: h,
          rumRoutePageId: f
        }
      }
      function Oa(e, t) {
        Aa(e, t, {
          renderType: 'server'
        })
      }
      var Da = n(70),
      Ra = n.n(Da),
      Pa = n(62);
      function La(e, t) {
        t('upSanitizeUrl', (e => Object(Pa.sanitizeUrl) (e))),
        t('upSanitizeHtml', ((html, e) => Object(Pa.sanitizeHtml) (html, e)))
      }
      function Ua(e) {
        let t,
        {
          app: n,
          store: r,
          $logger: o
        }
        = e;
        n.router.afterEach(
          (
            () => {
              clearTimeout(t),
              r.getters['tracking/isLocationValid'] ||
              (
                t = setTimeout(
                  (
                    () => {
                      r.getters['tracking/isLocationValid'] ||
                      o.warn('SUIT2: Tracking location has not been set for this route.')
                    }
                  ),
                  5000
                )
              )
            }
          )
        )
      }
      function Fa() {
        return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window).microAppContainer
      }
      let Ma;
      const $a = new Promise((e => {
        Ma = e
      })),
      qa = () => ({
        location: null,
        visitorApiKey: null,
        loading: null,
        loaded: null,
        promise: null,
        error: null,
        suit2Enabled: null,
        context: {
          visitor_id: null,
          is_logged_in: null,
          user_uid: null,
          user_nid: null,
          organization_uid: null,
          organization_type_title: null,
          user_is_sudo: null
        }
      }),
      ja = {
        setLocation(e, t) {
          e.location = t
        },
        setContext(e, t) {
          e.context = t
        },
        setVisitorApiKey(e, t) {
          e.visitorApiKey = t
        },
        setLoading(e, t) {
          e.loading = t
        },
        setLoaded(e, t) {
          e.loaded = t
        },
        setPromise(e, t) {
          e.promise = t
        },
        setError(e, t) {
          e.error = t
        },
        setSuit2Enabled(e, t) {
          e.suit2Enabled = t
        }
      },
      Va = {
        isLocationValid: e => !!e.location,
        isContextValid(e) {
          var t,
          n;
          return (null === (t = e.context) || void 0 === t ? void 0 : t.visitor_id) ||
          (null === (n = e.context) || void 0 === n ? void 0 : n.user_uid)
        }
      },
      Ga = {
        setLocation(e, t) {
          let {
            commit: n,
            getters: r
          }
          = e;
          n('setLocation', t),
          r.isLocationValid &&
          Ma()
        },
        setContext(e, t) {
          let {
            state: n,
            commit: r,
            getters: o
          }
          = e;
          r('setContext', t),
          o.isContextValid &&
          (n.readyResolve.forEach((e => e())), n.readyResolve = [])
        },
        async locationSet(e) {
          let {
            getters: t
          }
          = e;
          t.isLocationValid &&
          Ma(),
          await $a
        },
        async loadVisitorApiKey(e) {
          let {
            state: t,
            commit: n,
            rootState: r
          }
          = e;
          if (t.loaded) return !0;
          if (t.loading) return await t.promise,
          !0;
          n('setLoading', !0);
          const o = this.$http({
            handleApiErrors: !1,
            cache: {
              strategy: 'cacheAndNetwork'
            },
            onSuccess: e => n('setVisitorApiKey', e.visitorApiKey),
            onError: (e, t) => !t &&
            n('setError', !0),
            auth: !1
          }).url(''.concat(this.$config.apiPath, 'visitor/context')).get().json();
          n('setPromise', o);
          try {
            await o
          } catch (e) {
            this.$logger.error(e, {
              msgPrefix: 'store tracking/loadVisitorApiKey error'
            })
          }
          return n('setPromise', null),
          n('setLoaded', !0),
          n('setLoading', !1),
          !0
        },
        setSuit2Enabled(e, t) {
          let {
            commit: n
          }
          = e;
          n('setSuit2Enabled', t)
        },
        async ready(e) {
          let {
            state: t,
            getters: n
          }
          = e;
          n.isContextValid ||
          await new Promise((e => {
            t.readyResolve.push(e)
          }))
        }
      };
      function Ba(e) {
        var t;
        e.hasModule('tracking') ||
        (
          e.registerModule(
            'tracking',
            {
              namespaced: !0,
              state: qa,
              actions: Ga,
              mutations: ja,
              getters: Va
            }
          ),
          t = e.state.tracking,
          Object.defineProperty(
            t,
            'readyResolve',
            {
              configurable: !0,
              enumerable: !1,
              writable: !0,
              value: []
            }
          )
        )
      }
      async function za(e) {
        return async function (e) {
          const {
            store: t
          }
          = e;
          return await Promise.all(
            [t.dispatch('context/ready'),
            t.dispatch('tracking/locationSet')]
          ),
          (await n.e(159).then(n.bind(null, 1200))).default(e)
        }(e)
      }
      var Ha = e => {
        const t = {
          ssrVisitorApiKey: !0,
          suit2Enabled: !1,
          suit2AssetLoader: 'app-loader',
          suit2AssetVersion: '0.2.53',
          ...e.config.tracking
        };
        return 'suit2Enabled' in e.config &&
        (t.suit2Enabled = e.config.suit2Enabled),
        t
      },
      Qa = n(24);
      function Wa(e) {
        let {
          store: t,
          $tracker: n
        }
        = e;
        const {
          visitor: r,
          user: o
        }
        = t.state,
        c = t.state.orgs &&
        t.state.orgs.current,
        l = {
          visitor_id: r &&
          r.id,
          user_uid: o &&
          o.id,
          user_nid: o &&
          o.nid,
          organization_uid: c &&
          c.id,
          organization_type_title: c &&
          c.typeTitle,
          user_is_sudo: o &&
          o.isSudo,
          is_logged_in: t.getters['context/isUser']
        };
        t.dispatch('tracking/setContext', l),
        n.setUserContext(l)
      }
      async function Ka(e) {
        const {
          config: t
        }
        = e;
        e.app.router.beforeEach(
          (
            (t, n, r) => {
              e.store.state.tracking.suit2Enabled &&
              'function' == typeof e.$tracker.beforeRouteChange &&
              e.$tracker.beforeRouteChange({
                to: t,
                from: n
              }, e),
              r()
            }
          )
        ),
        e.app.router.afterEach(
          (
            async(t, n) => {
              if (!e.store.state.tracking.suit2Enabled) return;
              await new Promise((e => {
                setTimeout(e)
              }));
              var path;
              void 0 !== await e.$tracker.afterRouteChange({
                to: t,
                from: n
              }, e) ||
              t.meta.customPageView ||
              e.$tracker.pageView({
                sublocation: (
                  path = t.matched[t.matched.length - 1].path,
                  path.replace(/[:?]/g, '').replace(/[/-]/g, '_').replace(/^_+/g, '').replace(/_+$/g, '')
                )
              })
            }
          )
        );
        const n = Ha(e);
        if ('app-loader' === n.suit2AssetLoader) {
          const e = null == t ? void 0 : t.serviceName;
          try {
            console.log('SUIT2 Loader: loading loader'),
            await function (e) {
              return new Promise(
                (
                  (t, n) => {
                    const script = document.createElement('script');
                    script.type = 'text/javascript',
                    script.async = !0,
                    script.src = e,
                    script.addEventListener('load', t),
                    script.addEventListener('error', n),
                    document.head.appendChild(script)
                  }
                )
              )
            }(
              ''.concat(n.baseUrl || '', '/nx/suit2/loader.nuxt.js?t=').concat(Date.now())
            ),
            console.log('SUIT2: Loading latest asset for '.concat(e)),
            await window.suitLoader({
              serviceName: e
            }).then(
              (
                t => {
                  console.log('SUIT2: Loaded latest asset v'.concat(t, ' for ').concat(e)),
                  window.suit2TrackerPromise.setupResolve()
                }
              )
            )
          } catch (t) {
            throw new Error(
              'SUIT2: Failed loading latest asset for '.concat(e, ': ').concat(t.message),
              {
                cause: t
              }
            )
          }
        } else if ('nuxt-core' === n.suit2AssetLoader) {
          console.log('SUIT2: loading asset with nuxt-core');
          const e = n.suit2AssetVersion;
          let t;
          try {
            t = localStorage.getItem('suit2AssetDevOverride')
          } catch (e) {
          }
          const r = t ||
          'https://www.upwork.com/static/suit2-tracker/'.concat(e, '/index.iife.min.js'),
          script = document.createElement('script');
          script.type = 'text/javascript',
          script.async = !0,
          script.src = r,
          script.addEventListener(
            'load',
            (
              () => {
                console.log('SUIT2: asset loaded'),
                window.suit2TrackerPromise.setupResolve()
              }
            )
          ),
          document.head.appendChild(script)
        } else window.loadSuit2ContainerResolve();
        const r = await window.suit2TrackerPromise,
        {
          store: o,
          $http: c,
          app: l
        }
        = e;
        o.hasModule('context') &&
        (await o.dispatch('context/ready'), Wa(e)),
        await o.dispatch('tracking/ready');
        const {
          context: d
        }
        = o.state.tracking;
        try {
          const m = window.setupSUIT2({
            window: window,
            env: t.env,
            pageLocation: o.state.tracking.location,
            userContext: {
              visitor_id: d.visitor_id,
              user_uid: d.user_uid,
              organization_uid: d.organization_uid,
              organization_type_title: d.organization_type_title,
              user_is_sudo: d.user_is_sudo ||
              !1
            },
            locationMapper: r,
            cookiePrefix: t.cookiePrefix,
            ologConfig: {
              userNid: d.user_nid,
              visitorApiKey: o.state.tracking.visitorApiKey,
              mobileNativeApp: l.$isNativeApp,
              api: c({
                auth: d.is_logged_in ||
                !1,
                handleApiErrors: !1
              })
            },
            sendPageView: !1,
            dedupeGeneralEvents: !1 !== n.suit2DedupeGeneralEvents,
            snowplowConfig: {
              experimentalEndpoint: !1 !== n.suit2ExperimentalSpEndpoint
            },
            ...n
          });
          return m.addEventModifier(
            function (e) {
              const {
                store: t,
                $cookies: n
              }
              = e;
              return e => {
                var r,
                o,
                c,
                l;
                return {
                  ...e,
                  data: {
                    ...e.data,
                    ff: {
                      ...null === (r = t.state.flags) ||
                      void 0 === r ? void 0 : r.ff,
                      ...Object(Qa.a) ({
                        enabledFeatures: n.get('enabled_ff'),
                        featureOverride: n.get('feature_override')
                      }),
                      ...null === (o = e.data) ||
                      void 0 === o ? void 0 : o.ff
                    },
                    qt: {
                      ...Object.keys((null === (c = t.state.flags) || void 0 === c ? void 0 : c.qt) || {
                      }).filter(
                        (
                          e => {
                            var n;
                            return ['Allocation',
                            'DefaultForced'].includes(
                              null === (n = t.state.flags) ||
                              void 0 === n ? void 0 : n.qtAllocationType[e]
                            )
                          }
                        )
                      ).reduce(
                        (
                          (e, n) => {
                            var r,
                            o;
                            return {
                              ...e,
                              [
                                null === (r = t.state.flags) ||
                                void 0 === r ? void 0 : r.computedName[n]
                              ]: null === (o = t.state.flags) ||
                              void 0 === o ? void 0 : o.qt[n]
                            }
                          }
                        ),
                        {
                        }
                      ),
                      ...null === (l = e.data) ||
                      void 0 === l ? void 0 : l.qt
                    }
                  }
                }
              }
            }(e),
            {
              tracker: 'snowplow'
            }
          ),
          m.addEventModifier(
            function (e) {
              const {
                config: t
              }
              = e;
              return e => ({
                ...e,
                data: {
                  ...e.data,
                  service_name: t.serviceName
                }
              })
            }(e),
            {
              tracker: 'snowplow'
            }
          ),
          m.addEventModifier(
            function (e) {
              const {
                store: t,
                i18n: n
              }
              = e;
              return e => {
                var r;
                const o = null === (r = t.state.currency) ||
                void 0 === r ? void 0 : r.currencyCode,
                c = null == n ? void 0 : n.locale;
                return {
                  ...e,
                  data: {
                    currency: o,
                    locale: c,
                    ...e.data
                  }
                }
              }
            }(e),
            {
              tracker: 'snowplow'
            }
          ),
          m.addEventModifier(
            function (e) {
              const {
                $rumLogger: t
              }
              = e;
              return e => t ? {
                ...e,
                data: {
                  ...e.data,
                  page_id: t.pageId
                }
              }
               : e
            }(e),
            {
              tracker: 'snowplow'
            }
          ),
          m.addEventModifier(
            function (e) {
              const {
                store: t
              }
              = e;
              return t ? e => ({
                ...e,
                data: {
                  ...e.data,
                  se: t.getters['statsig/getExperiments']
                }
              }) : e => e
            }(e),
            {
              tracker: 'snowplow'
            }
          ),
          m.addEventModifier(
            function (e) {
              const {
                config: {
                  application: {
                    team: t
                  }
                }
              }
              = e;
              return t ? e => ({
                ...e,
                data: {
                  ...e.data,
                  scrum_team: t
                }
              }) : e => e
            }(e),
            {
              tracker: 'snowplow'
            }
          ),
          m.pageView(),
          o.watch(
            (e => e.tracking.location),
            (
              e => {
                o.state.tracking.suit2Enabled &&
                setTimeout((() => {
                  m.setLocation(e)
                }))
              }
            )
          ),
          m
        } catch (e) {
          return console.error(e),
          !1
        }
      }
      function Ja(e, t) {
        let n,
        r;
        Ba(e.store);
        const o = new Proxy({
          load: () => e.store.state.tracking.suit2Enabled ? (r || (r = Ka(e)), r) : (n || (n = za(e)), n)
        }, {
          get(t, n) {
            return t[n] ||
            [
              'then',
              'finally',
              'catch'
            ].includes(n) ||
            'string' == typeof n &&
            n.startsWith('_') ||
            'symbol' == typeof n ? t[n] : async function () {
              const r = await t.load();
              if (r[n]) return r[n](...arguments);
              {
                const t = e.store.state.tracking.suit2Enabled ? 'SUIT2' : 'SUIT1';
                console.warn(''.concat(t, ': method ').concat(n, ' not available'))
              }
            }
          }
        });
        t('tracker', o),
        null !== e.store.state.tracking.suit2Enabled &&
        e.$tracker.load(),
        e.store.watch((e => e.tracking.suit2Enabled), (() => {
          e.$tracker.load()
        })),
        Fa() &&
        Fa().inject('tracker', e.$tracker),
        e.store.subscribeAction({
          after: t => {
            'context/change' === t.type &&
            Wa(e)
          }
        })
      }
      Ut.a.tracking = function (e) {
        const {
          route: t,
          store: n
        }
        = e,
        r = t.meta.reduce(((e, t) => t.trackingLocation || e), void 0);
        r &&
        n.dispatch('tracking/setLocation', r);
        let o = t.meta.reduce(((e, t) => void 0 !== t.suit2Enabled ? t.suit2Enabled : e), void 0);
        if (void 0 === o) {
          o = Ha(e).suit2Enabled
        }
        n.commit('tracking/setSuit2Enabled', o)
      };
      var Xa = function (e, t) {
        let {
          app: n,
          $tracker: r
        }
        = e;
        void 0 === n.$config.oneTrustBannerEnabled &&
        (n.$config.oneTrustBannerEnabled = !0),
        n.$config.oneTrustBannerEnabled &&
        t(
          'otbTrack',
          (
            () => (
              e => {
                if (window.OneTrust) {
                  let t = !window.OneTrust.IsAlertBoxClosed();
                  t &&
                  e.track({
                    event: 'impression',
                    sublocation: 'ot_banner',
                    label: 'banner_opened'
                  }),
                  window.OneTrust.OnConsentChanged(
                    (
                      () => {
                        t &&
                        window.OneTrust.IsAlertBoxClosed() &&
                        (
                          e.track({
                            event: 'click',
                            sublocation: 'ot_banner',
                            label: 'banner_closed'
                          }),
                          t = !1
                        )
                      }
                    )
                  )
                }
              }
            ) (r)
          )
        )
      };
      const Za = {
        'air-3': {
          system: 'system',
          dark: 'dark',
          light: 'air-3-0',
          high_contrast_light: 'high-contrast-light'
        },
        ngm: {
          system: 'system',
          dark: 'ngm-dark',
          light: 'ngm'
        }
      },
      Ya = 'uTheme',
      eo = 'uThemeMode',
      to = 'uThemeNull',
      no = {
        path: '/',
        maxAge: 2678400
      };
      var io = {
        air2_76: 'air-2-76',
        air3_0: 'air-3-0',
        ngm: 'ngm'
      };
      let ro = !1;
      class ao {
        constructor() {
          this.bc = null,
          this.closed = !1
        }
        initChannel() {
          this.bc ||
          (this.bc = new BroadcastChannel('uTheme'))
        }
        postMessage(e) {
          this.closed ||
          (this.initChannel(), this.bc.postMessage(e))
        }
        subscribe(e) {
          this.closed ||
          (this.initChannel(), this.bc.onmessage = e)
        }
        close() {
          this.bc &&
          this.bc.close(),
          this.closed = !0
        }
      }
      const oo = new ao;
      function so(e, t, n, r) {
        if (t && t.app) {
          const {
            designSystem: n
          }
          = t.store.state.theme;
          if (!co(e, n)) return;
          t.$themeName = e,
          t.app.$themeName = e,
          t.app.head &&
          t.app.head.htmlAttrs &&
          (t.app.head.htmlAttrs.theme = e),
          'function' == typeof t.useHead &&
          t.useHead({
            htmlAttrs: [
              {
                theme: e
              }
            ]
          })
        }
        'function' == typeof n &&
        n(e),
        document.documentElement.setAttribute('theme', e),
        r ||
        oo.postMessage(e)
      }
      function co(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : 'air-3';
        return e !== Za[t].system &&
        Object.values(Za[t]).includes(e)
      }
      function lo(e) {
        return e.$cookies.get(''.concat(e.config.cookiePrefix, 'oauth2_global_js_token'))
      }
      function uo(e) {
        return e.$isNativeApp ? 'AppTheme' : 'Theme'
      }
      function mo(e) {
        const {
          designSystem: t
        }
        = e.store.state.theme;
        if (window.matchMedia) {
          const n = window.matchMedia('(prefers-color-scheme: dark)');
          ro ||
          (
            n.onchange = () => {
              if (
                function (e) {
                  return e.$cookies.get(''.concat(e.config.cookiePrefix).concat(eo))
                }(e) === Za[t].system
              ) {
                const n = ho(t);
                e.$cookies.set(''.concat(e.config.cookiePrefix).concat(Ya), n, {
                  ...no
                }),
                so(n, e)
              }
            },
            ro = !0
          )
        }
      }
      function ho() {
        let e = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : 'air-3';
        return window.matchMedia &&
        window.matchMedia('(prefers-color-scheme: dark)').matches ? Za[e].dark : Za[e].light
      }
      function fo(e) {
        let t,
        n,
        r = arguments.length > 1 &&
        void 0 !== arguments[1] &&
        arguments[1],
        o = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : 'air-3';
        if (!e) return Za[o].light;
        if (e === Za[o].system) return ho(o);
        switch (t = e, t) {
          case 'light':
            n = r ? Za[o].high_contrast_light : Za[o].light;
            break;
          case 'dark':
            n = Za[o].dark;
            break;
          default:
            n = Za[o].light
        }
        return n
      }
      function po(e, t, n) {
        const {
          designSystem: r
        }
        = e.store.state.theme;
        if (
          !function (e) {
            let t = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : 'air-3';
            return Object.keys(Za[t]).some((t => t === e))
          }(t, r)
        ) return null;
        let o;
        t === Za[r].system ? (
          o = Za[r].system,
          e.store.commit('theme/setIsSystemThemeMode', !0)
        ) : (e.store.commit('theme/setIsSystemThemeMode', !1), o = n),
        e.$cookies.set(''.concat(e.config.cookiePrefix).concat(Ya), n, {
          ...no
        }),
        e.$cookies.set(''.concat(e.config.cookiePrefix).concat(eo), t, {
          ...no
        });
        const {
          cookiePrefix: c,
          cookieDomain: l
        }
        = e.config,
        d = {
          path: '/',
          domain: l
        };
        e.$cookies.remove(''.concat(c).concat(to), d);
        const m = [
          {
            key: 'calculatedTheme',
            value: o
          },
          {
            key: 'selectedThemeMode',
            value: t
          }
        ];
        return so(n, e),
        kr(e, !0, uo(e), m)
      }
      function go(e) {
        return lo(e) ? Sr(e, !0, uo(e), 'calculatedTheme', !0) : null
      }
      function vo(e) {
        return lo(e) ? Sr(e, !0, uo(e), 'selectedThemeMode', !0) : null
      }
      async function yo(e) {
        const {
          $cookies: t,
          config: {
            cookiePrefix: n,
            cookieDomain: r
          }
        }
        = e,
        {
          designSystem: o
        }
        = e.store.state.theme;
        if (t.get(''.concat(n).concat(to))) return null;
        let c = t.get(''.concat(n).concat(Ya));
        const l = t.get(''.concat(n).concat(eo));
        if (c && l) {
          if (
            c = (
              (e, t, n, r) => {
                var o;
                if (Za[n] && Object.values(Za[n]).includes(t)) return t;
                if ('system' === r) return ho(n);
                const c = (null === (o = Za[n]) || void 0 === o ? void 0 : o[r]) ||
                Za[n].light;
                return po(e, r, c),
                c
              }
            ) (e, c, o, l),
            co(c, o)
          ) return c;
          t.remove(''.concat(n).concat(Ya), {
            path: '/',
            domain: r
          })
        }
        let d;
        if (e.store.state.theme.isSystemThemeMode) c = Za[o].system,
        d = Za[o].system;
         else {
          const t = await Promise.all([go(e),
          vo(e)]);
          [
            c,
            d
          ] = t
        }
        return c ? (
          c === Za[o].system ? (c = ho(o), so(c, e)) : e.store.commit('theme/setIsSystemThemeMode', !1),
          t.set(''.concat(n).concat(Ya), c, {
            ...no
          }),
          t.set(''.concat(n).concat(eo), d, {
            ...no
          }),
          c
        ) : (t.set(''.concat(n).concat(to), '1', {
          ...no
        }), null)
      }
      var wo = async e => {
        const {
          $cookies: t,
          config: {
            cookiePrefix: n,
            cookieDomain: r
          }
        }
        = e,
        {
          designSystem: o
        }
        = e.store.state.theme;
        if (!lo(e) && !e.$isNativeApp) return [Ya,
        eo,
        to].forEach((e => {
          t.remove(''.concat(n).concat(e), {
            path: '/',
            domain: r
          })
        })),
        null;
        mo(e),
        function (e) {
          const {
            designSystem: t
          }
          = e.store.state.theme;
          e.$isNativeApp &&
          de.a.on(
            'up/page/v1/THEME_CHANGED',
            'no_id',
            (
              function () {
                let {
                  selectedTheme: n,
                  isHighContrast: r
                }
                = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : {
                };
                so(fo(n, r, t), e)
              }
            )
          )
        }(e),
        Object(_t.a) ().subscribe(
          'topnav.themeChanged',
          (
            t => {
              const {
                selectedTheme: n,
                isHighContrast: r
              }
              = t,
              c = fo(n, r, o);
              po(e, n, c)
            }
          )
        );
        return await yo(e)
      };
      const bo = () => ({
        isSystemThemeMode: null,
        designSystem: 'air-3'
      }),
      ko = {
        setIsSystemThemeMode(e, t) {
          e.isSystemThemeMode = t
        },
        setDesignSystem(e, t) {
          e.designSystem = t
        }
      };
      var So = async(e, t) => {
        var n;
        let r = io.air3_0;
        var o,
        c;
        (
          (o = e.store).hasModule('theme') ||
          o.registerModule(
            'theme',
            {
              namespaced: !0,
              state: bo,
              mutations: ko
            },
            {
              preserveState: !!o.state.theme
            }
          ),
          null !== (n = e.$config) &&
          void 0 !== n &&
          n.designSystem
        ) &&
        e.store.commit(
          'theme/setDesignSystem',
          null === (c = e.$config) ||
          void 0 === c ? void 0 : c.designSystem
        );
        const {
          ignoreThemePluginOnServer: l
        }
        = JSON.parse('{}');
        'ngm' === e.$config.designSystem &&
        (r = io.ngm);
        const d = await wo(e);
        d &&
        (r = d),
        t('themeName', r),
        e.app.head.htmlAttrs ||
        (e.app.head.htmlAttrs = {}),
        e.store.state.theme.isSystemThemeMode ||
        (e.app.head.htmlAttrs.theme = r)
      },
      To = n(12);
      function Eo(e, t) {
        let n,
        r,
        {
          name: o,
          location: c,
          customClass: l
        }
        = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : {
          name: 'top',
          location: 'beforeBody'
        };
        function d() {
          return document.querySelector('.microapp-slot-'.concat(o))
        }
        return function () {
          let e = d();
          e ||
          (
            e = document.createElement('div'),
            e.classList.add('microapp-slot-'.concat(o)),
            l &&
            e.classList.add(l),
            'afterBody' === c &&
            document.body.append(e),
            'beforeBody' === c &&
            document.body.prepend(e)
          ),
          n = e.getAttribute('data-ssr-app'),
          r = !!n &&
          !Object(To.a) (e, n),
          r &&
          (n = void 0),
          e.removeAttribute('data-ssr-app')
        }(),
        {
          activeApp: n,
          ssiFailed: r,
          placeholderVm: void 0,
          serverEl: {
            html: ''
          },
          isRendered(e) {
            return this.activeApp === e
          },
          renderServer(html, e) {
            this.serverEl.html = '<div class="microapp-slot-'.concat(o, ' ').concat(l || '', '" data-ssr-app="').concat(e, '">\n').concat(html, '\n</div>'),
            this.activeApp = e
          },
          renderClient(e, t, n) {
            this.isRendered(e) ||
            (
              this.activeApp &&
              this.clear(),
              t &&
              !this.placeholderVm &&
              this.renderPlaceholder(t, e, n),
              this.activeApp = e,
              this.ssiFailed = void 0
            )
          },
          renderPlaceholder(component, n, r) {
            if (this.isRendered(n)) return;
            const o = d();
            e ? (
              this.placeholderVm = new e({
                data: {
                  options: r
                },
                render: e => e(component)
              }),
              this.placeholderVm.$mount(),
              o.append(this.placeholderVm.$el)
            ) : (
              this.placeholderVm = t(component, {
                options: r
              }),
              this.placeholderVm.mount(o)
            )
          },
          clear() {
            var e,
            t,
            n,
            r;
            null === (e = window['spa_'.concat(this.activeApp)]) ||
            void 0 === e ||
            e.stop(),
            'function' == typeof (null === (t = this.placeholderVm) || void 0 === t ? void 0 : t.unmount) ? null === (n = this.placeholderVm) ||
            void 0 === n ||
            n.unmount() : null === (r = this.placeholderVm) ||
            void 0 === r ||
            r.$destroy(),
            this.placeholderVm = void 0;
            d().innerHTML = '',
            this.activeApp = void 0,
            this.ssiFailed = void 0
          }
        }
      }
      var Io = n(50);
      class _o {
        constructor(e) {
          let {
            $logger: t,
            isDevMode: n
          }
          = e;
          this.$logger = t,
          this.isDevMode = n
        }
        log() {
          this.$logger.log(...arguments)
        }
        warn(e, t) {
          this.$logger.warn(e, t),
          this.logWithMicroappContext('warn', e, t)
        }
        error(e, t) {
          this.$logger.error(e, t),
          this.logWithMicroappContext('error', e, t)
        }
        logWithMicroappContext(e, t, n) {
          if (this.isDevMode) return;
          const r = n &&
          n.appName &&
          To.b[n.appName];
          if (!r) return;
          'object' != typeof t &&
          (t = {
            message: t
          }),
          t.serviceName = r;
          const o = {
            ...n
          };
          o.msgPrefix = '',
          this.$logger[e](t, o)
        }
      }
      var Co = n(49),
      No = n.n(Co),
      xo = n(29),
      Ao = {
        components: {
          StandardLogo: xo.a
        },
        injectStyles: [
          No.a
        ]
      },
      Oo = (
        n(184),
        {
          components: {
            skeleton: Object(V.a) (
              Ao,
              (
                function () {
                  var e = this,
                  t = e._self._c;
                  return t(
                    'header',
                    {
                      staticClass: 'nav-skeleton nav-v2 nav-v2-skinny'
                    },
                    [
                      t('StandardLogo'),
                      e._v(' '),
                      t('div', {
                        staticClass: 'nav-skeleton-spacer nav-m-none'
                      }),
                      e._v(' '),
                      t(
                        'div',
                        {
                          staticClass: 'nav-skeleton-shape nav-skeleton-shape-circle nav-skeleton-avatar nav-m-none'
                        }
                      )
                    ],
                    1
                  )
                }
              ),
              [],
              !1,
              null,
              null,
              null
            ).exports
          }
        }
      ),
      Do = (
        n(186),
        Object(V.a) (
          Oo,
          (
            function () {
              var e = this._self._c;
              return e(
                'div',
                {
                  staticClass: 'user-skinny-app-skeleton',
                  attrs: {
                    id: 'user-skinny-app-container'
                  }
                },
                [
                  e('skeleton')
                ],
                1
              )
            }
          ),
          [],
          !1,
          null,
          null,
          null
        ).exports
      ),
      Ro = {
        name: 'VisitorSkinnyPlaceholder',
        components: {
          StandardLogo: xo.a
        }
      },
      Po = (
        n(188),
        Object(V.a) (
          Ro,
          (
            function () {
              var e = this._self._c;
              return e(
                'div',
                {
                  staticClass: 'visitor-nav-skinny-placeholder',
                  attrs: {
                    id: 'visitor-skinny-app-container'
                  }
                },
                [
                  e('header', [
                    e('StandardLogo')
                  ], 1)
                ]
              )
            }
          ),
          [],
          !1,
          null,
          '0bb4951d',
          null
        ).exports
      ),
      Lo = {
        name: 'TopNavPlaceholder',
        components: {
          TopNavUserSkeleton: n(31).a
        }
      },
      Uo = (
        n(190),
        Object(V.a) (
          Lo,
          (
            function () {
              var e = this._self._c;
              return e(
                'div',
                {
                  staticClass: 'nc-u-nav-placeholder',
                  attrs: {
                    id: 'user-top-navigation-container'
                  }
                },
                [
                  e('TopNavUserSkeleton')
                ],
                1
              )
            }
          ),
          [],
          !1,
          null,
          '5de0d0d2',
          null
        ).exports
      );
      function Fo(e, t, n) {
        let {
          route: r,
          $http: o,
          $logger: c,
          store: l,
          i18n: d,
          config: m,
          req: h,
          res: f,
          $hasI18nSelector: v,
          $currencyCode: y,
          $themeName: w,
          $isNativeApp: k
        }
        = e,
        {
          Vue: S,
          createApp: T,
          loadFlags: E,
          useState: I,
          isServerRendered: _
        }
        = n;
        const C = new _o({
          $logger: c,
          isDevMode: !1
        }),
        N = Eo(S, T, {
          name: 'top',
          location: 'beforeBody'
        }),
        x = Object(Io.a) (o, C, m.cookiePrefix, m.env, f),
        A = Eo(
          S,
          T,
          {
            name: 'innova',
            location: 'afterBody',
            customClass: 'layout-sidebar_sidebar'
          }
        ),
        O = function (e, t, n, r, o, c, l) {
          const d = 'user',
          m = To.b[d];
          return {
            overrides: {
              enableSSI: void 0
            },
            topNavHtmlPromise: null,
            options: {
            },
            setOptions(e) {
              this.options = e,
              Object(_t.a) ().setState('user.options', this.options)
            },
            isSSIEnabled() {
              const t = e.enableSSI &&
              'true' === e.enableSSI,
              n = 'boolean' == typeof t ? t : this.overrides.enableSSI;
              return void 0 !== n ? n : !l
            },
            getOptions() {
              const r = {
                disQual: !0,
                locale: t,
                ...this.options
              };
              return 'true' === e.throwError &&
              (r.throwError = !0),
              n &&
              (r.currencyCode = n),
              r
            },
            ssiFailed: () => o.ssiFailed,
            async preload() {
              this.getOptions()
            },
            async load() {
              const e = {
                navigationName: d,
                options: {
                  posFix: !0,
                  ...this.getOptions()
                }
              };
              try {
                if (o.isRendered(d)) return;
                this.ssiFailed() &&
                (
                  c.error(
                    '[micro-fe] '.concat(d, ' SSI failed, loading fallback'),
                    {
                      appName: d
                    }
                  ),
                  e.options.isFallback = !0,
                  e.options = {
                    ...e.options,
                    ...this.overrides.ssrOptions ||
                    {
                    }
                  }
                ),
                o.renderClient(d, Uo, e.options),
                r.loadMicroappSpa({
                  appName: d,
                  serviceName: m
                }).then((() => {
                  o.isRendered(d) &&
                  r.startMicroappSpa(e)
                })).catch(
                  (
                    e => {
                      c.error(
                        e,
                        {
                          appName: d,
                          msgPrefix: '[micro-fe] '.concat(d, ' rendering failed')
                        }
                      )
                    }
                  )
                )
              } catch (e) {
                c.error(
                  e,
                  {
                    appName: d,
                    msgPrefix: '[micro-fe] '.concat(d, ' rendering failed')
                  }
                )
              }
            },
            destroy() {
              o.clear()
            }
          }
        }(r.query, null == d ? void 0 : d.locale, v ? y : void 0, x, N, C, k),
        D = function (e, t, n, r, o, c, l, d, m) {
          let h;
          return {
            overrides: {
              enableSSI: void 0
            },
            setOptions(e) {
              h = e,
              Object(_t.a) ().setState('user-skinny.options', h)
            },
            isSSIEnabled() {
              if (m) return !1;
              const e = n.enableSSI &&
              'true' === n.enableSSI,
              t = 'boolean' == typeof e ? e : this.overrides.enableSSI;
              return void 0 === t ||
              t
            },
            getOptions() {
              const e = {
                locale: r,
                disQual: !0,
                ...h
              };
              return 'true' === n.throwError &&
              (e.throwError = !0),
              e
            },
            async load() {
              const e = 'user-skinny',
              t = To.b[e],
              n = {
                navigationName: e,
                options: this.getOptions()
              };
              try {
                if (c.isRendered(e)) return;
                c.ssiFailed &&
                (
                  l.error(
                    '[micro-fe] '.concat(e, ' SSI failed, loading fallback'),
                    {
                      appName: e
                    }
                  ),
                  n.options.isFallback = !0,
                  n.options = {
                    ...n.options,
                    ...this.overrides.ssrOptions ||
                    {
                    }
                  }
                ),
                c.renderClient(e, Do, n.options),
                o.loadMicroappSpa({
                  appName: e,
                  serviceName: t
                }).then((() => {
                  c.isRendered(e) &&
                  o.startMicroappSpa(n)
                })).catch(
                  (
                    t => {
                      l.error(
                        t,
                        {
                          appName: e,
                          msgPrefix: '[micro-fe] '.concat(e, ' rendering failed')
                        }
                      )
                    }
                  )
                )
              } catch (t) {
                l.error(
                  t,
                  {
                    appName: e,
                    msgPrefix: '[micro-fe] '.concat(e, ' rendering failed')
                  }
                )
              }
            },
            destroy() {
              c.clear()
            }
          }
        }(0, l.state.flags, r.query, null == d ? void 0 : d.locale, x, N, C, 0, k),
        R = function (e, t, n, r, o, c, l, d, m) {
          let h,
          f = {};
          return {
            overrides: {
              enableSSI: void 0,
              ssiFlagName: void 0
            },
            async isSSIEnabledAsync(e) {
              const t = this.overrides.ssiFlagName;
              return t ? (
                h ||
                (h = m(e, {
                  requestAlias: 'ssi-ff',
                  ff: [
                    {
                      name: t,
                      fallback: !1
                    }
                  ]
                })),
                await h,
                this.isSSIEnabled()
              ) : this.isSSIEnabled()
            },
            isSSIEnabled() {
              if (d) return !1;
              const e = t.enableSSI &&
              'true' === t.enableSSI,
              n = 'boolean' == typeof e ? e : this.overrides.enableSSI;
              return void 0 !== n ? n : !0 === l.ff[this.overrides.ssiFlagName]
            },
            setOptions(e) {
              f = e,
              Object(_t.a) ().setState('visitor-skinny.options', f)
            },
            getOptions() {
              const e = {
                locale: n,
                disQual: !0,
                ...f
              };
              return 'true' === t.throwError &&
              (e.throwError = !0),
              e
            },
            async load() {
              const e = 'visitor-skinny',
              t = To.b[e],
              n = {
                navigationName: e,
                options: this.getOptions()
              };
              try {
                if (o.isRendered(e)) return;
                o.ssiFailed &&
                (
                  c.error(
                    '[micro-fe] '.concat(e, ' SSI failed, loading fallback'),
                    {
                      appName: e
                    }
                  ),
                  n.options.isFallback = !0,
                  n.options = {
                    ...n.options,
                    ...this.overrides.ssrOptions ||
                    {
                    }
                  }
                ),
                o.renderClient(e, Po, n.options),
                await r.loadMicroappSpa({
                  appName: e,
                  serviceName: t
                }),
                o.isRendered(e) &&
                r.startMicroappSpa(n)
              } catch (t) {
                c.error(
                  t,
                  {
                    appName: e,
                    msgPrefix: '[micro-fe] '.concat(e, ' rendering failed')
                  }
                )
              }
            },
            destroy() {
              o.clear()
            }
          }
        }(0, r.query, null == d ? void 0 : d.locale, x, N, C, l.state.flags, k, E),
        P = function (e, t, n, r) {
          let o = {};
          const c = 'innova',
          l = To.b[c];
          return {
            setOptions(e) {
              o = {
                ...e
              },
              Object(_t.a) ().setState('innova.options', o)
            },
            getOptions: () => ({
              locale: e,
              appVersion: void 0,
              ...o
            }),
            async load() {
              const e = {
                navigationName: c,
                options: this.getOptions()
              };
              try {
                if (n.isRendered(c)) return;
                n.renderClient(c, null, e.options),
                await t.loadMicroappSpa({
                  appName: c,
                  serviceName: l,
                  appVersion: e.options.appVersion
                }),
                n.isRendered(c) &&
                t.startMicroappSpa(e)
              } catch (e) {
                r.error(
                  e,
                  {
                    appName: c,
                    msgPrefix: '[micro-fe] '.concat(c, ' rendering failed')
                  }
                )
              }
            },
            destroy() {
              n.clear()
            }
          }
        }(null == d ? void 0 : d.locale, x, A, C),
        L = {
          userNav: O,
          userSkinnyNav: D,
          visitorNavSkinny: R,
          innova: P,
          clearSlot: () => {
            N.clear()
          },
          $microAppLogger: C
        };
        var U,
        F,
        M;
        return t('microAppUtils', L),
        O.overrides = (
          null === (U = I('microAppUtilsOverrides')) ||
          void 0 === U ? void 0 : U.userNavOverrides
        ) ||
        O.overrides,
        D.overrides = (
          null === (F = I('microAppUtilsOverrides')) ||
          void 0 === F ? void 0 : F.userSkinnyNavOverrides
        ) ||
        D.overrides,
        R.overrides = (
          null === (M = I('microAppUtilsOverrides')) ||
          void 0 === M ? void 0 : M.visitorNavSkinnyOverrides
        ) ||
        R.overrides,
        !1 !== m.enableGlobalMicroapp &&
        {
          checkIfExists(e) {
            document.querySelector('#globalMicroAppStyles') ||
            e.error(
              '[micro-fe][globalMicroapp]: #globalMicroAppStyles not found! global microapp failed to be injected',
              {
                appName: 'global-microapp'
              }
            )
          },
          getSsiSnippet() {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : 'nuxt2';
            return '\n\n        <!-- globalMicroapp -->\n        <!--# block name="emptyG" --><!--# endblock -->\n        <!--'.concat('# include', ' virtual="/nx/global-microapp/').concat(e, '.html" stub="emptyG"-->\n        \n\n      ')
          }
        }.checkIfExists(C),
        L
      }
      function Mo(e, t) {
        return Fo(
          e,
          t,
          {
            Vue: r.default,
            loadFlags: qt.a,
            useState(t, n) {
              var r;
              if (void 0 === n) return null === (r = e.nuxtState) ||
              void 0 === r ? void 0 : r[t];
              e.beforeNuxtRender((e => {
                let {
                  nuxtState: r
                }
                = e;
                r[t] = n()
              }))
            }
          }
        )
      }
      function $o(e, t) {
        for (let i = 0, n = e.length; i < n; i += 1) {
          const n = e[i];
          if (n.name === t) return n;
          const r = $o(n.origChildren || n.children || [], t);
          if (r) return r
        }
        return null
      }
      async function qo(e, t, n) {
        var r,
        o;
        const c = e.app.$isNativeApp;
        if (!c) {
          if (e.isOpening) return;
          e.isOpening = !0
        }
        const l = String(Date.now()),
        d = 'slider' === n.type ? 'slider' : 'modal',
        {
          channelName: m,
          preventDismiss: h
        }
        = n,
        f = function (e, t, n, r) {
          for (const o of [
            t,
            n
          ]) {
            if (!o) break;
            const t = $o(e.options.routes, o.name),
            n = t.origChildren ||
            t.children;
            if (n) {
              const e = n.find((e => {
                let {
                  meta: meta
                }
                = e;
                return meta &&
                meta.routeName === r
              }));
              if (e) return e.name
            }
          }
          return r
        }(
          t.$router,
          t.$route,
          null === (r = P[t.$route.name]) ||
          void 0 === r ? void 0 : r.getPrevRoute(),
          n.name
        );
        if (f === t.$route.name) return void (e.isOpening = !1);
        c &&
        ot.a.set('skipNetwork', !0, 60000);
        const v = null === (o = P[f]) ||
        void 0 === o ? void 0 : o.getPrevRoute(),
        y = JSON.parse(t.$route.query._modalInfo || null) ||
        [];
        let w = 'push';
        y.length &&
        v.name !== t.$route.name &&
        (y.pop(), w = 'replace'),
        y.push({
          navType: d,
          title: n.title,
          modalId: l,
          channelName: m,
          preventDismiss: h
        });
        const k = c ? {
          nav_type: d,
          nav_dir: w
        }
         : {
        },
        S = {
          ...t.$route.query,
          pageTitle: n.title,
          preventDismiss: h,
          ...k,
          _modalInfo: JSON.stringify(y),
          ...n.query
        };
        t.$router.push({
          name: f,
          params: {
            ...n.params
          },
          query: S,
          hash: n.hash
        }, (() => {
        })),
        n.data &&
        ot.a.set('modal'.concat(l), n.data, 86400000)
      }
      const jo = (e, t) => {
        if (t) return null;
        let n,
        r = 0;
        return e.$route.matched.forEach(
          (
            (t, i) => {
              let component = e;
              for (; component; ) {
                if (component instanceof t.components.default) {
                  n = i;
                  break
                }
                component = component.$parent
              }
              t.meta &&
              t.meta.isModal ||
              (r += 1)
            }
          )
        ),
        {
          index: n,
          nonModalRoutes: r
        }
      };
      function Vo(e, t) {
        let n = null;
        t(
          'setModalIsOpening',
          (function (t) {
            return function (e, t) {
              e.isOpening = t
            }(e, t)
          })
        ),
        t(
          'openModal',
          (
            async function (t) {
              return n ||
              (
                n = {},
                this.$nuxt.$on('routeChanged', ((e, t) => {
                  n = {
                    to: e,
                    from: t
                  }
                }))
              ),
              qo(e, this, t)
            }
          )
        ),
        t(
          'modal',
          (
            function () {
              const t = e.app.$isNativeApp;
              return function (e, t, n) {
                var r,
                o;
                const c = JSON.parse(t.$route.query._modalInfo || '') ||
                [];
                let l,
                d = 0;
                e ? (l = c.length, d = 1) : (l = n.index, d = n.nonModalRoutes);
                const m = t.$route.matched[l],
                h = e ? t.$route.name : m.name,
                {
                  modalId: f,
                  navType: v,
                  title: title,
                  channelName: y
                }
                = c[l - d];
                return {
                  navType: v,
                  title: title,
                  routeName: h,
                  channelName: y,
                  isServerRenderingEnabled: (
                    e ? null === (r = t.$route.meta) ||
                    void 0 === r ? void 0 : r.isServerRenderingEnabled : null === (o = m.meta) ||
                    void 0 === o ? void 0 : o.isServerRenderingEnabled
                  ) ||
                  !1,
                  data: ot.a.get('modal'.concat(f))
                }
              }(t, this, jo(this, t))
            }
          )
        ),
        t(
          'modalSendMessage',
          (
            async function (data) {
              const {
                channelName: e
              }
              = this.$modal();
              return async function (e, data) {
                const t = 'nuxt-modal-'.concat(e);
                ot.a.set(t, data, 120000)
              }(e, data)
            }
          )
        ),
        t('modalChangedRoute', (() => n))
      }
      r.default.componentFetchMixin ||
      (
        r.default.componentFetchMixin = !0,
        r.default.mixin({
          fetchDelay: 0,
          beforeCreate() {
            const e = (t = this).$vnode &&
            t.$vnode.elm &&
            t.$vnode.elm.dataset &&
            t.$vnode.elm.dataset.fetchKey;
            var t;
            if (this.$options.layoutFetch) {
              const t = this.$nuxt.context;
              e ||
              (this.$options.fetch = async() => this.$options.layoutFetch(t))
            } else this.$options.pageFetch &&
            (
              e ||
              (
                this.$options.fetch = async() => this.$options.pageFetch(this.$nuxt.context)
              )
            )
          }
        })
      );
      var Go = {
        staging: '1bb56a01-fd64-465f-bc49-85a14580db1d',
        prod: '45226720-2088-4dc9-9200-8f7bab8acfcd'
      };
      async function Bo(e) {
        const {
          config: {
            env: t
          },
          store: n,
          $logger: r
        }
        = e;
        try {
          await n.dispatch('context/ready');
          const e = n.state.user.id ||
          n.state.visitor.id,
          r = Go[t] ||
          Go.staging,
          c = await(
            o = r,
            new Promise(
              (
                (e, t) => {
                  if (window.IncogniaWebSdk) return void e(window.IncogniaWebSdk);
                  const script = document.createElement('script');
                  script.src = 'https://repo.incognia.com/web/latest/incognia-web-sdk.js',
                  script.defer = !0,
                  script.setAttribute('incognia-app-id', o),
                  document.head.appendChild(script),
                  script.onload = () => {
                    window.IncogniaWebSdk ? e(window.IncogniaWebSdk) : t(new Error('Incognia Web SDK failed to load'))
                  },
                  script.onerror = e => t(e)
                }
              )
            )
          );
          return await c.setAccountId(e),
          c
        } catch (e) {
          return r.error('Incognia initialization failed', e),
          null
        }
        var o
      }
      var zo = function (e, t) {
        !function (e) {
          'function' == typeof window.requestIdleCallback ? window.requestIdleCallback((() => Bo(e)), {
            timeout: 5000
          }) : setTimeout((() => Bo(e)), 5000)
        }(e),
        function (e, t) {
          const n = {
            sendCustomEvent: async function (t) {
              let n = arguments.length > 1 &&
              void 0 !== arguments[1] ? arguments[1] : {
              };
              const r = e.store.state.user.id ||
              e.store.state.visitor.id,
              o = await Bo(e);
              null == o ||
              o.sendCustomEvent({
                tag: t,
                accountId: r,
                properties: n
              })
            },
            getSessionToken: async() => (await Bo(e)).getSessionToken()
          };
          t('incogniaSdk', n)
        }(e, t)
      };
      const Ho = () => ({
        core: !0,
        token: null
      }),
      Qo = {
        setToken(e, t) {
          e.token = t
        }
      };
      var Wo = {
        staging: '1a82853f8d7e',
        prod: '4c4cc75a16ed'
      };
      var Ko = async function (e) {
        const {
          config: {
            env: t
          },
          store: r,
          $logger: o
        }
        = e;
        !function (e) {
          e.hasModule('forter') ||
          e.registerModule('forter', {
            namespaced: !0,
            state: Ho,
            mutations: Qo
          })
        }(r);
        const c = async() => {
          try {
            const e = await n.e(127).then(n.bind(null, 1171)),
            o = e.default ||
            e,
            c = Wo[t] ||
            Wo.staging,
            l = o(c),
            d = e => {
              r.commit('forter/setToken', e.detail)
            };
            document.addEventListener('ftr:tokenReady', d);
            const script = document.createElement('script');
            script.setAttribute('id', c);
            try {
              script.appendChild(document.createTextNode(l))
            } catch {
              script.text = l
            }
            document.body.appendChild(script)
          } catch (e) {
            o.error('Forter initialization failed', e)
          }
        };
        'function' == typeof window.requestIdleCallback ? window.requestIdleCallback(c, {
          timeout: 200
        }) : setTimeout(c, 200)
      };
      async function Jo(e) {
        !!document.getElementById('qualtrics-snippet') ||
        (
          function () {
            const e = '(function(){var g=function(e,h,f,g){ this.get=function(a){for(var a=a+"=",c=document.cookie.split(";"),b=0,e=c.length;b<e;b++){for(var d=c[b];" "==d.charAt(0);)d=d.substring(1,d.length);if(0==d.indexOf(a))return d.substring(a.length,d.length)}return null}; this.set=function(a,c){var b="",b=new Date;b.setTime(b.getTime()+6048E5);b="; expires="+b.toGMTString();document.cookie=a+"="+c+b+"; path=/; "}; this.check=function(){var a=this.get(f);if(a)a=a.split(":");else if(100!=e)"v"==h&&(e=Math.random()>=e/100?0:100),a=[h,e,0],this.set(f,a.join(":"));else return!0;var c=a[1];if(100==c)return!0;switch(a[0]){case "v":return!1;case "r":return c=a[2]%Math.floor(100/c),a[2]++,this.set(f,a.join(":")),!c}return!0}; this.go=function(){if(this.check()){var a=document.createElement("script");a.type="text/javascript";a.src=g;document.body&&document.body.appendChild(a)}}; this.start=function(){var t=this;"complete"!==document.readyState?window.addEventListener?window.addEventListener("load",function(){t.go()},!1):window.attachEvent&&window.attachEvent("onload",function(){t.go()}):t.go()};}; try{(new g(100,"r","QSI_S_ZN_0IzJIULtA2j2T4O","https://zn0izjiulta2j2t4o-upwork.siteintercept.qualtrics.com/SIE/?Q_ZID=ZN_0IzJIULtA2j2T4O")).start()}catch(i){}})();',
            t = document.createElement('script');
            t.type = 'text/javascript',
            t.text = e,
            document.body.appendChild(t)
          }(),
          function () {
            const e = document.createElement('div');
            e.innerHTML = '<!--DO NOT REMOVE-CONTENTS PLACED HERE-->',
            e.setAttribute('id', 'ZN_0IzJIULtA2j2T4O');
            const t = document.createElement('div');
            t.setAttribute('id', 'qualtrics-snippet'),
            t.appendChild(e),
            document.body.appendChild(t)
          }(),
          async function (e) {
            let {
              store: t,
              $cookies: n,
              config: r
            }
            = e;
            await t.dispatch('context/ready');
            const o = t.getters['context/surveyData'];
            window.qualtricsContext = window.qualtricsContext ||
            {
            },
            window.qualtricsContext.UserId = o['User Id'],
            window.qualtricsContext.OrganizationId = o['Organization Id'],
            window.qualtricsContext.UserNid = o['User Nid'],
            window.qualtricsContext.UserRid = o['User Rid'],
            window.qualtricsContext.OrganizationRid = o['Organization Rid'],
            window.qualtricsContext.OrganizationType = o['Organization Type'],
            window.qualtricsContext.OrganizationLegacyType = o['Organization Legacy Type'],
            window.qualtricsContext.OrganizationEnterpriseType = o['Organization Enterprise Type'],
            window.qualtricsContext.OrganizationTitle = o['Organization Title'],
            window.qualtricsContext.OrganizationTypeTitle = o['Organization Type Title'],
            window.qualtricsContext.OrganizationTypeFlag = o['Organization Type Flag'],
            window.qualtricsContext.VisitorId = o['Visitor Id'];
            const c = n.get(''.concat(r.cookiePrefix, 'recognized'));
            window.qualtricsContext.IsRecognized = !!c,
            c &&
            (window.qualtricsContext.RecognizedNid = c)
          }(e)
        )
      }
      var Xo = function (e, t) {
        !function (e) {
          'function' == typeof window.requestIdleCallback ? window.requestIdleCallback((() => Jo(e)), {
            timeout: 5000
          }) : setTimeout((() => Jo(e)), 5000)
        }(e),
        function (e) {
          const t = {
            triggerSurvey: e => {
              var t;
              null !== (t = window.QSI) &&
              void 0 !== t &&
              t.API &&
              (
                window.qualtricsSurveyId = e,
                window.QSI.API.unload(),
                window.QSI.API.load().then((() => {
                  window.QSI.API.run(),
                  window.qualtricsSurveyId = ''
                }))
              )
            },
            addCustomData: data => {
              'object' == typeof data &&
              null !== data ? (
                window.qualtricsContext = window.qualtricsContext ||
                {
                },
                Object.entries(data).forEach((e => {
                  let[t,
                  n] = e;
                  window.qualtricsContext[t] = n
                }))
              ) : console.warn(
                'Invalid parameter for qualtricsContext: data should be an object'
              )
            },
            isLoaded: () => new Promise(
              (
                (e, t) => {
                  'undefined' == typeof window &&
                  t();
                  let n = 200;
                  !function r() {
                    var o;
                    null !== (o = window.QSI) &&
                    void 0 !== o &&
                    o.API ? e(!0) : n < 0 ? t() : (n -= 1, window.setTimeout(r, 100))
                  }()
                }
              )
            )
          };
          window.$qualtrics = window.$qualtrics ||
          {
            ...t
          },
          e('qualtrics', window.$qualtrics)
        }(t)
      };
      const Zo = () => ({
        disabled: !1,
        event: null
      }),
      Yo = {
        setDisabled(e, t) {
          e.disabled = t
        },
        setEvent(e, t) {
          e.event = t
        }
      },
      es = {
        load: () => new Promise(
          (
            (e, t) => {
              'undefined' == typeof window &&
              t();
              let n = 200;
              !function r() {
                'function' != typeof window.usabilla_live ? n < 0 ? t() : (n -= 1, window.setTimeout(r, 100)) : e()
              }()
            }
          )
        )
      };
      async function ts(e, t) {
        let {
          store: n,
          $tracker: r
        }
        = t;
        const style = document.createElement('style');
        style.innerHTML = '.usabilla_live_button_container { bottom: 100px!important; left: 100%!important; margin-left: 0!important; transform: rotate(-90deg); transform-origin: bottom left; z-index: 1001 !important; }',
        document.head.appendChild(style);
        const script = document.createElement('script');
        script.innerHTML = 'window.lightningjs||function(n){var e="lightningjs";function t(e,t){var r,i,a,o,d,c;return t&&(t+=(/\\?/.test(t)?"&":"?")+"lv=1"),n[e]||(r=window,i=document,a=e,o=i.location.protocol,d="load",c=0,function(){n[a]=function(){var t=arguments,i=this,o=++c,d=i&&i!=r&&i.id||0;function s(){return s.id=o,n[a].apply(s,arguments)}return(e.s=e.s||[]).push([o,d,t]),s.then=function(n,t,r){var i=e.fh[o]=e.fh[o]||[],a=e.eh[o]=e.eh[o]||[],d=e.ph[o]=e.ph[o]||[];return n&&i.push(n),t&&a.push(t),r&&d.push(r),s},s};var e=n[a]._={};function s(){e.P(d),e.w=1,n[a]("_load")}e.fh={},e.eh={},e.ph={},e.l=t?t.replace(/^\\/\\//,("https:"==o?o:"http:")+"//"):t,e.p={0:+new Date},e.P=function(n){e.p[n]=new Date-e.p[0]},e.w&&s(),r.addEventListener?r.addEventListener(d,s,!1):r.attachEvent("onload",s);var l=function(){function n(){return["<!DOCTYPE ",o,"><",o,"><head></head><",t,"><",r,\' src="\',e.l,\'"></\',r,"></",t,"></",o,">"].join("")}var t="body",r="script",o="html",d=i[t];if(!d)return setTimeout(l,100);e.P(1);var c,s=i.createElement("div"),h=s.appendChild(i.createElement("div")),u=i.createElement("iframe");s.style.display="none",d.insertBefore(s,d.firstChild).id="lightningjs-"+a,u.frameBorder="0",u.id="lightningjs-frame-"+a,/MSIE[ ]+6/.test(navigator.userAgent)&&(u.src="javascript:false"),u.allowTransparency="true",h.appendChild(u);try{u.contentWindow.document.open()}catch(n){e.domain=i.domain,c="javascript:var d=document.open();d.domain=\'"+i.domain+"\';",u.src=c+"void(0);"}try{var p=u.contentWindow.document;p.write(n()),p.close()}catch(e){u.src=c+\'d.write("\'+n().replace(/"/g,String.fromCharCode(92)+\'"\')+\'");d.close();\'}e.P(2)};e.l&&l()}()),n[e].lv="1",n[e]}var r=window.lightningjs=t(e);r.require=t,r.modules=n}({});window.usabilla_live = lightningjs.require("usabilla_live", "//w.usabilla.com/202452b9c34b.js");\n',
        document.head.appendChild(script),
        await n.dispatch('context/ready');
        const o = {
          'Page Title': document.title,
          ...n.getters['context/surveyData']
        };
        window.usabilla_live('data', {
          custom: o
        }),
        window.usabilla_live(
          'setEventCallback',
          (
            (e, t, label, o, c) => {
              n.commit('getfeedback/setEvent', t),
              function (e, t, n, r) {
                let o = arguments.length > 4 &&
                void 0 !== arguments[4] ? arguments[4] : {
                };
                const c = t.includes('Open') ? 'impression' : 'click',
                label = 'getfeedback_'.concat(t.toLowerCase().replace(/[ :]/g, '_')),
                data = {
                  eventLabel: n,
                  eventValue: r,
                  ...o
                };
                e.track({
                  event: c,
                  label: label,
                  sublocation: 'getfeedback_modal',
                  data: data
                })
              }(r, t, label, o, c)
            }
          )
        ),
        window.usabilla_live('hide'),
        window.usabilla_live('setForm', 'locale_'.concat(n.$i18n.locale))
      }
      function ns(e) {
        var t;
        const {
          store: n
        }
        = e;
        !function (e) {
          e.hasModule('getfeedback') ||
          e.registerModule(
            'getfeedback',
            {
              namespaced: !0,
              state: Zo,
              actions: es,
              mutations: Yo
            }
          )
        }(n),
        null !== (t = n.state.getfeedback) &&
        void 0 !== t &&
        t.disabled ||
        function (e) {
          'function' == typeof window.requestIdleCallback ? window.requestIdleCallback((t => ts(0, e)), {
            timeout: 5000
          }) : setTimeout((() => ts(0, e)), 5000)
        }(e)
      }
      var is = e => {
        ns(e)
      };
      async function rs(e) {
        const {
          application: t
        }
        = e.config,
        n = window.navigator.userAgent,
        r = await e.$rumRoutePageId(),
        o = e.store.getters['context/isUser'],
        {
          visitor: c,
          user: l,
          orgs: d,
          geo: m,
          bot: h
        }
        = e.store.state;
        return {
          userID: o ? l.id : null,
          ip: c.ip,
          country: m.countryCode,
          locale: e.i18n.locale,
          userAgent: n,
          custom: {
            serviceType: 'nuxt.app',
            serviceName: t.name,
            serviceTeam: t.team,
            serviceVersion: ''.concat(t.rel.tag || t.rel.branch, '-').concat(t.rel.revisionShort),
            ...h &&
            {
              isBot: h.isBot
            },
            ...o &&
            {
              isSudo: l.isSudo,
              orgType: d.current.type,
              orgLegacyType: d.current.legacyType,
              orgEnterpriseType: d.current.enterpriseType,
              orgIsClient: d.current.flag.client,
              orgIsVendor: d.current.flag.vendor,
              orgIsAgency: d.current.flag.agency,
              orgIsIndividual: d.current.flag.individual
            },
            rumPageId: r
          },
          customIDs: {
            ...o ? {
              organizationID: d.current.id
            }
             : {
              visitorID: c.id
            }
          },
          privateAttributes: {
          }
        }
      }
      let as = !1,
      os = null;
      async function ss(e, t) {
        let {
          force: r = !1,
          isAutoCaptureEnabled: o = !0
        }
        = t;
        if (as && !r) return;
        if (as = !0, r && os) {
          try {
            os.forceStartRecording()
          } catch (t) {
            e.$logger.error(
              'Failed to initialize force Statsig session replay: '.concat(t.message)
            )
          }
          return
        }
        const {
          store: c,
          config: l
        }
        = e,
        {
          statsigClientApiKey: d
        }
        = l;
        await c.dispatch('context/ready');
        try {
          const [{
            StatsigClient: t
          },
          {
            runStatsigSessionReplay: c,
            SessionReplay: m
          }
          ] = await Promise.all(
            [Promise.all([n.e(16),
            n.e(160)]).then(n.t.bind(null, 1172, 7)),
            Promise.all([n.e(16),
            n.e(165)]).then(n.t.bind(null, 1173, 7))]
          ),
          h = new t(d, await rs(e), {
            environment: {
              tier: l.env
            }
          });
          if (
            await h.initializeAsync(),
            os = new m(h),
            r ? os.forceStartRecording() : c(h),
            o
          ) {
            const {
              runStatsigAutoCapture: e
            }
            = await Promise.all([n.e(16),
            n.e(168)]).then(n.t.bind(null, 1174, 7));
            e(h)
          }
        } catch (t) {
          e.$logger.error(
            'Failed to initialize Statsig session replay: '.concat(t.message)
          )
        }
      }
      var cs = function (e, t) {
        !function (e, t) {
          const {
            config: n,
            $logger: r
          }
          = e,
          {
            isStatsigSessionReplayEnabled: o,
            statsigClientApiKey: c,
            isStatsigAutoCaptureEnabled: l
          }
          = n,
          d = () => !!c ||
          (
            r.warn('Statsig session replay not started: API key is missing.'),
            !1
          );
          if (
            t(
              'statsigSessionReplay',
              {
                start: async function () {
                  let {
                    force: t,
                    isAutoCaptureEnabled: n
                  }
                  = arguments.length > 0 &&
                  void 0 !== arguments[0] ? arguments[0] : {
                  };
                  return d() ? ss(e, {
                    force: t,
                    isAutoCaptureEnabled: n
                  }) : Promise.resolve()
                }
              }
            ),
            o
          ) {
            if (!d() || as) return;
            const t = () => ss(e, {
              isAutoCaptureEnabled: l
            });
            e.app.router.afterEach(t)
          }
        }(e, t)
      };
      const ls = () => ({
        experiments: {
        }
      }),
      us = {
        SET_EXPERIMENT(e, t) {
          let {
            name: n,
            group: r
          }
          = t;
          e.experiments[n] = r
        }
      },
      ds = {
        setExperiment(e, t) {
          let {
            commit: n
          }
          = e,
          {
            name: r,
            group: o
          }
          = t;
          n('SET_EXPERIMENT', {
            name: r,
            group: o
          })
        }
      },
      ms = {
        getExperiments: e => e.experiments
      };
      function hs(e) {
        let {
          name: t = null,
          params: n = {}
        }
        = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
        };
        return {
          get: function (param) {
            let e = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : null;
            return void 0 === n[param] ? e : n[param]
          },
          getGroupName: () => t,
          getName: () => e,
          getParams: () => n
        }
      }
      function fs(e, t, n) {
        const r = (
          'object' == typeof e ? Object.entries(e) : [
            ...new URLSearchParams(e)
          ]
        ).filter((e => {
          let[n] = e;
          return n.startsWith(t)
        })).map((e => {
          let[r,
          o] = e;
          const c = r.slice(t.length);
          return [c,
          n(o, c)]
        }));
        return r.length ? Object.fromEntries(r) : null
      }
      function ps(e) {
        let {
          urlSearch: t,
          getCookie: n = null,
          setCookie: r = null,
          cookieName: o,
          urlParamPrefix: c,
          decoder: l,
          encoder: d
        }
        = e;
        const m = t ? fs(t, c, l) : null,
        h = {
          ...n ? fs(n(o), '', l) : null,
          ...m
        };
        return m &&
        r &&
        r(
          o,
          function (e, t) {
            const n = Object.entries(e).map((e => {
              let[n,
              r] = e;
              return [n,
              t(r, n)]
            }));
            return decodeURIComponent(new URLSearchParams(Object.fromEntries(n)).toString())
          }(h, d)
        ),
        h
      }
      const gs = {
        EXPERIMENTS: 'se_o',
        CUSTOM: 'sc_o'
      };
      function vs(e) {
        var t;
        let n = {},
        r = {},
        o = null;
        if (null !== (t = e.store.state.vpn) && void 0 !== t && t.isVpn) {
          n = function () {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : null;
            return ps({
              urlParamPrefix: 'se_',
              cookieName: gs.EXPERIMENTS,
              decoder: (e, t) => '0' === e ? hs(t) : (
                () => {
                  const [n,
                  ...r] = e.split(','),
                  o = Object.fromEntries(r.map((e => e.split(':'))));
                  return hs(t, {
                    name: n,
                    params: o
                  })
                }
              ) (),
              encoder: e => null === e.getGroupName() ? '0' : (
                () => {
                  const t = Object.entries(e.getParams()).map((e => {
                    let[t,
                    n] = e;
                    return ''.concat(t, ':').concat(n)
                  })).join(',');
                  return e.getGroupName() + (t.length ? ','.concat(t) : '')
                }
              ) (),
              ...e
            })
          }({
            urlSearch: e.route.query,
            getCookie: e.$cookies.get,
            setCookie: e.$cookies.set
          }),
          o = e.$cookies.get(gs.CUSTOM) ||
          null,
          r = function () {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : null;
            return ps({
              urlParamPrefix: '',
              cookieName: gs.CUSTOM,
              decoder: e => e,
              ...e
            })
          }({
            urlSearch: o
          })
        }
        return {
          experimentsOverride: n,
          customOverride: r,
          customOverrideEncoded: o
        }
      }
      function ys(e) {
        const t = function (e) {
          let t = async e => e;
          const n = async function (n) {
            const r = await t({
            });
            return e({
              opts: n,
              user: r
            })
          };
          return n.withUserData = function (e) {
            const n = 'function' != typeof e ? () => e : e,
            r = t;
            return t = async e => {
              const t = await r(e).then(n);
              return 'object' == typeof t &&
              Object.assign(e, t),
              e
            },
            this
          },
          n
        }(
          (
            t => {
              let {
                user: n
              }
              = t;
              const {
                localOverrides: r
              }
              = n;
              delete n.localOverrides;
              const {
                allocateExperiment: o,
                getExperiment: c
              }
              = function (e) {
                let {
                  http: t,
                  localOverrides: n = {},
                  user: r,
                  store: o
                }
                = e;
                const c = e => o.dispatch(
                  'statsig/setExperiment',
                  {
                    name: e.getName(),
                    group: {
                      name: e.getGroupName(),
                      params: e.getParams()
                    }
                  }
                );
                return {
                  allocateExperiment: async(e, o) => {
                    let {
                      persistent: l = !1,
                      version: d,
                      type: m = 'person'
                    }
                    = o;
                    const h = n[e];
                    if (h) return c(h),
                    h;
                    const f = null == r.userID ? '/api/v3/experiments-pub/'.concat(d ? ''.concat(d, '/') : '', 'allocate/visitor') : '/api/v3/experiments/'.concat(d ? ''.concat(d, '/') : '', 'allocate/').concat(m),
                    v = {
                      experiments: [
                        e
                      ],
                      data: {
                        ...r,
                        ...r.custom
                      }
                    };
                    l &&
                    (v.persistent = !0),
                    Object.keys(r.privateAttributes).length &&
                    (v.privateData = r.privateAttributes),
                    Object.keys(r.customIDs).length &&
                    (v.customIds = {
                      ...r.customIDs
                    }),
                    delete v.data.userID,
                    delete v.data.customIDs,
                    delete v.data.custom,
                    delete v.data.privateAttributes,
                    delete v.data.statsigEnvironment;
                    const y = {
                      'vnd-eo-visitorId': r.customIDs.visitorID
                    };
                    r.customIDs.organizationID &&
                    (
                      y['x-upwork-api-tenantid'] = r.customIDs.organizationID,
                      delete v.customIds.organizationID
                    );
                    try {
                      return await t({
                        useSubordinateOauth: !0,
                        handleApiErrors: !1,
                        requestAlias: ''.concat(e, '-').concat(l ? 'spe' : 'se'),
                        cache: !0,
                        csrf: !1
                      }).headers(y).url(f).post(v).json((t => {
                        let {
                          groups: n
                        }
                        = t;
                        const r = hs(e, n[e]);
                        return c(r),
                        r
                      }))
                    } catch (t) {
                      return hs(e)
                    }
                  },
                  getExperiment: async function (e) {
                    let {
                      version: o,
                      type: l
                    }
                    = arguments.length > 1 &&
                    void 0 !== arguments[1] ? arguments[1] : {
                      type: 'person'
                    };
                    const d = n[e];
                    if (d) return c(d),
                    d;
                    const m = null == r.userID ? '/api/v3/experiments-pub/'.concat(o ? ''.concat(o, '/') : '', 'allocations/visitor') : '/api/v3/experiments/'.concat(o ? ''.concat(o, '/') : '', 'allocations/').concat(l),
                    h = {
                      experiments: [
                        e
                      ]
                    };
                    Object.keys(r.customIDs).length &&
                    (h.customIds = {
                      ...r.customIDs
                    });
                    const f = {
                      'vnd-eo-visitorId': r.customIDs.visitorID
                    };
                    r.customIDs.organizationID &&
                    (
                      f['x-upwork-api-tenantid'] = r.customIDs.organizationID,
                      delete h.customIds.organizationID
                    );
                    try {
                      return await t({
                        useSubordinateOauth: !0,
                        handleApiErrors: !1,
                        requestAlias: ''.concat(e, '-spe'),
                        cache: !0,
                        csrf: !1
                      }).headers(f).url(m).query(
                        'v2' === o ? new URLSearchParams({
                          experiments: [
                            e
                          ]
                        }).toString() : void 0
                      ) ['v2' === o ? 'get' : 'post']('v2' === o ? void 0 : h).json((t => {
                        let {
                          groups: n
                        }
                        = t;
                        const r = hs(e, n[e]);
                        return c(r),
                        r
                      }))
                    } catch (t) {
                      return hs(e)
                    }
                  }
                }
              }({
                user: n,
                http: e.$http,
                localOverrides: r,
                store: e.store
              });
              return {
                user: n,
                getExperimentWithRules: function (e) {
                  let {
                    type: t
                  }
                  = arguments.length > 1 &&
                  void 0 !== arguments[1] ? arguments[1] : {
                    type: 'person'
                  };
                  return o(e, {
                    persistent: !1,
                    type: t
                  })
                },
                allocatePersistentExperiment: e => o(e, {
                  persistent: !0
                }),
                allocatePersistentExperimentV2: function (e) {
                  let {
                    type: t
                  }
                  = arguments.length > 1 &&
                  void 0 !== arguments[1] ? arguments[1] : {
                    type: 'person'
                  };
                  return o(e, {
                    persistent: !0,
                    version: 'v2',
                    type: t
                  })
                },
                getPersistentExperiment: c,
                getPersistentExperimentV2: function (e) {
                  let {
                    type: t
                  }
                  = arguments.length > 1 &&
                  void 0 !== arguments[1] ? arguments[1] : {
                    type: 'person'
                  };
                  return c(e, {
                    version: 'v2',
                    type: t
                  })
                }
              }
            }
          )
        ).withUserData((t => {
          const {
            experimentsOverride: n
          }
          = vs(e);
          t.localOverrides = n
        }));
        return t
      }
      function ws(e) {
        return async function (e) {
          e.hasModule('statsig') ||
          e.registerModule(
            'statsig',
            {
              namespaced: !0,
              state: ls,
              actions: ds,
              mutations: us,
              getters: ms
            },
            {
              preserveState: !!e.state.statsig
            }
          )
        }(e.store),
        function (e) {
          const t = ys(e);
          return t.withUserData((() => rs(e))),
          t.getCustomOverrides = () => {
            const {
              customOverrideEncoded: t
            }
            = vs(e);
            return t
          },
          t
        }(e)
      }
      var bs = function (e, t) {
        t('statsig', ws(e))
      },
      ks = {
        bind(e, t) {
          let n = null,
          r = !1;
          const o = e => {
            'mousedown' !== e.type &&
            'touchstart' !== e.type ||
            (
              r = !1,
              n = setTimeout(
                (
                  () => {
                    var e;
                    r ||
                    null !== (e = window) &&
                    void 0 !== e &&
                    e.getSelection().toLocaleString() ||
                    t.value()
                  }
                ),
                600
              )
            )
          },
          c = () => {
            clearTimeout(n),
            n = null
          },
          l = () => {
            r = !0,
            c()
          };
          e.addEventListener('mousedown', o),
          e.addEventListener('touchstart', o),
          e.addEventListener('mouseup', c),
          e.addEventListener('touchend', c),
          window.addEventListener('touchmove', l),
          e.onLongPressCleanup = () => {
            e.removeEventListener('mousedown', o),
            e.removeEventListener('touchstart', o),
            e.removeEventListener('mouseup', c),
            e.removeEventListener('touchend', c),
            window.removeEventListener('touchmove', l)
          }
        },
        unbind(e) {
          e.onLongPressCleanup &&
          (e.onLongPressCleanup(), delete e.onLongPressCleanup)
        }
      };
      function Ss(e) {
        if ('apps-chatpro' === e.route.name || 'apps-uma' === e.route.name) {
          const t = e.app.head.link.find((link => 'icon' === link.rel));
          t.href = n(192),
          t.type = 'image/png'
        }
      }
      function Ts(e, t) {
        if (!Object.prototype.hasOwnProperty.call(e, t)) throw new TypeError('attempted to use private field on non-instance');
        return e
      }
      r.default.directive('onLongPress', ks);
      var Es = 0;
      function Is(e) {
        return '__private_' + Es++ + '_' + e
      }
      const _s = 'log',
      Cs = 'warn',
      Ns = 'error';
      var xs,
      As,
      Os,
      Ds = Is('logWithPrefix');
      class Rs {
        constructor(e, t) {
          Object.defineProperty(this, Ds, {
            value: Ps
          }),
          this.logger = e,
          this.messagePrefix = t
        }
        log() {
          for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
          Ts(this, Ds) [Ds](_s, ...t)
        }
        warn() {
          for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
          Ts(this, Ds) [Ds](Cs, ...t)
        }
        error() {
          for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++) t[n] = arguments[n];
          Ts(this, Ds) [Ds](Ns, ...t)
        }
      }
      function Ps(e, t, n) {
        'string' != typeof t ? this.logger[e](t, n) : this.logger[e](t, {
          msgPrefix: this.messagePrefix,
          ...n
        })
      }
      !function (e) {
        e.STOP = 'stop',
        e.LENGTH = 'length',
        e.CONTENT_FILTER = 'content_filter',
        e.FUNCTION_CALL = 'function_call',
        e.TOOL_CALLS = 'tool_calls',
        e.UNKNOWN = 'unknown'
      }(xs || (xs = {})),
      function (e) {
        e.PROGRESSING = 'PROGRESSING',
        e.DONE = 'DONE',
        e.ERROR = 'ERROR'
      }(As || (As = {})),
      function (e) {
        e.UP = 'UP',
        e.DOWN = 'DOWN'
      }(Os || (Os = {}));
      class Ls extends Error {
        constructor(e, t) {
          super (e),
          this.httpStatus = void 0,
          this.httpStatus = t
        }
      }
      class Us {
        static buildObjectField(e) {
          const t = Object.keys(e);
          if (0 === t.length) return '';
          const n = t[0],
          r = e[n];
          if (!r) return String(n);
          const o = this.buildSelectionSet(r).split('\n').map((line => '  ' + line)).join('\n');
          return ''.concat(String(n), ' {\n').concat(o, '\n}')
        }
        static buildSelectionSet(e) {
          return e.map(
            (
              e => 'string' == typeof e ||
              'number' == typeof e ||
              'symbol' == typeof e ? String(e) : 'object' == typeof e &&
              null !== e ? this.buildObjectField(e) : ''
            )
          ).filter(Boolean).join('\n')
        }
        static build(template, e) {
          return template.replace('${fields}', this.buildSelectionSet(e))
        }
        static buildGetThreadsQuery(e) {
          const template = '\n      query UmaChatBFFGetThreads($limit: Int, $offset: Int) {\n        umaChatBFFGetThreads(limit: $limit, offset: $offset) {\n          threads {\n            '.concat('${fields}', '\n          }\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildCreateThreadQuery(e) {
          const template = '\n      mutation UmaChatBFFCreateThread($title: String) {\n        umaChatBFFCreateThread(request: { title: $title }) {\n          '.concat('${fields}', '\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildCreateMessageInThreadQuery(e) {
          const template = '\n      mutation UmaChatBFFCreateMessageInThread($request: UmaChatBFFChatCompletionRequest!) {\n        umaChatBFFCreateChatCompletion(request: $request) {\n          '.concat('${fields}', '\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildGetMessageByTurnQuery(e) {
          const template = '\n      query UmaChatBFFGetMessageByTurn($threadId: ID!, $turn: Int!, $contentStart: Int) {\n        umaChatBFFGetMessageByTurn(threadId: $threadId, turn: $turn, contentStart: $contentStart) {\n          '.concat('${fields}', '\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildGetThreadHistoryQuery(e) {
          const template = '\n      query UmaChatBFFGetThreadHistory($threadId: ID!, $limit: Int, $offset: Int, $includeRatings: Boolean) {\n        umaChatBFFGetThreadHistory(threadId: $threadId, limit: $limit, offset: $offset, includeRatings: $includeRatings) {\n          messages {\n            '.concat('${fields}', '\n          }\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildRateMessageQuery(e) {
          const template = '\n      mutation UmaChatBFFRateMessage($request: UmaChatBFFRateMessageRequest!) {\n        umaChatBFFRateMessage(request: $request) {\n          '.concat('${fields}', '\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildUpdateThreadQuery(e) {
          const template = '\n      mutation UmaChatBFFUpdateThread($request: UmaChatBFFUpdateThreadRequest!) {\n        umaChatBFFUpdateThread(request: $request) {\n          '.concat('${fields}', '\n        }\n      }\n    ');
          return this.build(template, e)
        }
        static buildDeleteThreadQuery() {
          return '\n      mutation UmaChatBFFDeleteThread($threadId: ID!) {\n        umaChatBFFDeleteThread(threadId: $threadId)\n      }\n    '
        }
      }
      function Fs(e, t) {
        if (!Object.prototype.hasOwnProperty.call(e, t)) throw new TypeError('attempted to use private field on non-instance');
        return e
      }
      var Ms = 0;
      function $s(e) {
        return '__private_' + Ms++ + '_' + e
      }
      var qs = $s('doRequest');
      class js {
        constructor(e) {
          Object.defineProperty(this, qs, {
            value: Vs
          }),
          this.client = void 0,
          this.client = e.client
        }
        async getThreads() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : {
          };
          const {
            limit: t = 20,
            offset: n = 0,
            responseFields: r = [
              'threadId',
              'title',
              'createdDateTime',
              'lastMessageDateTime'
            ]
          }
          = e,
          o = Us.buildGetThreadsQuery(r);
          return (
            await Fs(this, qs) [qs](o, 'umaChatBFFGetThreads', {
              limit: t,
              offset: n
            })
          ).threads
        }
        async createThread() {
          let e = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : {
          };
          const {
            title: title = '',
            responseFields: t = [
              'threadId',
              'title',
              'createdDateTime',
              'lastMessageDateTime'
            ]
          }
          = e,
          n = Us.buildCreateThreadQuery(t);
          return Fs(this, qs) [qs](n, 'umaChatBFFCreateThread', {
            title: title
          })
        }
        async deleteThread(e) {
          const {
            threadId: t
          }
          = e,
          n = Us.buildDeleteThreadQuery();
          return Fs(this, qs) [qs](n, 'umaChatBFFDeleteThread', {
            threadId: t
          })
        }
        async createMessageInThread(e) {
          const {
            request: t,
            responseFields: n = [
              'turn',
              'status'
            ]
          }
          = e,
          r = Us.buildCreateMessageInThreadQuery(n);
          return Fs(this, qs) [qs](r, 'umaChatBFFCreateChatCompletion', {
            request: t
          })
        }
        async getMessageByTurn(e) {
          const {
            threadId: t,
            turn: n,
            contentStart: r = 0,
            responseFields: o = [
              'messageId',
              'content',
              'status'
            ]
          }
          = e,
          c = Us.buildGetMessageByTurnQuery(o);
          return Fs(this, qs) [qs](
            c,
            'umaChatBFFGetMessageByTurn',
            {
              threadId: t,
              turn: n,
              contentStart: r
            }
          )
        }
        async getThreadHistory(e) {
          const {
            threadId: t,
            limit: n = 20,
            offset: r = 0,
            includeRatings: o = !1,
            responseFields: c = [
              'messageId',
              'content',
              'role',
              'createdDateTime'
            ]
          }
          = e,
          l = Us.buildGetThreadHistoryQuery(c);
          return Fs(this, qs) [qs](
            l,
            'umaChatBFFGetThreadHistory',
            {
              threadId: t,
              limit: n,
              offset: r,
              includeRatings: o
            }
          )
        }
        async updateThread(e) {
          const {
            request: t,
            responseFields: n = [
              'threadId'
            ]
          }
          = e,
          r = Us.buildUpdateThreadQuery(n);
          return Fs(this, qs) [qs](r, 'umaChatBFFUpdateThread', {
            request: t
          })
        }
        async generateThreadTitle(e) {
          const {
            threadId: t,
            maxChars: n = 50,
            responseFields: r = [
              'threadId'
            ]
          }
          = e;
          return this.updateThread({
            request: {
              threadId: t,
              generateTitle: {
                maxChars: n
              }
            },
            responseFields: r
          })
        }
        async rateMessage(e) {
          const {
            request: t,
            responseFields: n = [
              'id',
              'createdDateTime',
              'updatedDateTime',
              'value',
              'feedbackText'
            ]
          }
          = e,
          r = Us.buildRateMessageQuery(n);
          return Fs(this, qs) [qs](r, 'umaChatBFFRateMessage', {
            request: t
          })
        }
      }
      async function Vs(e, t, n) {
        const r = await this.client.post({
          query: e,
          variables: n
        }).json();
        if (!r) throw new Ls('No data returned for key: '.concat(t));
        const {
          data: data,
          errors: o
        }
        = r;
        if (o && o.length > 0) {
          var c;
          const e = o[0];
          if (!e) throw new Ls('Unknown error occurred');
          const t = e.message ||
          'Unknown error occurred',
          code = null === (c = e.extensions) ||
          void 0 === c ? void 0 : c.code;
          throw new Ls(t, code)
        }
        if (!data || !data[t]) throw new Ls('No data returned for key: '.concat(t));
        return data[t]
      }
      var Gs = (e, t) => {
        let {
          app: n
        }
        = e;
        t('chatProLogger', new Rs(n.$logger, '[Chat PRO fullscreen] ')),
        t('umaProLogger', new Rs(n.$logger, '[UMA PRO fullscreen] ')),
        t('umaLlmgwLogger', new Rs(n.$logger, '[UMA LLMGW fullscreen] ')),
        t(
          'umaChatClient',
          new js({
            client: n.$httpGql({
              useSubordinateOauth: !0,
              auth: !0,
              handleApiErrors: !0
            })
          })
        )
      };
      r.default.component(d.a.name, d.a),
      r.default.component(
        h.a.name,
        {
          ...h.a,
          render: (e, t) => (
            h.a._warned ||
            (
              h.a._warned = !0,
              console.warn(
                '<no-ssr> has been deprecated and will be removed in Nuxt 3, please use <client-only> instead'
              )
            ),
            h.a.render(e, t)
          )
        }
      ),
      r.default.component(F.name, F),
      r.default.component('NChild', F),
      r.default.component(B.name, B),
      Object.defineProperty(
        r.default.prototype,
        '$nuxt',
        {
          get() {
            const e = this.$root ? this.$root.$options.$nuxt : null;
            return e ||
            'undefined' == typeof window ? e : window.$nuxt
          },
          configurable: !0
        }
      ),
      r.default.use(
        c.a,
        {
          keyName: 'head',
          attribute: 'data-n-head',
          ssrAttribute: 'data-n-head-ssr',
          tagIDKeyName: 'hid'
        }
      );
      const Bs = {
        name: 'page',
        mode: 'out-in',
        appear: !1,
        appearClass: 'appear',
        appearActiveClass: 'appear-active',
        appearToClass: 'appear-to'
      },
      zs = o.a.Store.prototype.registerModule;
      function Hs(path, e) {
        let t = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : {
        };
        const n = Array.isArray(path) ? !!path.reduce(((e, path) => e && e[path]), this.state) : path in this.state;
        return zs.call(this, path, e, {
          preserveState: n,
          ...t
        })
      }
      async function Qs(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
        };
        const n = ae(e),
        o = await U(0);
        n.$router = o,
        n.registerModule = Hs;
        const c = {
          head: {
            title: 'Upwork',
            meta: [
              {
                charset: 'utf-8'
              },
              {
                hid: 'viewport',
                name: 'viewport',
                content: 'width=device-width, initial-scale=1, viewport-fit=cover'
              },
              {
                hid: 'robots',
                name: 'robots',
                content: 'noodp,nodir,noydir'
              },
              {
                'http-equiv': 'accept-ch',
                content: 'sec-ch-ua-full-version-list, sec-ch-viewport-width, sec-ch-width, sec-ch-ua-mobile'
              }
            ],
            link: [
              {
                rel: 'icon',
                type: 'image/x-icon',
                href: '/favicon.ico'
              },
              {
                rel: 'preload',
                href: 'https://www.upwork.com/static/vue-libs/vue.runtime.2.7.20.min.js',
                as: 'script'
              },
              {
                rel: 'preload',
                href: 'https://www.upwork.com/static/vue-libs/vuex.3.6.2.min.js',
                as: 'script'
              },
              {
                rel: 'preload',
                href: 'https://www.upwork.com/static/vue-libs/vue-i18n.8.28.2.min.js',
                as: 'script'
              }
            ],
            htmlAttrs: {
              lang: 'en',
              theme: 'air-3-0',
              class : void 0
            },
            style: [],
            script: []
          },
          store: n,
          router: o,
          nuxt: {
            defaultTransition: Bs,
            transitions: [
              Bs
            ],
            setTransitions(e) {
              return Array.isArray(e) ||
              (e = [
                e
              ]),
              e = e.map(
                (
                  e => e = e ? 'string' == typeof e ? Object.assign({
                  }, Bs, {
                    name: e
                  }) : Object.assign({
                  }, Bs, e) : Bs
                )
              ),
              this.$options.nuxt.transitions = e,
              e
            },
            err: null,
            dateErr: null,
            error(t) {
              t = t ||
              null,
              c.context._errored = Boolean(t),
              t = t ? Object(T.p) (t) : null;
              let n = c.nuxt;
              return this &&
              (n = this.nuxt || this.$options.nuxt),
              n.dateErr = Date.now(),
              n.err = t,
              e &&
              (e.nuxt.error = t),
              t
            }
          },
          ...ne
        };
        n.app = c;
        const l = e ? e.next : e => c.router.push(e);
        let d;
        if (e) d = o.resolve(e.url).route;
         else {
          const path = Object(T.f) (o.options.base, o.options.mode);
          d = o.resolve(path).route
        }
        function m(e, t) {
          if (!e) throw new Error('inject(key, value) has no key provided');
          if (void 0 === t) throw new Error('inject(\''.concat(e, '\', value) has no value provided'));
          c[e = '$' + e] = t,
          c.context[e] ||
          (c.context[e] = t),
          n[e] = c[e];
          const o = '__nuxt_' + e + '_installed__';
          r.default[o] ||
          (
            r.default[o] = !0,
            r.default.use(
              (
                () => {
                  Object.prototype.hasOwnProperty.call(r.default.prototype, e) ||
                  Object.defineProperty(r.default.prototype, e, {
                    get() {
                      return this.$root.$options[e]
                    }
                  })
                }
              )
            )
          )
        }
        return await Object(T.t) (
          c,
          {
            store: n,
            route: d,
            next: l,
            error: c.nuxt.error.bind(c),
            payload: e ? e.payload : void 0,
            req: e ? e.req : void 0,
            res: e ? e.res : void 0,
            beforeRenderFns: e ? e.beforeRenderFns : void 0,
            beforeSerializeFns: e ? e.beforeSerializeFns : void 0,
            ssrContext: e
          }
        ),
        m('config', t),
        window.__NUXT__ &&
        window.__NUXT__.state &&
        n.replaceState(window.__NUXT__.state),
        'function' == typeof me &&
        await me(c.context, m),
        await he(c.context, m),
        await fe(c.context),
        'function' == typeof Ce &&
        await Ce(c.context, m),
        'function' == typeof Ne &&
        await Ne(c.context, m),
        await xe(c.context, m),
        'function' == typeof Ae &&
        await Ae(c.context, m),
        'function' == typeof $e &&
        await $e(c.context, m),
        'function' == typeof Pt &&
        await Pt(c.context, m),
        await Lt(c.context),
        await jt(c.context, m),
        'function' == typeof Gt &&
        await Gt(c.context, m),
        'function' == typeof Un &&
        await Un(c.context, m),
        'function' == typeof $n &&
        await $n(c.context, m),
        await qn(c.context),
        await Gn(c.context, m),
        'function' == typeof gi &&
        await gi(c.context, m),
        'function' == typeof ki &&
        await ki(c.context, m),
        'function' == typeof pr &&
        await pr(c.context, m),
        await zr(c.context, m),
        await Kr(c.context, m),
        await Xr(c.context),
        'function' == typeof Zr &&
        await Zr(c.context, m),
        'function' == typeof ea &&
        await ea(c.context, m),
        await na(c.context),
        'function' == typeof sa &&
        await sa(c.context, m),
        'function' == typeof da &&
        await da(c.context, m),
        'function' == typeof ma &&
        await ma(c.context, m),
        'function' == typeof ha &&
        await ha(c.context, m),
        await Oa(c.context, m),
        'function' == typeof Ra.a &&
        await Ra() (c.context, m),
        await La(c.context, m),
        await Ua(c.context),
        await Ja(c.context, m),
        'function' == typeof Xa &&
        await Xa(c.context, m),
        'function' == typeof So &&
        await So(c.context, m),
        await Mo(c.context, m),
        await Vo(c.context, m),
        'function' == typeof zo &&
        await zo(c.context, m),
        'function' == typeof Ko &&
        await Ko(c.context, m),
        'function' == typeof Xo &&
        await Xo(c.context, m),
        'function' == typeof is &&
        await is(c.context, m),
        'function' == typeof cs &&
        await cs(c.context, m),
        'function' == typeof bs &&
        await bs(c.context, m),
        await Ss(c.context),
        'function' == typeof Gs &&
        await Gs(c.context, m),
        await new Promise(
          (
            (e, t) => {
              {
                const {
                  route: t
                }
                = o.resolve(c.context.route.fullPath);
                if (!t.matched.length) return e()
              }
              o.replace(
                c.context.route.fullPath,
                e,
                (
                  n => {
                    if (!n._isRouter) return t(n);
                    if (2 !== n.type) return e();
                    const r = o.afterEach(
                      (
                        async(t, n) => {
                          c.context.route = await Object(T.j) (t),
                          c.context.params = t.params ||
                          {
                          },
                          c.context.query = t.query ||
                          {
                          },
                          r(),
                          e()
                        }
                      )
                    )
                  }
                )
              )
            }
          )
        ),
        {
          store: n,
          app: c,
          router: o
        }
      }
    },
    function (e, t) {
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return c
      }));
      var r = n(0),
      o = n(14);
      function c(e, data) {
        return Object(o.a) (e, data, r.default)
      }
    },
    function (e, t, n) {
      'use strict';
      const r = {};
      r['is-freelancer'] = n(151),
      r['is-freelancer'] = r['is-freelancer'].default ||
      r['is-freelancer'],
      t.a = r
    },
    function (e, t, n) {
      'use strict';
      var r = n(13);
      t.a = r.a
    },
    ,
    ,
    function (e, t, n) {
      'use strict';
      n.d(t, 'b', (function () {
        return menu
      })),
      n.d(t, 'a', (function () {
        return o
      }));
      var r = n(63);
      const o = {
        inited: !1,
        listeners: {
        },
        featuresDetected: {
        },
        featureDetectionCallbacks: {
        },
        failbackAvailableFeatures: [
          'transition-meta',
          'page-meta',
          'navigation-meta',
          'sso-meta'
        ],
        init() {
          if (this.inited) return;
          this.inited = !0,
          this.iosBridge = window.webkit &&
          window.webkit.messageHandlers.__IOS_BRIDGE__,
          this.androidBridge = window.__ANDROID_BRIDGE__;
          const e = window.__NATIVE_BRIDGE__ &&
          window.__NATIVE_BRIDGE__.onMessage;
          window.__NATIVE_BRIDGE__ ||
          (window.__NATIVE_BRIDGE__ = this.iosBridge || this.androidBridge),
          window.__NATIVE_BRIDGE__ &&
          (
            window.__NATIVE_BRIDGE__.onMessage = data => {
              e &&
              e(data),
              this.onMessage(data)
            }
          )
        },
        on(e, t, n) {
          this.init(),
          this.listeners[t] ||
          (this.listeners[t] = {}),
          this.listeners[t][e] = n
        },
        off(e, t) {
          delete this.listeners[t][e]
        },
        postMessage(e) {
          this.init(),
          this.iosBridge ? this.iosBridge.postMessage(e) : this.androidBridge &&
          this.androidBridge.postMessage(JSON.stringify(e))
        },
        onMessage(data) {
          const e = data.payload.id ||
          'no_id';
          this.listeners[e] &&
          this.listeners[e][data.type] &&
          this.listeners[e][data.type](data.payload)
        },
        isNewerVersion(e, t) {
          const n = e.split('.'),
          r = t.split('.');
          if (!r.length || !n.length) return !1;
          for (let e = 0; e < r.length; e += 1) {
            const a = parseInt(r[e], 10) ||
            0,
            b = parseInt(n[e], 10) ||
            0;
            if (a !== b) return a > b
          }
          return !0
        },
        isFeatureDetectionFailback() {
          const e = /(Freelancer)/gi.test(navigator.userAgent),
          t = navigator.userAgent.match(/[^/]+$/) [0].replace(/\([^()]*\)/, '').trim();
          return Object(r.c) (navigator.userAgent) ? e ? !this.isNewerVersion('1.12.2', t) : !this.isNewerVersion('1.9.2', t) : !Object(r.a) (navigator.userAgent) ||
          (
            e ? !this.isNewerVersion('1.10.0', t) : !this.isNewerVersion('1.8.0', t)
          )
        },
        onFeatureDetected(e, t) {
          const {
            id: n
          }
          = e,
          {
            features: r
          }
          = e,
          o = r &&
          r.length ? r : t;
          this.featuresDetected[n] = o,
          this.featureDetectionCallbacks[n] &&
          (
            this.featureDetectionCallbacks[n].forEach((e => {
              e(o)
            })),
            delete this.featureDetectionCallbacks[n]
          )
        },
        isNativeFeatureAvailable(e, t) {
          const n = ''.concat(e, '-meta');
          return new Promise(
            (
              r => {
                if (this.isFeatureDetectionFailback()) {
                  r(this.failbackAvailableFeatures.indexOf(n) >= 0)
                } else void 0 !== this.featuresDetected[n] ? this.resolveFeature(t, n, r) : this.initFeatureDetection(e, t, {
                  id: n,
                  resolve: r
                })
              }
            )
          )
        },
        resolveFeature(e, t, n) {
          e &&
          Array.isArray(this.featuresDetected[t]) ? n(this.featuresDetected[t].indexOf(e) >= 0) : n(Boolean(this.featuresDetected[t]))
        },
        initFeatureDetection(e, t, n) {
          const {
            id: r,
            resolve: o
          }
          = n;
          this.listeners[r] ||
          (
            this.postMessage({
              type: 'up/'.concat(e, '/META'),
              payload: {
                id: r
              }
            }),
            this.on(
              'up/'.concat(e, '/META/events/SUCCESS'),
              r,
              (e => this.onFeatureDetected(e, !0))
            ),
            this.on(
              'up/'.concat(e, '/v1/UNKNOWN'),
              r,
              (e => this.onFeatureDetected(e, !1))
            ),
            this.on(
              'up/'.concat(e, '/META/events/ERROR'),
              r,
              (e => this.onFeatureDetected(e, !1))
            )
          );
          this.featureDetectionCallbacks[r] ||
          (this.featureDetectionCallbacks[r] = []),
          this.featureDetectionCallbacks[r].push(
            (
              n => {
                this.listeners[r] &&
                (
                  this.off('up/'.concat(e, '/META/events/SUCCESS'), r),
                  this.off('up/'.concat(e, '/v1/UNKNOWN'), r),
                  this.off('up/'.concat(e, '/META/events/ERROR'), r)
                ),
                t &&
                Array.isArray(n) ? o(n.indexOf(t) >= 0) : o(Boolean(n))
              }
            )
          )
        }
      };
      var c = n(60);
      const l = {},
      d = {};
      function m(e) {
        let {
          id: t
        }
        = e;
        l[t] &&
        (l[t](), delete l[t], delete d[t])
      }
      function h(e) {
        return function (e) {
          const t = JSON.parse(JSON.stringify(e)),
          n = [];
          for (; t.length; ) {
            const e = t.pop();
            e.items &&
            e.items.length &&
            (
              e.items.forEach((e => {
                e.groups &&
                t.push(...e.groups)
              })),
              n.push(...e.items)
            )
          }
          return n
        }(e.groups).map((e => {
          const t = {};
          return t.id = e.id,
          t.isChecked = e.isChecked,
          t
        }))
      }
      function f(e, t, n, r) {
        const o = [],
        c = [],
        l = [
          ...d[t]
        ];
        for (; l.length; ) {
          const e = l.pop();
          Array.isArray(e[r]) &&
          l.push(...e[r]),
          c.push(e)
        }
        return e.forEach(
          (
            e => {
              const t = c.find((t => t[n] === e.id));
              t &&
              (t.isChecked = Boolean(e.isChecked), o.push(t))
            }
          )
        ),
        o
      }
      const v = {
        bottomSheet: 'BOTTOM_SHEET',
        dialog: 'DIALOG',
        modal: 'MODAL'
      };
      function y(e, t, n, r) {
        const o = t.items &&
        t.items.length ? t.items : [];
        return [{
          checkableBehavior: o.some((e => Array.isArray(e[t.nestedKey]))) ? 'none' : n,
          id: e,
          items: o.map(
            (
              e => {
                const option = {
                  id: e[t.itemKey],
                  label: e[t.itemText],
                  icon: e.icon,
                  isChecked: e.isChecked,
                  isCheckedExclusively: e.isCheckedExclusively,
                  isEnabled: !e.disabled
                };
                if (
                  t.itemSublabel &&
                  (option.subLabel = e[t.itemSublabel]),
                  Array.isArray(e[t.nestedKey])
                ) {
                  r === v.bottomSheet &&
                  (option.transitionBehavior = 'bottom_sheet');
                  const o = {
                    items: e[t.nestedKey],
                    itemText: t.itemText,
                    itemKey: t.itemKey,
                    nestedKey: t.nestedKey
                  };
                  t.itemSublabel &&
                  (o.itemSublabel = t.itemSublabel),
                  option.groups = y(e[t.itemKey], o, n, r)
                }
                return option
              }
            )
          )
        }
        ]
      }
      function w(e) {
        return e.groups.map(
          (
            t => {
              const n = {
                id: t[e.groupKey],
                label: t[e.groupText],
                checkableBehavior: t.checkableBehavior ||
                'none',
                items: t[e.groupItemsKey].map(
                  (
                    t => {
                      const n = {
                        id: t[e.itemKey],
                        label: t[e.itemText],
                        icon: t.icon,
                        isChecked: t.isChecked,
                        isCheckedExclusively: t.isCheckedExclusively,
                        isEnabled: !t.disabled
                      };
                      return e.itemSublabel &&
                      (n.subLabel = t[e.itemSublabel]),
                      n
                    }
                  )
                )
              };
              return t.checkableBehaviorParentId &&
              (n.checkableBehaviorParentId = t.checkableBehaviorParentId),
              n
            }
          )
        )
      }
      const menu = {
        generateId: e => e ||
        'sheet-id-'.concat(Object(c.b) ()),
        open(data) {
          const {
            id: e,
            hasFiltering: t,
            canTrackMultiSelect: n,
            query: r,
            typeUrlName: k
          }
          = function (data) {
            const e = data.id ||
            'sheet-id-'.concat(Object(c.b) ()),
            t = !!data.hasFiltering &&
            data.hasFiltering,
            n = 'multiple' === data.checkableBehavior;
            return {
              id: e,
              hasFiltering: t,
              canTrackMultiSelect: data.hasSelectSupport &&
              n,
              query: data.query ? data.query : '',
              typeUrlName: v[data.type]
            }
          }(data);
          let S = [];
          return S = Array.isArray(data.menuData.groups) ? w(data.menuData) : y(
            'group-id',
            data.menuData,
            data.checkableBehavior ? data.checkableBehavior : 'none',
            k
          ),
          t &&
          o.on(
            'up/menus/v1/'.concat(k, '/EVENTS/QUERY_CHANGED'),
            e,
            (
              e => function (e, t, n, r) {
                const {
                  query: o
                }
                = e,
                {
                  id: c
                }
                = e;
                r &&
                r(c, o, f(h(e), c, t, n))
              }(
                e,
                data.menuData.itemKey,
                data.menuData.nestedKey,
                data.filteringCallback
              )
            )
          ),
          n &&
          o.on(
            'up/menus/v1/'.concat(k, '/EVENTS/ITEM_SELECTED'),
            e,
            (
              e => function (e, t, n, r) {
                const {
                  id: o
                }
                = e;
                'function' == typeof r &&
                r(f(h(e), o, t, n))
              }(
                e,
                data.menuData.itemKey,
                data.menuData.nestedKey,
                data.multiSelectCallback
              )
            )
          ),
          o.on(
            'up/menus/v1/'.concat(k, '/EVENTS/QUERY_SUBMITTED'),
            e,
            (
              e => function (e, t, n, r) {
                const {
                  query: o
                }
                = e,
                {
                  id: c
                }
                = e;
                r &&
                r(c, o, f(h(e), c, t, n))
              }(
                e,
                data.menuData.itemKey,
                data.menuData.nestedKey,
                data.submitCallback
              )
            )
          ),
          o.on(
            'up/menus/v1/'.concat(k, '/EVENTS/DONE'),
            e,
            (
              e => function (e, t, n) {
                const {
                  id: r
                }
                = e;
                l[r] &&
                (l[r](f(h(e), r, t, n)), delete l[r], delete d[r])
              }(e, data.menuData.itemKey, data.menuData.nestedKey)
            )
          ),
          o.on('up/menus/v1/'.concat(k, '/EVENTS/DISMISSED'), e, m),
          Array.isArray(data.menuData.groups) ? d[e] = function (data) {
            let e = [];
            return data.menuData.groups.forEach(
              (
                t => {
                  Array.isArray(t[data.menuData.groupItemsKey]) &&
                  (e = e.concat(t[data.menuData.groupItemsKey]))
                }
              )
            ),
            e
          }(data) : d[e] = data.menuData.items,
          function (data, e) {
            const {
              id: t,
              hasFiltering: n,
              query: r,
              groups: c,
              typeUrlName: l
            }
            = e,
            d = data.theme ? {
              theme: data.theme
            }
             : {
            };
            o.postMessage({
              type: 'up/menus/v1/'.concat(l, '/PUSH'),
              payload: {
                id: t,
                title: data.title ? data.title : '',
                isTokenizer: !!data.isTokenizer,
                hasFiltering: n,
                query: r,
                queryPlaceholder: data.queryPlaceholder ? data.queryPlaceholder : '',
                groups: c,
                ...d
              }
            })
          }(data, {
            id: e,
            hasFiltering: t,
            query: r,
            groups: S,
            typeUrlName: k
          }),
          new Promise(
            (
              r => {
                l[e] = c => {
                  !function (e, t, n, r) {
                    const c = v[e];
                    n &&
                    o.off('up/menus/v1/'.concat(c, '/EVENTS/QUERY_CHANGED'), t),
                    r &&
                    o.off('up/menus/v1/'.concat(c, '/EVENTS/ITEM_SELECTED'), t),
                    o.off('up/menus/v1/'.concat(c, '/EVENTS/DONE'), t),
                    o.off('up/menus/v1/'.concat(c, '/EVENTS/DISMISSED'), t)
                  }(data.type, e, t, n),
                  Array.isArray(c) ? r(c) : r(null)
                }
              }
            )
          )
        },
        update(data) {
          const e = v[data.type];
          let t = [];
          t = Array.isArray(data.menuData.groups) ? w(data.menuData) : y(
            'group-id',
            data.menuData,
            data.checkableBehavior ? data.checkableBehavior : 'none',
            e
          );
          const n = {
            id: data.id,
            title: data.title ? data.title : '',
            isTokenizer: !!data.isTokenizer,
            hasFiltering: !!data.hasFiltering &&
            data.hasFiltering,
            query: data.query,
            queryPlaceholder: data.queryPlaceholder ? data.queryPlaceholder : '',
            groups: t
          };
          if (Array.isArray(data.menuData.groups)) {
            let e = [];
            data.menuData.groups.forEach(
              (
                t => {
                  Array.isArray(t[data.menuData.groupItemsKey]) &&
                  (e = e.concat(t[data.menuData.groupItemsKey]))
                }
              )
            ),
            d[data.id] = e
          } else d[data.id] = data.menuData.items;
          o.postMessage({
            payload: n,
            type: 'up/menus/v1/'.concat(e, '/UPDATE')
          })
        },
        close(data) {
          const e = v[data.type],
          t = void 0 === data.isAnimated ||
          !!data.isAnimated,
          n = {
            id: data.id,
            isAnimated: t
          };
          o.postMessage({
            payload: n,
            type: 'up/menus/v1/'.concat(e, '/DISMISS')
          })
        }
      }
    },
    function (e, t, n) {
      'use strict';
      function r(e) {
        let {
          enabledFeatures: t,
          featureOverride: n
        }
        = e;
        const r = n ? decodeURIComponent(n).split('&').reduce(
          (
            (e, t) => {
              const [n,
              r] = t.split('=');
              return {
                ...e,
                [
                  n
                ]: !!parseInt(r, 10)
              }
            }
          ),
          {
          }
        ) : {
        };
        const o = t ? function (e) {
          return 'string' != typeof e ||
          0 === e.length ? {
          }
           : e.trim().split(/\s?,\s?/).reduce(
            (
              (e, t) => {
                const n = !t.startsWith('!');
                return {
                  ...e,
                  [
                    n ? t : t.substring(1)
                  ]: n
                }
              }
            ),
            {
            }
          )
        }(t) : {
        };
        return {
          ...o,
          ...r
        }
      }
      function o(e, t, n) {
        let {
          visitorId: r,
          isVpn: o,
          userNid: c
        }
        = n;
        const l = (e, t) => e === t ||
        e === t.toString();
        return e.reduce(
          (
            (e, n) => {
              if (void 0 === t[n]) return e;
              const {
                enabled: d,
                allocation: m,
                vpn: h
              }
              = t[n];
              if (l(d, !1)) return e[n] = !1,
              e;
              if (void 0 !== h && l(h, !o)) return e[n] = !1,
              e;
              if (m) {
                const {
                  type: t,
                  percent: o
                }
                = m;
                let l;
                return 'visitor' === t &&
                (l = r),
                'user' !== t ||
                (l = c, l) ? 'company' === t ? e : !1 == !!l ? (e[n] = !1, e) : (
                  e[n] = parseInt(o, 10) > function (e) {
                    const table = [
                      0,
                      1996959894,
                      3993919788,
                      2567524794,
                      124634137,
                      1886057615,
                      3915621685,
                      2657392035,
                      249268274,
                      2044508324,
                      3772115230,
                      2547177864,
                      162941995,
                      2125561021,
                      3887607047,
                      2428444049,
                      498536548,
                      1789927666,
                      4089016648,
                      2227061214,
                      450548861,
                      1843258603,
                      4107580753,
                      2211677639,
                      325883990,
                      1684777152,
                      4251122042,
                      2321926636,
                      335633487,
                      1661365465,
                      4195302755,
                      2366115317,
                      997073096,
                      1281953886,
                      3579855332,
                      2724688242,
                      1006888145,
                      1258607687,
                      3524101629,
                      2768942443,
                      901097722,
                      1119000684,
                      3686517206,
                      2898065728,
                      853044451,
                      1172266101,
                      3705015759,
                      2882616665,
                      651767980,
                      1373503546,
                      3369554304,
                      3218104598,
                      565507253,
                      1454621731,
                      3485111705,
                      3099436303,
                      671266974,
                      1594198024,
                      3322730930,
                      2970347812,
                      795835527,
                      1483230225,
                      3244367275,
                      3060149565,
                      1994146192,
                      31158534,
                      2563907772,
                      4023717930,
                      1907459465,
                      112637215,
                      2680153253,
                      3904427059,
                      2013776290,
                      251722036,
                      2517215374,
                      3775830040,
                      2137656763,
                      141376813,
                      2439277719,
                      3865271297,
                      1802195444,
                      476864866,
                      2238001368,
                      4066508878,
                      1812370925,
                      453092731,
                      2181625025,
                      4111451223,
                      1706088902,
                      314042704,
                      2344532202,
                      4240017532,
                      1658658271,
                      366619977,
                      2362670323,
                      4224994405,
                      1303535960,
                      984961486,
                      2747007092,
                      3569037538,
                      1256170817,
                      1037604311,
                      2765210733,
                      3554079995,
                      1131014506,
                      879679996,
                      2909243462,
                      3663771856,
                      1141124467,
                      855842277,
                      2852801631,
                      3708648649,
                      1342533948,
                      654459306,
                      3188396048,
                      3373015174,
                      1466479909,
                      544179635,
                      3110523913,
                      3462522015,
                      1591671054,
                      702138776,
                      2966460450,
                      3352799412,
                      1504918807,
                      783551873,
                      3082640443,
                      3233442989,
                      3988292384,
                      2596254646,
                      62317068,
                      1957810842,
                      3939845945,
                      2647816111,
                      81470997,
                      1943803523,
                      3814918930,
                      2489596804,
                      225274430,
                      2053790376,
                      3826175755,
                      2466906013,
                      167816743,
                      2097651377,
                      4027552580,
                      2265490386,
                      503444072,
                      1762050814,
                      4150417245,
                      2154129355,
                      426522225,
                      1852507879,
                      4275313526,
                      2312317920,
                      282753626,
                      1742555852,
                      4189708143,
                      2394877945,
                      397917763,
                      1622183637,
                      3604390888,
                      2714866558,
                      953729732,
                      1340076626,
                      3518719985,
                      2797360999,
                      1068828381,
                      1219638859,
                      3624741850,
                      2936675148,
                      906185462,
                      1090812512,
                      3747672003,
                      2825379669,
                      829329135,
                      1181335161,
                      3412177804,
                      3160834842,
                      628085408,
                      1382605366,
                      3423369109,
                      3138078467,
                      570562233,
                      1426400815,
                      3317316542,
                      2998733608,
                      733239954,
                      1555261956,
                      3268935591,
                      3050360625,
                      752459403,
                      1541320221,
                      2607071920,
                      3965973030,
                      1969922972,
                      40735498,
                      2617837225,
                      3943577151,
                      1913087877,
                      83908371,
                      2512341634,
                      3803740692,
                      2075208622,
                      213261112,
                      2463272603,
                      3855990285,
                      2094854071,
                      198958881,
                      2262029012,
                      4057260610,
                      1759359992,
                      534414190,
                      2176718541,
                      4139329115,
                      1873836001,
                      414664567,
                      2282248934,
                      4279200368,
                      1711684554,
                      285281116,
                      2405801727,
                      4167216745,
                      1634467795,
                      376229701,
                      2685067896,
                      3608007406,
                      1308918612,
                      956543938,
                      2808555105,
                      3495958263,
                      1231636301,
                      1047427035,
                      2932959818,
                      3654703836,
                      1088359270,
                      936918000,
                      2847714899,
                      3736837829,
                      1202900863,
                      817233897,
                      3183342108,
                      3401237130,
                      1404277552,
                      615818150,
                      3134207493,
                      3453421203,
                      1423857449,
                      601450431,
                      3009837614,
                      3294710456,
                      1567103746,
                      711928724,
                      3020668471,
                      3272380065,
                      1510334235,
                      755167117
                    ];
                    let t = - 1;
                    const n = (e = unescape(encodeURI(e))).length;
                    for (let i = 0; i < n; i++) t = t >>> 8 ^ table[255 & (t ^ e.charCodeAt(i))];
                    return t ^= - 1,
                    t < 0 &&
                    (t += 4294967296),
                    t
                  }(l + n) % 100,
                  e
                ) : e
              }
              return e[n] = !0,
              e
            }
          ),
          {
          }
        )
      }
      n.d(t, 'a', (function () {
        return r
      })),
      n.d(t, 'b', (function () {
        return o
      }))
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return r
      })),
      n.d(t, 'b', (function () {
        return o
      })),
      n.d(t, 'c', (function () {
        return c
      }));
      const r = 'TLABS537UCProUmaPro',
      o = 'TLABS537UCProUmaPro',
      c = 'uma-295-llmgw-uma-fullscreen-v2'
    },
    function (e, t, n) {
      'use strict';
      var r = function () {
        return r = Object.assign ||
        function (e) {
          for (var s, i = 1, t = arguments.length; i < t; i++) for (var p in s = arguments[i]) Object.prototype.hasOwnProperty.call(s, p) &&
          (e[p] = s[p]);
          return e
        },
        r.apply(this, arguments)
      },
      o = function (e, t, n) {
        if (n || 2 === arguments.length) for (var r, i = 0, o = t.length; i < o; i++) !r &&
        i in t ||
        (r || (r = Array.prototype.slice.call(t, 0, i)), r[i] = t[i]);
        return e.concat(r || Array.prototype.slice.call(t))
      },
      c = function (e, t, n) {
        if (
          void 0 === n &&
          (n = !1),
          !e ||
          !t ||
          'object' != typeof e ||
          'object' != typeof t
        ) return e;
        var l = r({
        }, e);
        for (var d in t) t.hasOwnProperty(d) &&
        (
          t[d] instanceof Array &&
          e[d] instanceof Array ? l[d] = n ? o(o([], e[d], !0), t[d], !0) : t[d] : 'object' == typeof t[d] &&
          'object' == typeof e[d] ? l[d] = c(e[d], t[d], n) : l[d] = t[d]
        );
        return l
      },
      l = n(11),
      d = function (e, t, n, r) {
        if (!e.getEntriesByName) return !1;
        var o = e.getEntriesByName(t);
        return !!(o && o.length > 0) &&
        (
          n(o.reverse() [0]),
          r.clearMeasures &&
          r.clearMeasures(t),
          m.callbacks.delete(t),
          m.callbacks.size < 1 &&
          (
            m.observer.disconnect(),
            r.clearResourceTimings &&
            r.clearResourceTimings()
          ),
          !0
        )
      },
      m = {
        callbacks: new Map,
        observer: null,
        observe: function (e, t) {
          if (e && t) {
            var n = l.a.polyfill('performance', {
              doThrow: !1
            });
            (
              function (e, t) {
                return !m.observer &&
                e &&
                t &&
                (
                  m.observer = new t(
                    (
                      function (t) {
                        m.callbacks.forEach((function (n, r) {
                          d(t, r, n, e)
                        }))
                      }
                    )
                  ),
                  e.clearResourceTimings &&
                  e.clearResourceTimings()
                ),
                m.observer
              }
            ) (n, l.a.polyfill('PerformanceObserver', {
              doThrow: !1
            })) &&
            (
              d(n, e, t, n) ||
              (
                m.callbacks.size < 1 &&
                m.observer.observe({
                  entryTypes: [
                    'resource',
                    'measure'
                  ]
                }),
                m.callbacks.set(e, t)
              )
            )
          }
        }
      },
      h = m,
      f = function (e) {
        this.error = e
      },
      v = function () {
        return v = Object.assign ||
        function (e) {
          for (var s, i = 1, t = arguments.length; i < t; i++) for (var p in s = arguments[i]) Object.prototype.hasOwnProperty.call(s, p) &&
          (e[p] = s[p]);
          return e
        },
        v.apply(this, arguments)
      },
      y = function (e, t, n) {
        if (n || 2 === arguments.length) for (var r, i = 0, o = t.length; i < o; i++) !r &&
        i in t ||
        (r || (r = Array.prototype.slice.call(t, 0, i)), r[i] = t[i]);
        return e.concat(r || Array.prototype.slice.call(t))
      },
      w = 'Content-Type';
      function k(e) {
        var t;
        return void 0 === e &&
        (e = {}),
        null === (
          t = Object.entries(e).find((function (e) {
            return e[0].toLowerCase() === w.toLowerCase()
          }))
        ) ||
        void 0 === t ? void 0 : t[1]
      }
      function S(e) {
        return /^application\/.*json.*/.test(e)
      }
      var T = function () {
        function e(e, t, n, r, o, c) {
          void 0 === n &&
          (n = new Map),
          void 0 === r &&
          (r = []),
          void 0 === o &&
          (o = []),
          void 0 === c &&
          (c = []),
          this._url = e,
          this._options = t,
          this._catchers = n,
          this._resolvers = r,
          this._middlewares = o,
          this._deferredChain = c
        }
        return e.factory = function (t, n) {
          return void 0 === t &&
          (t = ''),
          void 0 === n &&
          (n = {}),
          new e(t, n)
        },
        e.prototype.selfFactory = function (t) {
          var n = void 0 === t ? {
          }
           : t,
          r = n.url,
          o = void 0 === r ? this._url : r,
          c = n.options,
          l = void 0 === c ? this._options : c,
          d = n.catchers,
          m = void 0 === d ? this._catchers : d,
          h = n.resolvers,
          f = void 0 === h ? this._resolvers : h,
          w = n.middlewares,
          k = void 0 === w ? this._middlewares : w,
          S = n.deferredChain,
          T = void 0 === S ? this._deferredChain : S;
          return new e(o, v({
          }, l), new Map(m), y([], f, !0), y([], k, !0), y([], T, !0))
        },
        e.prototype.defaults = function (e, t) {
          return void 0 === t &&
          (t = !1),
          l.a.defaults = t ? c(l.a.defaults, e) : e,
          this
        },
        e.prototype.errorType = function (e) {
          return l.a.errorType = e,
          this
        },
        e.prototype.polyfills = function (e) {
          return l.a.polyfills = v(v({
          }, l.a.polyfills), e),
          this
        },
        e.prototype.url = function (e, t) {
          if (void 0 === t && (t = !1), t) return this.selfFactory({
            url: e
          });
          var n = this._url.split('?');
          return this.selfFactory({
            url: n.length > 1 ? n[0] + e + '?' + n[1] : this._url + e
          })
        },
        e.prototype.options = function (e, t) {
          return void 0 === t &&
          (t = !0),
          this.selfFactory({
            options: t ? c(this._options, e) : e
          })
        },
        e.prototype.query = function (e, t) {
          return void 0 === t &&
          (t = !1),
          this.selfFactory({
            url: E(this._url, e, t)
          })
        },
        e.prototype.headers = function (e) {
          return this.selfFactory({
            options: c(this._options, {
              headers: e ||
              {
              }
            })
          })
        },
        e.prototype.accept = function (e) {
          return this.headers({
            Accept: e
          })
        },
        e.prototype.content = function (e) {
          var t;
          return this.headers(((t = {}) [w] = e, t))
        },
        e.prototype.auth = function (e) {
          return this.headers({
            Authorization: e
          })
        },
        e.prototype.catcher = function (e, t) {
          var n = new Map(this._catchers);
          return n.set(e, t),
          this.selfFactory({
            catchers: n
          })
        },
        e.prototype.signal = function (e) {
          return this.selfFactory({
            options: v(v({
            }, this._options), {
              signal: e.signal
            })
          })
        },
        e.prototype.resolve = function (e, t) {
          return void 0 === t &&
          (t = !1),
          this.selfFactory({
            resolvers: t ? [
              e
            ] : y(y([], this._resolvers, !0), [
              e
            ], !1)
          })
        },
        e.prototype.defer = function (e, t) {
          return void 0 === t &&
          (t = !1),
          this.selfFactory({
            deferredChain: t ? [
              e
            ] : y(y([], this._deferredChain, !0), [
              e
            ], !1)
          })
        },
        e.prototype.middlewares = function (e, t) {
          return void 0 === t &&
          (t = !1),
          this.selfFactory({
            middlewares: t ? e : y(y([], this._middlewares, !0), e, !0)
          })
        },
        e.prototype.method = function (e, t, body) {
          void 0 === t &&
          (t = {}),
          void 0 === body &&
          (body = null);
          var base = this.options(v(v({
          }, t), {
            method: e
          })),
          n = k(base._options.headers),
          r = 'object' == typeof body &&
          (!base._options.headers || !n || S(n));
          return function (e) {
            var t = e._url,
            n = e._catchers,
            r = e._resolvers,
            o = e._middlewares,
            d = e._options,
            m = new Map(n),
            v = c(l.a.defaults, d),
            y = l.a.polyfill('AbortController', {
              doThrow: !1,
              instance: !0
            });
            !v.signal &&
            y &&
            (v.signal = y.signal);
            var w = {
              ref: null,
              clear: function () {
                w.ref &&
                (clearTimeout(w.ref), w.ref = null)
              }
            },
            k = function (e) {
              return function (t) {
                return 0 === e.length ? t : 1 === e.length ? e[0](t) : e.reduceRight((function (n, r, o) {
                  return o === e.length - 2 ? r(n(t)) : r(n)
                }))
              }
            }(o) (l.a.polyfill('fetch')) (t, v),
            S = k.catch((function (e) {
              throw new f(e)
            })).then(
              (
                function (e) {
                  if (w.clear(), !e.ok) {
                    if ('opaque' === e.type) {
                      var t = new Error('Opaque response');
                      throw t.status = e.status,
                      t.response = e,
                      t
                    }
                    return e[l.a.errorType ||
                    'text']().then(
                      (
                        function (t) {
                          var n = new Error(t);
                          throw n[l.a.errorType ||
                          'text'] = t,
                          n.status = e.status,
                          n.response = e,
                          n
                        }
                      )
                    )
                  }
                  return e
                }
              )
            ),
            T = function (t) {
              return t.catch(
                (
                  function (t) {
                    w.clear();
                    var n = t instanceof f ? t.error : t;
                    if (t instanceof f && m.has('__fromFetch')) return m.get('__fromFetch') (n, e);
                    if (m.has(n.status)) return m.get(n.status) (n, e);
                    if (m.has(n.name)) return m.get(n.name) (n, e);
                    throw n
                  }
                )
              )
            },
            E = function (e) {
              return function (t) {
                return T(
                  e ? S.then((function (t) {
                    return t &&
                    t[e]()
                  })).then((function (e) {
                    return t ? t(e) : e
                  })) : S.then((function (e) {
                    return t ? t(e) : e
                  }))
                )
              }
            },
            I = {
              res: E(null),
              json: E('json'),
              blob: E('blob'),
              formData: E('formData'),
              arrayBuffer: E('arrayBuffer'),
              text: E('text'),
              perfs: function (e) {
                return k.then((function (t) {
                  return h.observe(t.url, e)
                })).catch((function () {
                })),
                I
              },
              setTimeout: function (time, e) {
                return void 0 === e &&
                (e = y),
                w.clear(),
                w.ref = setTimeout((function () {
                  return e.abort()
                }), time),
                I
              },
              controller: function () {
                return [y,
                I]
              },
              error: function (e, t) {
                return m.set(e, t),
                I
              },
              badRequest: function (e) {
                return I.error(400, e)
              },
              unauthorized: function (e) {
                return I.error(401, e)
              },
              forbidden: function (e) {
                return I.error(403, e)
              },
              notFound: function (e) {
                return I.error(404, e)
              },
              timeout: function (e) {
                return I.error(408, e)
              },
              internalError: function (e) {
                return I.error(500, e)
              },
              fetchError: function (e) {
                return I.error('__fromFetch', e)
              },
              onAbort: function (e) {
                return I.error('AbortError', e)
              }
            };
            return r.reduce((function (t, n) {
              return n(t, e)
            }), I)
          }(
            (base = body ? r ? base.json(body, n) : base.body(body) : base)._deferredChain.reduce((function (e, t) {
              return t(e, e._url, e._options)
            }), base)
          )
        },
        e.prototype.get = function (e) {
          return this.method('GET', e)
        },
        e.prototype.delete = function (e) {
          return this.method('DELETE', e)
        },
        e.prototype.put = function (body, e) {
          return this.method('PUT', e, body)
        },
        e.prototype.post = function (body, e) {
          return this.method('POST', e, body)
        },
        e.prototype.patch = function (body, e) {
          return this.method('PATCH', e, body)
        },
        e.prototype.head = function (e) {
          return this.method('HEAD', e)
        },
        e.prototype.opts = function (e) {
          return this.method('OPTIONS', e)
        },
        e.prototype.replay = function (e) {
          return this.method(this._options.method, e)
        },
        e.prototype.body = function (e) {
          return this.selfFactory({
            options: v(v({
            }, this._options), {
              body: e
            })
          })
        },
        e.prototype.json = function (e, t) {
          var n = k(this._options.headers);
          return this.content(t || S(n) && n || 'application/json').body(JSON.stringify(e))
        },
        e.prototype.formData = function (e, t) {
          return void 0 === t &&
          (t = !1),
          this.body(I(e, t))
        },
        e.prototype.formUrl = function (input) {
          return this.body(
            'string' == typeof input ? input : (
              e = input,
              Object.keys(e).map(
                (
                  function (t) {
                    var n = e[t];
                    return n instanceof Array ? n.map((function (e) {
                      return _(t, e)
                    })).join('&') : _(t, n)
                  }
                )
              ).join('&')
            )
          ).content('application/x-www-form-urlencoded');
          var e
        },
        e
      }(),
      E = function (e, t, n) {
        var r;
        if ('string' == typeof t) r = t;
         else {
          var o = l.a.polyfill('URLSearchParams', {
            instance: !0
          });
          for (var c in t) if (t[c] instanceof Array) for (var d = 0, m = t[c]; d < m.length; d++) {
            var h = m[d];
            o.append(c, h)
          } else o.append(c, t[c]);
          r = o.toString()
        }
        var f = e.split('?');
        return r ? n ||
        f.length < 2 ? f[0] + '?' + r : e + '&' + r : n ? f[0] : e
      };
      function I(e, t, n, r) {
        return void 0 === t &&
        (t = !1),
        void 0 === n &&
        (n = l.a.polyfill('FormData', {
          instance: !0
        })),
        void 0 === r &&
        (r = []),
        Object.entries(e).forEach(
          (
            function (e) {
              var o = e[0],
              c = e[1],
              l = r.reduce(
                (function (e, t) {
                  return e ? ''.concat(e, '[').concat(t, ']') : t
                }),
                null
              );
              if (l = l ? ''.concat(l, '[').concat(o, ']') : o, c instanceof Array) for (var d = 0, m = c; d < m.length; d++) {
                var h = m[d];
                n.append(l + '[]', h)
              } else !t ||
              'object' != typeof c ||
              t instanceof Array &&
              t.includes(o) ? n.append(l, c) : null !== c &&
              I(c, t, n, y(y([], r, !0), [
                o
              ], !1))
            }
          )
        ),
        n
      }
      function _(e, t) {
        return encodeURIComponent(e) + '=' + encodeURIComponent('object' == typeof t ? JSON.stringify(t) : '' + t)
      }
      var C = T.factory;
      C.default = T.factory;
      t.a = C
    },
    ,
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return O
      })),
      n.d(t, 'b', (function () {
        return x
      })),
      n.d(t, 'c', (function () {
        return $
      })),
      n.d(t, 'd', (function () {
        return K
      })),
      n.d(t, 'e', (function () {
        return ne
      })),
      n.d(t, 'f', (function () {
        return ae
      })),
      n.d(t, 'g', (function () {
        return D
      })),
      n.d(t, 'h', (function () {
        return R
      })),
      n.d(t, 'i', (function () {
        return V
      })),
      n.d(t, 'j', (function () {
        return te
      })),
      n.d(t, 'k', (function () {
        return re
      })),
      n.d(t, 'l', (function () {
        return ce
      }));
      var r,
      o,
      c,
      l,
      i,
      a = function () {
        return window.performance &&
        performance.getEntriesByType &&
        performance.getEntriesByType('navigation') [0]
      },
      d = function (e) {
        if ('loading' === document.readyState) return 'loading';
        var t = a();
        if (t) {
          if (e < t.domInteractive) return 'loading';
          if (
            0 === t.domContentLoadedEventStart ||
            e < t.domContentLoadedEventStart
          ) return 'dom-interactive';
          if (0 === t.domComplete || e < t.domComplete) return 'dom-content-loaded'
        }
        return 'complete'
      },
      u = function (e) {
        var t = e.nodeName;
        return 1 === e.nodeType ? t.toLowerCase() : t.toUpperCase().replace(/^#/, '')
      },
      m = function (e, t) {
        var n = '';
        try {
          for (; e && 9 !== e.nodeType; ) {
            var r = e,
            i = r.id ? '#' + r.id : u(r) + (
              r.classList &&
              r.classList.value &&
              r.classList.value.trim() &&
              r.classList.value.trim().length ? '.' + r.classList.value.trim().replace(/\s+/g, '.') : ''
            );
            if (n.length + i.length > (t || 100) - 1) return n ||
            i;
            if (n = n ? i + '>' + n : i, r.id) break;
            e = r.parentNode
          }
        } catch (e) {
        }
        return n
      },
      s = - 1,
      h = function () {
        return s
      },
      f = function (e) {
        addEventListener(
          'pageshow',
          (function (t) {
            t.persisted &&
            (s = t.timeStamp, e(t))
          }),
          !0
        )
      },
      v = function () {
        var e = a();
        return e &&
        e.activationStart ||
        0
      },
      y = function (e, t) {
        var n = a(),
        r = 'navigate';
        return h() >= 0 ? r = 'back-forward-cache' : n &&
        (
          document.prerendering ||
          v() > 0 ? r = 'prerender' : document.wasDiscarded ? r = 'restore' : n.type &&
          (r = n.type.replace(/_/g, '-'))
        ),
        {
          name: e,
          value: void 0 === t ? - 1 : t,
          rating: 'good',
          delta: 0,
          entries: [],
          id: 'v3-'.concat(Date.now(), '-').concat(Math.floor(8999999999999 * Math.random()) + 1000000000000),
          navigationType: r
        }
      },
      w = function (e, t, n) {
        try {
          if (PerformanceObserver.supportedEntryTypes.includes(e)) {
            var r = new PerformanceObserver(
              (
                function (e) {
                  Promise.resolve().then((function () {
                    t(e.getEntries())
                  }))
                }
              )
            );
            return r.observe(Object.assign({
              type: e,
              buffered: !0
            }, n || {
            })),
            r
          }
        } catch (e) {
        }
      },
      p = function (e, t, n, r) {
        var i,
        a;
        return function (o) {
          t.value >= 0 &&
          (o || r) &&
          ((a = t.value - (i || 0)) || void 0 === i) &&
          (
            i = t.value,
            t.delta = a,
            t.rating = function (e, t) {
              return e > t[1] ? 'poor' : e > t[0] ? 'needs-improvement' : 'good'
            }(t.value, n),
            e(t)
          )
        }
      },
      k = function (e) {
        requestAnimationFrame(
          (
            function () {
              return requestAnimationFrame((function () {
                return e()
              }))
            }
          )
        )
      },
      g = function (e) {
        var t = function (t) {
          'pagehide' !== t.type &&
          'hidden' !== document.visibilityState ||
          e(t)
        };
        addEventListener('visibilitychange', t, !0),
        addEventListener('pagehide', t, !0)
      },
      S = function (e) {
        var t = !1;
        return function (n) {
          t ||
          (e(n), t = !0)
        }
      },
      T = - 1,
      E = function () {
        return 'hidden' !== document.visibilityState ||
        document.prerendering ? 1 / 0 : 0
      },
      I = function (e) {
        'hidden' === document.visibilityState &&
        T > - 1 &&
        (T = 'visibilitychange' === e.type ? e.timeStamp : 0, b())
      },
      _ = function () {
        addEventListener('visibilitychange', I, !0),
        addEventListener('prerenderingchange', I, !0)
      },
      b = function () {
        removeEventListener('visibilitychange', I, !0),
        removeEventListener('prerenderingchange', I, !0)
      },
      C = function () {
        return T < 0 &&
        (
          T = E(),
          _(),
          f((function () {
            setTimeout((function () {
              T = E(),
              _()
            }), 0)
          }))
        ),
        {
          get firstHiddenTime() {
            return T
          }
        }
      },
      N = function (e) {
        document.prerendering ? addEventListener('prerenderingchange', (function () {
          return e()
        }), !0) : e()
      },
      x = [
        1800,
        3000
      ],
      A = function (e, t) {
        t = t ||
        {
        },
        N(
          (
            function () {
              var n,
              r = C(),
              i = y('FCP'),
              a = w(
                'paint',
                (
                  function (e) {
                    e.forEach(
                      (
                        function (e) {
                          'first-contentful-paint' === e.name &&
                          (
                            a.disconnect(),
                            e.startTime < r.firstHiddenTime &&
                            (i.value = Math.max(e.startTime - v(), 0), i.entries.push(e), n(!0))
                          )
                        }
                      )
                    )
                  }
                )
              );
              a &&
              (
                n = p(e, i, x, t.reportAllChanges),
                f(
                  (
                    function (r) {
                      i = y('FCP'),
                      n = p(e, i, x, t.reportAllChanges),
                      k((function () {
                        i.value = performance.now() - r.timeStamp,
                        n(!0)
                      }))
                    }
                  )
                )
              )
            }
          )
        )
      },
      O = [
        0.1,
        0.25
      ],
      D = function (e, t) {
        !function (e, t) {
          t = t ||
          {
          },
          A(
            S(
              (
                function () {
                  var n,
                  r = y('CLS', 0),
                  i = 0,
                  a = [],
                  o = function (e) {
                    e.forEach(
                      (
                        function (e) {
                          if (!e.hadRecentInput) {
                            var t = a[0],
                            n = a[a.length - 1];
                            i &&
                            e.startTime - n.startTime < 1000 &&
                            e.startTime - t.startTime < 5000 ? (i += e.value, a.push(e)) : (i = e.value, a = [
                              e
                            ])
                          }
                        }
                      )
                    ),
                    i > r.value &&
                    (r.value = i, r.entries = a, n())
                  },
                  u = w('layout-shift', o);
                  u &&
                  (
                    n = p(e, r, O, t.reportAllChanges),
                    g((function () {
                      o(u.takeRecords()),
                      n(!0)
                    })),
                    f(
                      (
                        function () {
                          i = 0,
                          r = y('CLS', 0),
                          n = p(e, r, O, t.reportAllChanges),
                          k((function () {
                            return n()
                          }))
                        }
                      )
                    ),
                    setTimeout(n, 0)
                  )
                }
              )
            )
          )
        }(
          (
            function (t) {
              !function (e) {
                if (e.entries.length) {
                  var t = e.entries.reduce((function (e, t) {
                    return e &&
                    e.value > t.value ? e : t
                  }));
                  if (t && t.sources && t.sources.length) {
                    var n = (r = t.sources).find((function (e) {
                      return e.node &&
                      1 === e.node.nodeType
                    })) ||
                    r[0];
                    if (n) return void (
                      e.attribution = {
                        largestShiftTarget: m(n.node),
                        largestShiftTime: t.startTime,
                        largestShiftValue: t.value,
                        largestShiftSource: n,
                        largestShiftEntry: t,
                        loadState: d(t.startTime)
                      }
                    )
                  }
                }
                var r;
                e.attribution = {}
              }(t),
              e(t)
            }
          ),
          t
        )
      },
      R = function (e, t) {
        A(
          (
            function (t) {
              !function (e) {
                if (e.entries.length) {
                  var t = a(),
                  n = e.entries[e.entries.length - 1];
                  if (t) {
                    var r = t.activationStart ||
                    0,
                    i = Math.max(0, t.responseStart - r);
                    return void (
                      e.attribution = {
                        timeToFirstByte: i,
                        firstByteToFCP: e.value - i,
                        loadState: d(e.entries[0].startTime),
                        navigationEntry: t,
                        fcpEntry: n
                      }
                    )
                  }
                }
                e.attribution = {
                  timeToFirstByte: 0,
                  firstByteToFCP: e.value,
                  loadState: d(h())
                }
              }(t),
              e(t)
            }
          ),
          t
        )
      },
      P = {
        passive: !0,
        capture: !0
      },
      L = new Date,
      U = function (e, i) {
        r ||
        (r = i, o = e, c = new Date, q(removeEventListener), F())
      },
      F = function () {
        if (o >= 0 && o < c - L) {
          var i = {
            entryType: 'first-input',
            name: r.type,
            target: r.target,
            cancelable: r.cancelable,
            startTime: r.timeStamp,
            processingStart: r.timeStamp + o
          };
          l.forEach((function (e) {
            e(i)
          })),
          l = []
        }
      },
      M = function (e) {
        if (e.cancelable) {
          var t = (e.timeStamp > 1000000000000 ? new Date : performance.now()) - e.timeStamp;
          'pointerdown' == e.type ? function (e, t) {
            var n = function () {
              U(e, t),
              i()
            },
            r = function () {
              i()
            },
            i = function () {
              removeEventListener('pointerup', n, P),
              removeEventListener('pointercancel', r, P)
            };
            addEventListener('pointerup', n, P),
            addEventListener('pointercancel', r, P)
          }(t, e) : U(t, e)
        }
      },
      q = function (e) {
        [
          'mousedown',
          'keydown',
          'touchstart',
          'pointerdown'
        ].forEach((function (t) {
          return e(t, M, P)
        }))
      },
      $ = [
        100,
        300
      ],
      j = function (e, i) {
        i = i ||
        {
        },
        N(
          (
            function () {
              var a,
              t = C(),
              u = y('FID'),
              n = function (e) {
                e.startTime < t.firstHiddenTime &&
                (
                  u.value = e.processingStart - e.startTime,
                  u.entries.push(e),
                  a(!0)
                )
              },
              s = function (e) {
                e.forEach(n)
              },
              c = w('first-input', s);
              a = p(e, u, $, i.reportAllChanges),
              c &&
              g(S((function () {
                s(c.takeRecords()),
                c.disconnect()
              }))),
              c &&
              f(
                (
                  function () {
                    var t;
                    u = y('FID'),
                    a = p(e, u, $, i.reportAllChanges),
                    l = [],
                    o = - 1,
                    r = null,
                    q(addEventListener),
                    t = n,
                    l.push(t),
                    F()
                  }
                )
              )
            }
          )
        )
      },
      V = function (e, t) {
        j(
          (
            function (t) {
              !function (e) {
                var t = e.entries[0];
                e.attribution = {
                  eventTarget: m(t.target),
                  eventType: t.name,
                  eventTime: t.startTime,
                  eventEntry: t,
                  loadState: d(t.startTime)
                }
              }(t),
              e(t)
            }
          ),
          t
        )
      },
      G = 0,
      B = 1 / 0,
      z = 0,
      H = function (e) {
        e.forEach(
          (
            function (e) {
              e.interactionId &&
              (
                B = Math.min(B, e.interactionId),
                z = Math.max(z, e.interactionId),
                G = z ? (z - B) / 7 + 1 : 0
              )
            }
          )
        )
      },
      Q = function () {
        return i ? G : performance.interactionCount ||
        0
      },
      W = function () {
        'interactionCount' in performance ||
        i ||
        (
          i = w('event', H, {
            type: 'event',
            buffered: !0,
            durationThreshold: 0
          })
        )
      },
      K = [
        200,
        500
      ],
      J = 0,
      X = function () {
        return Q() - J
      },
      Z = [],
      Y = {},
      ee = function (e) {
        var t = Z[Z.length - 1],
        n = Y[e.interactionId];
        if (n || Z.length < 10 || e.duration > t.latency) {
          if (n) n.entries.push(e),
          n.latency = Math.max(n.latency, e.duration);
           else {
            var r = {
              id: e.interactionId,
              latency: e.duration,
              entries: [
                e
              ]
            };
            Y[r.id] = r,
            Z.push(r)
          }
          Z.sort((function (e, t) {
            return t.latency - e.latency
          })),
          Z.splice(10).forEach((function (e) {
            delete Y[e.id]
          }))
        }
      },
      te = function (e, t) {
        !function (e, t) {
          t = t ||
          {
          },
          N(
            (
              function () {
                var n;
                W();
                var r,
                i = y('INP'),
                a = function (e) {
                  e.forEach(
                    (
                      function (e) {
                        e.interactionId &&
                        ee(e),
                        'first-input' === e.entryType &&
                        !Z.some(
                          (
                            function (t) {
                              return t.entries.some(
                                (
                                  function (t) {
                                    return e.duration === t.duration &&
                                    e.startTime === t.startTime
                                  }
                                )
                              )
                            }
                          )
                        ) &&
                        ee(e)
                      }
                    )
                  );
                  var t,
                  n = (t = Math.min(Z.length - 1, Math.floor(X() / 50)), Z[t]);
                  n &&
                  n.latency !== i.value &&
                  (i.value = n.latency, i.entries = n.entries, r())
                },
                o = w(
                  'event',
                  a,
                  {
                    durationThreshold: null !== (n = t.durationThreshold) &&
                    void 0 !== n ? n : 40
                  }
                );
                r = p(e, i, K, t.reportAllChanges),
                o &&
                (
                  'PerformanceEventTiming' in window &&
                  'interactionId' in PerformanceEventTiming.prototype &&
                  o.observe({
                    type: 'first-input',
                    buffered: !0
                  }),
                  g(
                    (
                      function () {
                        a(o.takeRecords()),
                        i.value < 0 &&
                        X() > 0 &&
                        (i.value = 0, i.entries = []),
                        r(!0)
                      }
                    )
                  ),
                  f(
                    (
                      function () {
                        Z = [],
                        J = Q(),
                        i = y('INP'),
                        r = p(e, i, K, t.reportAllChanges)
                      }
                    )
                  )
                )
              }
            )
          )
        }(
          (
            function (t) {
              !function (e) {
                if (e.entries.length) {
                  var t = e.entries.sort(
                    (
                      function (e, t) {
                        return t.duration - e.duration ||
                        t.processingEnd - t.processingStart - (e.processingEnd - e.processingStart)
                      }
                    )
                  ) [0],
                  n = e.entries.find((function (e) {
                    return e.target
                  }));
                  e.attribution = {
                    eventTarget: m(n && n.target),
                    eventType: t.name,
                    eventTime: t.startTime,
                    eventEntry: t,
                    loadState: d(t.startTime)
                  }
                } else e.attribution = {}
              }(t),
              e(t)
            }
          ),
          t
        )
      },
      ne = [
        2500,
        4000
      ],
      ie = {},
      re = function (e, t) {
        !function (e, t) {
          t = t ||
          {
          },
          N(
            (
              function () {
                var n,
                r = C(),
                i = y('LCP'),
                a = function (e) {
                  var t = e[e.length - 1];
                  t &&
                  t.startTime < r.firstHiddenTime &&
                  (i.value = Math.max(t.startTime - v(), 0), i.entries = [
                    t
                  ], n())
                },
                o = w('largest-contentful-paint', a);
                if (o) {
                  n = p(e, i, ne, t.reportAllChanges);
                  var u = S(
                    (
                      function () {
                        ie[i.id] ||
                        (a(o.takeRecords()), o.disconnect(), ie[i.id] = !0, n(!0))
                      }
                    )
                  );
                  [
                    'keydown',
                    'click'
                  ].forEach(
                    (
                      function (e) {
                        addEventListener(e, (function () {
                          return setTimeout(u, 0)
                        }), !0)
                      }
                    )
                  ),
                  g(u),
                  f(
                    (
                      function (r) {
                        i = y('LCP'),
                        n = p(e, i, ne, t.reportAllChanges),
                        k(
                          (
                            function () {
                              i.value = performance.now() - r.timeStamp,
                              ie[i.id] = !0,
                              n(!0)
                            }
                          )
                        )
                      }
                    )
                  )
                }
              }
            )
          )
        }(
          (
            function (t) {
              !function (e) {
                if (e.entries.length) {
                  var t = a();
                  if (t) {
                    var n = t.activationStart ||
                    0,
                    r = e.entries[e.entries.length - 1],
                    i = r.url &&
                    performance.getEntriesByType('resource').filter((function (e) {
                      return e.name === r.url
                    })) [0],
                    o = Math.max(0, t.responseStart - n),
                    u = Math.max(o, i ? (i.requestStart || i.startTime) - n : 0),
                    s = Math.max(u, i ? i.responseEnd - n : 0),
                    c = Math.max(s, r ? r.startTime - n : 0),
                    l = {
                      element: m(r.element),
                      timeToFirstByte: o,
                      resourceLoadDelay: u - o,
                      resourceLoadTime: s - u,
                      elementRenderDelay: c - s,
                      navigationEntry: t,
                      lcpEntry: r
                    };
                    return r.url &&
                    (l.url = r.url),
                    i &&
                    (l.lcpResourceEntry = i),
                    void (e.attribution = l)
                  }
                }
                e.attribution = {
                  timeToFirstByte: 0,
                  resourceLoadDelay: 0,
                  resourceLoadTime: 0,
                  elementRenderDelay: e.value
                }
              }(t),
              e(t)
            }
          ),
          t
        )
      },
      ae = [
        800,
        1800
      ],
      oe = function e(t) {
        document.prerendering ? N((function () {
          return e(t)
        })) : 'complete' !== document.readyState ? addEventListener('load', (function () {
          return e(t)
        }), !0) : setTimeout(t, 0)
      },
      se = function (e, t) {
        t = t ||
        {
        };
        var n = y('TTFB'),
        r = p(e, n, ae, t.reportAllChanges);
        oe(
          (
            function () {
              var i = a();
              if (i) {
                var o = i.responseStart;
                if (o <= 0 || o > performance.now()) return;
                n.value = Math.max(o - v(), 0),
                n.entries = [
                  i
                ],
                r(!0),
                f(
                  (
                    function () {
                      n = y('TTFB', 0),
                      (r = p(e, n, ae, t.reportAllChanges)) (!0)
                    }
                  )
                )
              }
            }
          )
        )
      },
      ce = function (e, t) {
        se(
          (
            function (t) {
              !function (e) {
                if (e.entries.length) {
                  var t = e.entries[0],
                  n = t.activationStart ||
                  0,
                  r = Math.max(t.domainLookupStart - n, 0),
                  i = Math.max(t.connectStart - n, 0),
                  a = Math.max(t.requestStart - n, 0);
                  e.attribution = {
                    waitingTime: r,
                    dnsTime: i - r,
                    connectionTime: a - i,
                    requestTime: e.value - a,
                    navigationEntry: t
                  }
                } else e.attribution = {
                  waitingTime: 0,
                  dnsTime: 0,
                  connectionTime: 0,
                  requestTime: 0
                }
              }(t),
              e(t)
            }
          ),
          t
        )
      }
    },
    function (e, t, n) {
      'use strict';
      var r = {
        name: 'NavStandardLogo'
      },
      o = (n(167), n(2)),
      component = Object(o.a) (
        r,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'span',
              {
                staticClass: 'nav-logo'
              },
              [
                t(
                  'svg',
                  {
                    attrs: {
                      xmlns: 'http://www.w3.org/2000/svg',
                      viewBox: '0 0 102 28',
                      role: 'img',
                      'aria-hidden': 'true'
                    }
                  },
                  [
                    t(
                      'path',
                      {
                        attrs: {
                          fill: 'var(--nav-logo)',
                          d: 'M28.18,19.06A6.54,6.54,0,0,1,23,16c.67-5.34,2.62-7,5.2-7s4.54,2,4.54,5-2,5-4.54,5m0-13.34a7.77,7.77,0,0,0-7.9,6.08,26,26,0,0,1-1.93-5.62H12v7.9c0,2.87-1.3,5-3.85,5s-4-2.12-4-5l0-7.9H.49v7.9A8.61,8.61,0,0,0,2.6,20a7.27,7.27,0,0,0,5.54,2.35c4.41,0,7.5-3.39,7.5-8.24V8.77a25.87,25.87,0,0,0,3.66,8.05L17.34,28h3.72l1.29-7.92a11,11,0,0,0,1.36,1,8.32,8.32,0,0,0,4.14,1.28h.34A8.1,8.1,0,0,0,36.37,14a8.12,8.12,0,0,0-8.19-8.31'
                        }
                      }
                    ),
                    e._v(' '),
                    t(
                      'path',
                      {
                        attrs: {
                          fill: 'var(--nav-logo)',
                          d: 'M80.8,7.86V6.18H77.2V21.81h3.65V15.69c0-3.77.34-6.48,5.4-6.13V6c-2.36-.18-4.2.31-5.45,1.87'
                        }
                      }
                    ),
                    e._v(' '),
                    t(
                      'polygon',
                      {
                        attrs: {
                          fill: 'var(--nav-logo)',
                          points: '55.51 6.17 52.87 17.11 50.05 6.17 45.41 6.17 42.59 17.11 39.95 6.17 36.26 6.17 40.31 21.82 44.69 21.82 47.73 10.71 50.74 21.82 55.12 21.82 59.4 6.17 55.51 6.17'
                        }
                      }
                    ),
                    e._v(' '),
                    t(
                      'path',
                      {
                        attrs: {
                          fill: 'var(--nav-logo)',
                          d: 'M67.42,19.07c-2.59,0-4.53-2.05-4.53-5s2-5,4.53-5S72,11,72,14s-2,5-4.54,5m0-13.35A8.1,8.1,0,0,0,59.25,14,8.18,8.18,0,1,0,75.6,14a8.11,8.11,0,0,0-8.18-8.31'
                        }
                      }
                    ),
                    e._v(' '),
                    t(
                      'path',
                      {
                        attrs: {
                          fill: 'var(--nav-logo)',
                          d: 'M91.47,14.13h.84l5.09,7.69h4.11l-5.85-8.53a7.66,7.66,0,0,0,4.74-7.11H96.77c0,3.37-2.66,4.65-5.3,4.65V0H87.82V21.82h3.64Z'
                        }
                      }
                    )
                  ]
                )
              ]
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      );
      t.a = component.exports
    },
    function (e, t, n) {
      'use strict';
      function r(e, t) {
        const n = {};
        return e ? (
          e.split('&').forEach((e => {
            const [r,
            o] = e.split('=');
            n[r] = 'ff' === t ? '1' === o : o
          })),
          n
        ) : n
      }
      function o(e, t) {
        const n = ''.concat(t, '_'),
        r = {};
        return Object.keys(e).forEach(
          (
            o => {
              if (o.startsWith(n)) {
                const c = o.replace(n, '');
                r[c] = 'ff' === t ? '1' === e[o] ||
                'true' === e[o] : e[o]
              }
            }
          )
        ),
        r
      }
      n.d(t, 'a', (function () {
        return r
      })),
      n.d(t, 'b', (function () {
        return o
      }))
    },
    function (e, t, n) {
      'use strict';
      var r = n(49),
      o = n.n(r),
      c = {
        components: {
          StandardLogo: n(29).a
        },
        injectStyles: [
          o.a
        ]
      },
      l = (n(169), n(2)),
      component = Object(l.a) (
        c,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'header',
              {
                staticClass: 'nav-parent-wrapper'
              },
              [
                t(
                  'div',
                  {
                    staticClass: 'nav-skeleton nav-v2'
                  },
                  [
                    t('StandardLogo'),
                    e._v(' '),
                    t('div', {
                      staticClass: 'nav-skeleton-spacer nav-m-none'
                    }),
                    e._v(' '),
                    t(
                      'div',
                      {
                        staticClass: 'nav-skeleton-shape nav-skeleton-icons nav-m-none'
                      }
                    ),
                    e._v(' '),
                    t(
                      'div',
                      {
                        staticClass: 'nav-skeleton-shape nav-skeleton-shape-circle nav-skeleton-avatar nav-m-none'
                      }
                    )
                  ],
                  1
                )
              ]
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      );
      t.a = component.exports
    },
    ,
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return r
      }));
      const r = 'authSubordinateTokenCleaner'
    },
    function (e, t, n) {
      'use strict';
      var r = {
        name: 'NoSsr',
        functional: !0,
        props: {
          placeholder: String,
          placeholderTag: {
            type: String,
          default:
            'div'
          }
        },
        render: function (e, t) {
          var n = t.parent,
          r = t.slots,
          o = t.props,
          c = r(),
          l = c.default;
          void 0 === l &&
          (l = []);
          var d = c.placeholder;
          return n._isMounted ? l : (
            n.$once('hook:mounted', (function () {
              n.$forceUpdate()
            })),
            o.placeholderTag &&
            (o.placeholder || d) ? e(
              o.placeholderTag,
              {
                class : [
                  'no-ssr-placeholder'
                ]
              },
              o.placeholder ||
              d
            ) : l.length > 0 ? l.map((function () {
              return e(!1)
            })) : e(!1)
          )
        }
      };
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'b', (function () {
        return d
      })),
      n.d(t, 'c', (function () {
        return m
      })),
      n.d(t, 'd', (function () {
        return f
      })),
      t.a = Vuex;
      const {
        Store: r,
        createLogger: o,
        createNamespacedHelpers: c,
        createStore: l,
        mapActions: d,
        mapGetters: m,
        mapMutations: h,
        mapState: f,
        storeKey: v,
        useStore: y
      }
      = Vuex
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          function r(t) {
            let n = '';
            return t &&
            (
              n = e.env.NUXT_API_BASE_URL ||
              function (t) {
                let n = '';
                if (t) if (t.headers['x-forwarded-host']) n = ''.concat(t.headers['x-forwarded-proto'], '://').concat(t.headers['x-forwarded-host']);
                 else {
                  const r = /localhost|\d+\.\d+\.\d+\.\d+/.test(t.headers.host);
                  n = ''.concat(r && 'true' !== e.env.NUXT_HTTPS ? 'http' : 'https', '://').concat(t.headers.host)
                }
                return n
              }(t)
            ),
            n
          }
          n.d(t, 'a', (function () {
            return r
          }))
        }
      ).call(this, n(22))
    },
    ,
    function (e, t, n) {
      'use strict';
      function r(e, t, label, n) {
        e &&
        'undefined' != typeof window &&
        e.track({
          sublocation: 'smf',
          event: t,
          label: label,
          data: {
            template_uid: n
          }
        })
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return d
      }));
      var r = n(6);
      const o = () => ({
        items: null,
        error: null,
        navigationRoute: []
      }),
      c = {
        setTopNav(e, t) {
          e.items = t
        },
        setLoading(e, t) {
          e.loading = t
        },
        setLoaded(e, t) {
          e.loaded = t
        },
        setError(e, t) {
          e.error = t
        },
        setNavigationRoute(e, t) {
          var n;
          e.navigationRoute = t,
          null === (n = Object(r.a) ()) ||
          void 0 === n ||
          n.setState('nav.activeItems', t)
        }
      },
      l = {
        async load(e) {
          let {
            state: t,
            commit: n
          }
          = e;
          return t.loading ||
          t.loaded ? null : (
            n('setLoading', !0),
            await this.$httpGql({
              requestAlias: 'user-top-nav',
              handleApiErrors: !0,
              cache: {
                strategy: 'cacheAndNetwork'
              },
              onSuccess: e => {
                n('setTopNav', e.data.navigation.items),
                n('setLoaded', !0)
              },
              onError: (e, t) => !t &&
              n('setError', !0)
            }).post({
              query: 'query {\n        navigation(blockId: "top") {\n          items {\n            id\n            label\n            link\n            items {\n              id\n              label\n              link\n              items {\n                id\n                label\n                link\n              }\n            }\n          }\n        }\n      }'
            }).json(),
            n('setLoading', !1),
            !0
          )
        }
      };
      function d(e) {
        if (!e.hasModule('topNav')) {
          var t;
          e.registerModule(
            'topNav',
            {
              namespaced: !0,
              state: o,
              actions: l,
              mutations: c
            },
            {
              preserveState: !!e.state.topNav
            }
          );
          const d = null === (t = e.state.topNav) ||
          void 0 === t ? void 0 : t.navigationRoute;
          var n;
          if (d) null === (n = Object(r.a) ()) ||
          void 0 === n ||
          n.setState('nav.activeItems', d)
        }
      }
    },
    function (e, t, n) {
      e.exports = function () {
        'use strict';
        function e(e, t) {
          if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function')
        }
        function t(e, t) {
          for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable ||
            !1,
            r.configurable = !0,
            'value' in r &&
            (r.writable = !0),
            Object.defineProperty(e, r.key, r)
          }
        }
        function n(e, n, r) {
          return n &&
          t(e.prototype, n),
          r &&
          t(e, r),
          e
        }
        function r(e, t, n) {
          return t in e ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }) : e[t] = n,
          e
        }
        function o(e, t) {
          var n = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var r = Object.getOwnPropertySymbols(e);
            t &&
            (
              r = r.filter(
                (
                  function (t) {
                    return Object.getOwnPropertyDescriptor(e, t).enumerable
                  }
                )
              )
            ),
            n.push.apply(n, r)
          }
          return n
        }
        function s(e) {
          for (var t = 1; t < arguments.length; t++) {
            var n = null != arguments[t] ? arguments[t] : {
            };
            t % 2 ? o(Object(n), !0).forEach((function (t) {
              r(e, t, n[t])
            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : o(Object(n)).forEach(
              (
                function (t) {
                  Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t))
                }
              )
            )
          }
          return e
        }
        function i(e) {
          return function (e) {
            if (Array.isArray(e)) return c(e)
          }(e) ||
          function (e) {
            if ('undefined' != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e)
          }(e) ||
          a(e) ||
          function () {
            throw new TypeError(
              'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            )
          }()
        }
        function a(e, t) {
          if (e) {
            if ('string' == typeof e) return c(e, t);
            var n = Object.prototype.toString.call(e).slice(8, - 1);
            return 'Object' === n &&
            e.constructor &&
            (n = e.constructor.name),
            'Map' === n ||
            'Set' === n ? Array.from(e) : 'Arguments' === n ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? c(e, t) : void 0
          }
        }
        function c(e, t) {
          (null == t || t > e.length) &&
          (t = e.length);
          for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];
          return r
        }
        function u(e) {
          if ('undefined' == typeof Symbol || null == e[Symbol.iterator]) {
            if (Array.isArray(e) || (e = a(e))) {
              var t = 0,
              n = function () {
              };
              return {
                s: n,
                n: function () {
                  return t >= e.length ? {
                    done: !0
                  }
                   : {
                    done: !1,
                    value: e[t++]
                  }
                },
                e: function (e) {
                  throw e
                },
                f: n
              }
            }
            throw new TypeError(
              'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            )
          }
          var r,
          o,
          s = !0,
          i = !1;
          return {
            s: function () {
              r = e[Symbol.iterator]()
            },
            n: function () {
              var e = r.next();
              return s = e.done,
              e
            },
            e: function (e) {
              i = !0,
              o = e
            },
            f: function () {
              try {
                s ||
                null == r.return ||
                r.return()
              } finally {
                if (i) throw o
              }
            }
          }
        }
        var l = {};
        l[l.Fatal = 0] = 'Fatal',
        l[l.Error = 0] = 'Error',
        l[l.Warn = 1] = 'Warn',
        l[l.Log = 2] = 'Log',
        l[l.Info = 3] = 'Info',
        l[l.Success = 3] = 'Success',
        l[l.Debug = 4] = 'Debug',
        l[l.Trace = 5] = 'Trace',
        l[l.Silent = - 1 / 0] = 'Silent',
        l[l.Verbose = 1 / 0] = 'Verbose';
        var d = {
          silent: {
            level: - 1
          },
          fatal: {
            level: l.Fatal
          },
          error: {
            level: l.Error
          },
          warn: {
            level: l.Warn
          },
          log: {
            level: l.Log
          },
          info: {
            level: l.Info
          },
          success: {
            level: l.Success
          },
          debug: {
            level: l.Debug
          },
          trace: {
            level: l.Trace
          },
          verbose: {
            level: l.Trace
          },
          ready: {
            level: l.Info
          },
          start: {
            level: l.Info
          }
        };
        function m(e) {
          return t = e,
          !(
            '[object Object]' !== Object.prototype.toString.call(t) ||
            !e.message &&
            !e.args ||
            e.stack
          );
          var t
        }
        var p = !1,
        h = [],
        f = function () {
          function t() {
            var n = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : {
            };
            for (
              var r in e(this, t),
              this._reporters = n.reporters ||
              [],
              this._types = n.types ||
              d,
              this.level = void 0 !== n.level ? n.level : 3,
              this._defaults = n.defaults ||
              {
              },
              this._async = void 0 !== n.async ? n.async : void 0,
              this._stdout = n.stdout,
              this._stderr = n.stderr,
              this._mockFn = n.mockFn,
              this._throttle = n.throttle ||
              1000,
              this._throttleMin = n.throttleMin ||
              5,
              this._types
            ) {
              var o = s(s({
                type: r
              }, this._types[r]), this._defaults);
              this[r] = this._wrapLogFn(o),
              this[r].raw = this._wrapLogFn(o, !0)
            }
            this._mockFn &&
            this.mockTypes(),
            this._lastLogSerialized = void 0,
            this._lastLog = void 0,
            this._lastLogTime = void 0,
            this._lastLogCount = 0,
            this._throttleTimeout = void 0
          }
          return n(
            t,
            [
              {
                key: 'create',
                value: function (e) {
                  return new t(
                    Object.assign({
                      reporters: this._reporters,
                      level: this.level,
                      types: this._types,
                      defaults: this._defaults,
                      stdout: this._stdout,
                      stderr: this._stderr,
                      mockFn: this._mockFn
                    }, e)
                  )
                }
              },
              {
                key: 'withDefaults',
                value: function (e) {
                  return this.create({
                    defaults: Object.assign({
                    }, this._defaults, e)
                  })
                }
              },
              {
                key: 'withTag',
                value: function (e) {
                  return this.withDefaults({
                    tag: this._defaults.tag ? this._defaults.tag + ':' + e : e
                  })
                }
              },
              {
                key: 'addReporter',
                value: function (e) {
                  return this._reporters.push(e),
                  this
                }
              },
              {
                key: 'removeReporter',
                value: function (e) {
                  if (e) {
                    var t = this._reporters.indexOf(e);
                    if (t >= 0) return this._reporters.splice(t, 1)
                  } else this._reporters.splice(0);
                  return this
                }
              },
              {
                key: 'setReporters',
                value: function (e) {
                  return this._reporters = Array.isArray(e) ? e : [
                    e
                  ],
                  this
                }
              },
              {
                key: 'wrapAll',
                value: function () {
                  this.wrapConsole(),
                  this.wrapStd()
                }
              },
              {
                key: 'restoreAll',
                value: function () {
                  this.restoreConsole(),
                  this.restoreStd()
                }
              },
              {
                key: 'wrapConsole',
                value: function () {
                  for (var e in this._types) console['__' + e] ||
                  (console['__' + e] = console[e]),
                  console[e] = this[e].raw
                }
              },
              {
                key: 'restoreConsole',
                value: function () {
                  for (var e in this._types) console['__' + e] &&
                  (console[e] = console['__' + e], delete console['__' + e])
                }
              },
              {
                key: 'wrapStd',
                value: function () {
                  this._wrapStream(this.stdout, 'log'),
                  this._wrapStream(this.stderr, 'log')
                }
              },
              {
                key: '_wrapStream',
                value: function (e, t) {
                  var n = this;
                  e &&
                  (
                    e.__write ||
                    (e.__write = e.write),
                    e.write = function (e) {
                      n[t].raw(String(e).trim())
                    }
                  )
                }
              },
              {
                key: 'restoreStd',
                value: function () {
                  this._restoreStream(this.stdout),
                  this._restoreStream(this.stderr)
                }
              },
              {
                key: '_restoreStream',
                value: function (e) {
                  e &&
                  e.__write &&
                  (e.write = e.__write, delete e.__write)
                }
              },
              {
                key: 'pauseLogs',
                value: function () {
                  p = !0
                }
              },
              {
                key: 'resumeLogs',
                value: function () {
                  p = !1;
                  var e,
                  t = u(h.splice(0));
                  try {
                    for (t.s(); !(e = t.n()).done; ) {
                      var n = e.value;
                      n[0]._logFn(n[1], n[2])
                    }
                  } catch (e) {
                    t.e(e)
                  } finally {
                    t.f()
                  }
                }
              },
              {
                key: 'mockTypes',
                value: function (e) {
                  if (this._mockFn = e || this._mockFn, 'function' == typeof this._mockFn) for (var t in this._types) this[t] = this._mockFn(t, this._types[t]) ||
                  this[t],
                  this[t].raw = this[t]
                }
              },
              {
                key: '_wrapLogFn',
                value: function (e, t) {
                  var n = this;
                  return function () {
                    for (var r = arguments.length, o = new Array(r), s = 0; s < r; s++) o[s] = arguments[s];
                    if (!p) return n._logFn(e, o, t);
                    h.push([n,
                    e,
                    o,
                    t])
                  }
                }
              },
              {
                key: '_logFn',
                value: function (e, t, n) {
                  var r = this;
                  if (e.level > this.level) return !!this._async &&
                  Promise.resolve(!1);
                  var o = Object.assign({
                    date: new Date,
                    args: []
                  }, e);
                  !n &&
                  1 === t.length &&
                  m(t[0]) ? Object.assign(o, t[0]) : o.args = Array.from(t),
                  o.message &&
                  (o.args.unshift(o.message), delete o.message),
                  o.additional &&
                  (
                    Array.isArray(o.additional) ||
                    (o.additional = o.additional.split('\n')),
                    o.args.push('\n' + o.additional.join('\n')),
                    delete o.additional
                  ),
                  o.type = 'string' == typeof o.type ? o.type.toLowerCase() : '',
                  o.tag = 'string' == typeof o.tag ? o.tag.toLowerCase() : '';
                  var a = function () {
                    var e = arguments.length > 0 &&
                    void 0 !== arguments[0] &&
                    arguments[0],
                    t = r._lastLogCount - r._throttleMin;
                    if (r._lastLog && t > 0) {
                      var n = i(r._lastLog.args);
                      t > 1 &&
                      n.push('(repeated '.concat(t, ' times)')),
                      r._log(s(s({
                      }, r._lastLog), {
                      }, {
                        args: n
                      })),
                      r._lastLogCount = 1
                    }
                    if (e) {
                      if (r._lastLog = o, r._async) return r._logAsync(o);
                      r._log(o)
                    }
                  };
                  clearTimeout(this._throttleTimeout);
                  var c = this._lastLogTime ? o.date - this._lastLogTime : 0;
                  if (this._lastLogTime = o.date, c < this._throttle) try {
                    var u = JSON.stringify([o.type,
                    o.tag,
                    o.args]),
                    l = this._lastLogSerialized === u;
                    if (
                      this._lastLogSerialized = u,
                      l &&
                      (this._lastLogCount++, this._lastLogCount > this._throttleMin)
                    ) return void (this._throttleTimeout = setTimeout(a, this._throttle))
                  } catch (e) {
                  }
                  a(!0)
                }
              },
              {
                key: '_log',
                value: function (e) {
                  var t,
                  n = u(this._reporters);
                  try {
                    for (n.s(); !(t = n.n()).done; ) t.value.log(e, {
                      async: !1,
                      stdout: this.stdout,
                      stderr: this.stderr
                    })
                  } catch (e) {
                    n.e(e)
                  } finally {
                    n.f()
                  }
                }
              },
              {
                key: '_logAsync',
                value: function (e) {
                  var t = this;
                  return Promise.all(
                    this._reporters.map(
                      (
                        function (n) {
                          return n.log(e, {
                            async: !0,
                            stdout: t.stdout,
                            stderr: t.stderr
                          })
                        }
                      )
                    )
                  )
                }
              },
              {
                key: 'stdout',
                get: function () {
                  return this._stdout ||
                  console._stdout
                }
              },
              {
                key: 'stderr',
                get: function () {
                  return this._stderr ||
                  console._stderr
                }
              }
            ]
          ),
          t
        }();
        f.prototype.add = f.prototype.addReporter,
        f.prototype.remove = f.prototype.removeReporter,
        f.prototype.clear = f.prototype.removeReporter,
        f.prototype.withScope = f.prototype.withTag,
        f.prototype.mock = f.prototype.mockTypes,
        f.prototype.pause = f.prototype.pauseLogs,
        f.prototype.resume = f.prototype.resumeLogs;
        var v,
        g = function () {
          function t(n) {
            e(this, t),
            this.options = Object.assign({
            }, n),
            this.defaultColor = '#7f8c8d',
            this.levelColorMap = {
              0: '#c0392b',
              1: '#f39c12',
              3: '#00BCD4'
            },
            this.typeColorMap = {
              success: '#2ecc71'
            }
          }
          return n(
            t,
            [
              {
                key: 'log',
                value: function (e) {
                  var t = e.level < 1 ? console.__error ||
                  console.error : 1 === e.level &&
                  console.warn ? console.__warn ||
                  console.warn : console.__log ||
                  console.log,
                  n = 'log' !== e.type ? e.type : '',
                  r = e.tag ? e.tag : '',
                  o = this.typeColorMap[e.type] ||
                  this.levelColorMap[e.level] ||
                  this.defaultColor,
                  s = '\n      background: '.concat(
                    o,
                    ';\n      border-radius: 0.5em;\n      color: white;\n      font-weight: bold;\n      padding: 2px 0.5em;\n    '
                  ),
                  a = '%c'.concat([r,
                  n].filter(Boolean).join(':'));
                  'string' == typeof e.args[0] ? t.apply(
                    void 0,
                    [
                      ''.concat(a, '%c ').concat(e.args[0]),
                      s,
                      ''
                    ].concat(i(e.args.slice(1)))
                  ) : t.apply(void 0, [
                    a,
                    s
                  ].concat(i(e.args)))
                }
              }
            ]
          ),
          t
        }();
        return 'undefined' != typeof window &&
        window.consola ||
        (
          (v = new f({
            reporters: [
              new g
            ]
          })).Consola = f,
          v.LogLevel = l,
          v.BrowserReporter = g,
          v
        )
      }()
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return r
      })),
      n.d(t, 'd', (function () {
        return o
      })),
      n.d(t, 'b', (function () {
        return c
      })),
      n.d(t, 'c', (function () {
        return d
      }));
      const r = n(0).version.startsWith('3');
      function o(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : 'default';
        if (void 0 !== e[t]) return r ? e[t]() : e[t]
      }
      function c(e) {
        return r ? e.props : e.componentOptions.propsData
      }
      const l = (component, e, t) => {
        let n;
        return {
          render: t => t(component, {
            props: {
              ...e
            },
            ref: e => {
              n = e
            }
          }),
          methods: {
            ...t,
            getComponentInstance: () => n
          }
        }
      };
      async function d(component) {
        let {
          props: e,
          app: t,
          methods: o
        }
        = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
        };
        if (r) {
          const r = (null == t ? void 0 : t.vueApp) ||
          t,
          element = document.createElement('div'),
          {
            render: o,
            h: c
          }
          = await Promise.resolve().then(n.bind(null, 0)),
          l = c(component, e);
          return null != r &&
          r._context &&
          (l.appContext = r._context),
          element &&
          o(l, element),
          l
        }
        const c = new (
          (await Promise.resolve().then(n.bind(null, 0))).default.component('HoComponent', l(component, e, o))
        );
        var d;
        t &&
        (
          c.$root = t,
          c._i18n ? c._i18n.locale = null === (d = t.$i18n) ||
          void 0 === d ? void 0 : d.locale : c._i18n = t.$i18n
        );
        return c.$mount()
      }
    },
    function (e, t, n) {
      'use strict';
      var r = n(0),
      o = n(98),
      c = n.n(o);
      const l = {
        warning: () => n.e(18).then(n.bind(null, 298)),
        generic: () => n.e(19).then(n.bind(null, 1208)),
        positive: () => n.e(17).then(n.bind(null, 384)),
        negative: () => n.e(78).then(n.bind(null, 1209)),
        instant: () => n.e(17).then(n.bind(null, 384))
      },
      d = {
        warning: () => n.e(68).then(n.bind(null, 1210)),
        generic: () => n.e(155).then(n.bind(null, 1211)),
        positive: () => n.e(69).then(n.bind(null, 1212)),
        negative: () => n.e(150).then(n.bind(null, 1213))
      },
      m = {
        INFO: 'info',
        GENERIC: 'generic',
        SUCCESS: 'success',
        POSITIVE: 'positive',
        WARNING: 'warning',
        DANGER: 'danger',
        NEGATIVE: 'negative',
        INSTANT: 'instant'
      };
      var h = {
        'en-gb': n(99),
        en: n(100),
        is: n(101)
      },
      f = {
        name: 'UpCAlert',
        components: {
          UpCIcon: Object(r.defineAsyncComponent) ((() => Promise.resolve().then(n.bind(null, 71))))
        },
        i18n: {
          messages: h
        },
        props: {
          type: {
            type: String,
          default:
            'warning',
            validator: e => Object.values(m).includes(e)
          },
          close: {
            type: Boolean,
          default:
            !1
          },
          hiddenLabel: {
            type: String,
          default:
            ''
          },
          inline: {
            type: Boolean,
          default:
            !0
          },
          fullWidth: {
            type: Boolean,
          default:
            !1
          },
          size: {
            type: String,
          default:
            'md',
            validator: e => ['md',
            'sm'].includes(e)
          },
          isNgm: {
            type: Boolean,
          default:
            !1
          }
        },
        emits: [
          'alert-close',
          'alert-enter',
          'alert-leave'
        ],
        data: () => ({
          openInternal: !0
        }),
        computed: {
          alertMappedType: e => (
            e => {
              switch (e) {
                case m.INFO:
                case m.GENERIC:
                  return m.GENERIC;
                case m.SUCCESS:
                case m.POSITIVE:
                  return m.POSITIVE;
                case m.DANGER:
                case m.NEGATIVE:
                  return m.NEGATIVE;
                case m.INSTANT:
                  return m.INSTANT;
                default:
                  return ''
              }
            }
          ) (e.type),
          isAlertInstant: e => 'instant' === e.alertType,
          alertInline: e => !e.fullWidth &&
          !e.isAlertInstant &&
          e.inline,
          alertType: e => e.alertMappedType ||
          'warning',
          icon: e => Object(r.defineAsyncComponent) (e.isNgm ? d[e.alertType] : l[e.alertType]),
          iconClose: e => Object(r.defineAsyncComponent) (
            (
              () => e.isNgm ? n.e(74).then(n.bind(null, 1207)) : n.e(73).then(n.bind(null, 200))
            )
          )
        },
        methods: {
          leaveAlert() {
            this.$emit('alert-leave')
          },
          enterAlert() {
            this.$emit('alert-enter')
          },
          closeAlert() {
            this.openInternal = !1,
            this.$emit('alert-close')
          }
        },
        injectStyles: [
          c.a
        ]
      },
      v = n(2),
      component = Object(v.a) (
        f,
        (
          function () {
            var e = this,
            t = e._self._c;
            return e.openInternal ? t(
              'div',
              {
                staticClass: 'air3-alert',
                class : [
                  'air3-alert-'.concat(e.alertType),
                  {
                    'air3-alert-side-wide': e.fullWidth,
                    'air3-alert-inline': e.alertInline,
                    'air3-alert-sm': 'sm' === e.size
                  }
                ],
                attrs: {
                  role: 'alert',
                  'data-ev-sublocation': '!alert'
                },
                on: {
                  click: function (t) {
                    return e.enterAlert()
                  },
                  keydown: function (t) {
                    return e.enterAlert()
                  },
                  mouseenter: function (t) {
                    return e.enterAlert()
                  },
                  focusin: function (t) {
                    return e.enterAlert()
                  },
                  mouseover: function (t) {
                    return e.enterAlert()
                  },
                  mouseleave: function (t) {
                    return e.leaveAlert()
                  },
                  focusout: function (t) {
                    return e.leaveAlert()
                  },
                  blur: function (t) {
                    return e.leaveAlert()
                  }
                }
              },
              [
                t(
                  'div',
                  {
                    staticClass: 'air3-alert-icon'
                  },
                  [
                    e._t(
                      'icon',
                      (function () {
                        return [t('UpCIcon', {
                          attrs: {
                            icon: e.icon
                          }
                        })]
                      })
                    )
                  ],
                  2
                ),
                e._v(' '),
                t(
                  'div',
                  {
                    staticClass: 'air3-alert-content',
                    class : {
                      'air3-alert-content-actions': e.$slots.actions &&
                      'sm' === e.size
                    }
                  },
                  [
                    e._t('default')
                  ],
                  2
                ),
                e._v(' '),
                e.isAlertInstant ||
                !e.close &&
                !e.$slots.actions ? e._e() : t(
                  'div',
                  {
                    staticClass: 'air-alert-actions'
                  },
                  [
                    e._t(
                      'actions',
                      (
                        function () {
                          return [e.close ? t(
                            'button',
                            {
                              staticClass: 'air3-alert-icon air3-alert-close',
                              attrs: {
                                type: 'button',
                                'data-ev-label': 'alert_close'
                              },
                              on: {
                                click: function (t) {
                                  return e.closeAlert()
                                }
                              }
                            },
                            [
                              t(
                                'span',
                                {
                                  staticClass: 'sr-only'
                                },
                                [
                                  e._v(
                                    '\n          ' + e._s(e.$t('vc_CloseTheHiddenlabelAlert_37', {
                                      label: e.hiddenLabel
                                    })) + '\n        '
                                  )
                                ]
                              ),
                              e._v(' '),
                              t('UpCIcon', {
                                attrs: {
                                  icon: e.iconClose
                                }
                              })
                            ],
                            1
                          ) : e._e()]
                        }
                      )
                    )
                  ],
                  2
                )
              ]
            ) : e._e()
          }
        ),
        [],
        !1,
        null,
        null,
        null
      );
      t.a = component.exports
    },
    ,
    function (e, t, n) {
      e.exports = function () {
        'use strict';
        const {
          entries: e,
          setPrototypeOf: t,
          isFrozen: n,
          getPrototypeOf: r,
          getOwnPropertyDescriptor: o
        }
        = Object;
        let {
          freeze: c,
          seal: l,
          create: d
        }
        = Object,
        {
          apply: m,
          construct: h
        }
        = 'undefined' != typeof Reflect &&
        Reflect;
        c ||
        (c = function (e) {
          return e
        }),
        l ||
        (l = function (e) {
          return e
        }),
        m ||
        (m = function (e, t, n) {
          return e.apply(t, n)
        }),
        h ||
        (h = function (e, t) {
          return new e(...t)
        });
        const f = x(Array.prototype.forEach),
        v = x(Array.prototype.pop),
        y = x(Array.prototype.push),
        w = x(String.prototype.toLowerCase),
        k = x(String.prototype.toString),
        S = x(String.prototype.match),
        T = x(String.prototype.replace),
        E = x(String.prototype.indexOf),
        I = x(String.prototype.trim),
        _ = x(Object.prototype.hasOwnProperty),
        C = x(RegExp.prototype.test),
        N = A(TypeError);
        function x(e) {
          return function (t) {
            for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++) r[o - 1] = arguments[o];
            return m(e, t, r)
          }
        }
        function A(e) {
          return function () {
            for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++) n[r] = arguments[r];
            return h(e, n)
          }
        }
        function O(e, r) {
          let o = arguments.length > 2 &&
          void 0 !== arguments[2] ? arguments[2] : w;
          t &&
          t(e, null);
          let c = r.length;
          for (; c--; ) {
            let element = r[c];
            if ('string' == typeof element) {
              const e = o(element);
              e !== element &&
              (n(r) || (r[c] = e), element = e)
            }
            e[element] = !0
          }
          return e
        }
        function D(e) {
          for (let t = 0; t < e.length; t++) _(e, t) ||
          (e[t] = null);
          return e
        }
        function R(object) {
          const t = d(null);
          for (const [n,
          r]of e(object)) _(object, n) &&
          (
            Array.isArray(r) ? t[n] = D(r) : r &&
            'object' == typeof r &&
            r.constructor === Object ? t[n] = R(r) : t[n] = r
          );
          return t
        }
        function P(object, e) {
          for (; null !== object; ) {
            const desc = o(object, e);
            if (desc) {
              if (desc.get) return x(desc.get);
              if ('function' == typeof desc.value) return x(desc.value)
            }
            object = r(object)
          }
          function t() {
            return null
          }
          return t
        }
        const L = c(
          ['a',
          'abbr',
          'acronym',
          'address',
          'area',
          'article',
          'aside',
          'audio',
          'b',
          'bdi',
          'bdo',
          'big',
          'blink',
          'blockquote',
          'body',
          'br',
          'button',
          'canvas',
          'caption',
          'center',
          'cite',
          'code',
          'col',
          'colgroup',
          'content',
          'data',
          'datalist',
          'dd',
          'decorator',
          'del',
          'details',
          'dfn',
          'dialog',
          'dir',
          'div',
          'dl',
          'dt',
          'element',
          'em',
          'fieldset',
          'figcaption',
          'figure',
          'font',
          'footer',
          'form',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'head',
          'header',
          'hgroup',
          'hr',
          'html',
          'i',
          'img',
          'input',
          'ins',
          'kbd',
          'label',
          'legend',
          'li',
          'main',
          'map',
          'mark',
          'marquee',
          'menu',
          'menuitem',
          'meter',
          'nav',
          'nobr',
          'ol',
          'optgroup',
          'option',
          'output',
          'p',
          'picture',
          'pre',
          'progress',
          'q',
          'rp',
          'rt',
          'ruby',
          's',
          'samp',
          'section',
          'select',
          'shadow',
          'small',
          'source',
          'spacer',
          'span',
          'strike',
          'strong',
          'style',
          'sub',
          'summary',
          'sup',
          'table',
          'tbody',
          'td',
          'template',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'time',
          'tr',
          'track',
          'tt',
          'u',
          'ul',
          'var',
          'video',
          'wbr']
        ),
        U = c(
          ['svg',
          'a',
          'altglyph',
          'altglyphdef',
          'altglyphitem',
          'animatecolor',
          'animatemotion',
          'animatetransform',
          'circle',
          'clippath',
          'defs',
          'desc',
          'ellipse',
          'filter',
          'font',
          'g',
          'glyph',
          'glyphref',
          'hkern',
          'image',
          'line',
          'lineargradient',
          'marker',
          'mask',
          'metadata',
          'mpath',
          'path',
          'pattern',
          'polygon',
          'polyline',
          'radialgradient',
          'rect',
          'stop',
          'style',
          'switch',
          'symbol',
          'text',
          'textpath',
          'title',
          'tref',
          'tspan',
          'view',
          'vkern']
        ),
        F = c(
          ['feBlend',
          'feColorMatrix',
          'feComponentTransfer',
          'feComposite',
          'feConvolveMatrix',
          'feDiffuseLighting',
          'feDisplacementMap',
          'feDistantLight',
          'feDropShadow',
          'feFlood',
          'feFuncA',
          'feFuncB',
          'feFuncG',
          'feFuncR',
          'feGaussianBlur',
          'feImage',
          'feMerge',
          'feMergeNode',
          'feMorphology',
          'feOffset',
          'fePointLight',
          'feSpecularLighting',
          'feSpotLight',
          'feTile',
          'feTurbulence']
        ),
        M = c(
          ['animate',
          'color-profile',
          'cursor',
          'discard',
          'font-face',
          'font-face-format',
          'font-face-name',
          'font-face-src',
          'font-face-uri',
          'foreignobject',
          'hatch',
          'hatchpath',
          'mesh',
          'meshgradient',
          'meshpatch',
          'meshrow',
          'missing-glyph',
          'script',
          'set',
          'solidcolor',
          'unknown',
          'use']
        ),
        $ = c(
          ['math',
          'menclose',
          'merror',
          'mfenced',
          'mfrac',
          'mglyph',
          'mi',
          'mlabeledtr',
          'mmultiscripts',
          'mn',
          'mo',
          'mover',
          'mpadded',
          'mphantom',
          'mroot',
          'mrow',
          'ms',
          'mspace',
          'msqrt',
          'mstyle',
          'msub',
          'msup',
          'msubsup',
          'mtable',
          'mtd',
          'mtext',
          'mtr',
          'munder',
          'munderover',
          'mprescripts']
        ),
        j = c(
          ['maction',
          'maligngroup',
          'malignmark',
          'mlongdiv',
          'mscarries',
          'mscarry',
          'msgroup',
          'mstack',
          'msline',
          'msrow',
          'semantics',
          'annotation',
          'annotation-xml',
          'mprescripts',
          'none']
        ),
        text = c(['#text']),
        html = c(
          ['accept',
          'action',
          'align',
          'alt',
          'autocapitalize',
          'autocomplete',
          'autopictureinpicture',
          'autoplay',
          'background',
          'bgcolor',
          'border',
          'capture',
          'cellpadding',
          'cellspacing',
          'checked',
          'cite',
          'class',
          'clear',
          'color',
          'cols',
          'colspan',
          'controls',
          'controlslist',
          'coords',
          'crossorigin',
          'datetime',
          'decoding',
          'default',
          'dir',
          'disabled',
          'disablepictureinpicture',
          'disableremoteplayback',
          'download',
          'draggable',
          'enctype',
          'enterkeyhint',
          'face',
          'for',
          'headers',
          'height',
          'hidden',
          'high',
          'href',
          'hreflang',
          'id',
          'inputmode',
          'integrity',
          'ismap',
          'kind',
          'label',
          'lang',
          'list',
          'loading',
          'loop',
          'low',
          'max',
          'maxlength',
          'media',
          'method',
          'min',
          'minlength',
          'multiple',
          'muted',
          'name',
          'nonce',
          'noshade',
          'novalidate',
          'nowrap',
          'open',
          'optimum',
          'pattern',
          'placeholder',
          'playsinline',
          'popover',
          'popovertarget',
          'popovertargetaction',
          'poster',
          'preload',
          'pubdate',
          'radiogroup',
          'readonly',
          'rel',
          'required',
          'rev',
          'reversed',
          'role',
          'rows',
          'rowspan',
          'spellcheck',
          'scope',
          'selected',
          'shape',
          'size',
          'sizes',
          'span',
          'srclang',
          'start',
          'src',
          'srcset',
          'step',
          'style',
          'summary',
          'tabindex',
          'title',
          'translate',
          'type',
          'usemap',
          'valign',
          'value',
          'width',
          'wrap',
          'xmlns',
          'slot']
        ),
        svg = c(
          ['accent-height',
          'accumulate',
          'additive',
          'alignment-baseline',
          'amplitude',
          'ascent',
          'attributename',
          'attributetype',
          'azimuth',
          'basefrequency',
          'baseline-shift',
          'begin',
          'bias',
          'by',
          'class',
          'clip',
          'clippathunits',
          'clip-path',
          'clip-rule',
          'color',
          'color-interpolation',
          'color-interpolation-filters',
          'color-profile',
          'color-rendering',
          'cx',
          'cy',
          'd',
          'dx',
          'dy',
          'diffuseconstant',
          'direction',
          'display',
          'divisor',
          'dur',
          'edgemode',
          'elevation',
          'end',
          'exponent',
          'fill',
          'fill-opacity',
          'fill-rule',
          'filter',
          'filterunits',
          'flood-color',
          'flood-opacity',
          'font-family',
          'font-size',
          'font-size-adjust',
          'font-stretch',
          'font-style',
          'font-variant',
          'font-weight',
          'fx',
          'fy',
          'g1',
          'g2',
          'glyph-name',
          'glyphref',
          'gradientunits',
          'gradienttransform',
          'height',
          'href',
          'id',
          'image-rendering',
          'in',
          'in2',
          'intercept',
          'k',
          'k1',
          'k2',
          'k3',
          'k4',
          'kerning',
          'keypoints',
          'keysplines',
          'keytimes',
          'lang',
          'lengthadjust',
          'letter-spacing',
          'kernelmatrix',
          'kernelunitlength',
          'lighting-color',
          'local',
          'marker-end',
          'marker-mid',
          'marker-start',
          'markerheight',
          'markerunits',
          'markerwidth',
          'maskcontentunits',
          'maskunits',
          'max',
          'mask',
          'media',
          'method',
          'mode',
          'min',
          'name',
          'numoctaves',
          'offset',
          'operator',
          'opacity',
          'order',
          'orient',
          'orientation',
          'origin',
          'overflow',
          'paint-order',
          'path',
          'pathlength',
          'patterncontentunits',
          'patterntransform',
          'patternunits',
          'points',
          'preservealpha',
          'preserveaspectratio',
          'primitiveunits',
          'r',
          'rx',
          'ry',
          'radius',
          'refx',
          'refy',
          'repeatcount',
          'repeatdur',
          'restart',
          'result',
          'rotate',
          'scale',
          'seed',
          'shape-rendering',
          'slope',
          'specularconstant',
          'specularexponent',
          'spreadmethod',
          'startoffset',
          'stddeviation',
          'stitchtiles',
          'stop-color',
          'stop-opacity',
          'stroke-dasharray',
          'stroke-dashoffset',
          'stroke-linecap',
          'stroke-linejoin',
          'stroke-miterlimit',
          'stroke-opacity',
          'stroke',
          'stroke-width',
          'style',
          'surfacescale',
          'systemlanguage',
          'tabindex',
          'tablevalues',
          'targetx',
          'targety',
          'transform',
          'transform-origin',
          'text-anchor',
          'text-decoration',
          'text-rendering',
          'textlength',
          'type',
          'u1',
          'u2',
          'unicode',
          'values',
          'viewbox',
          'visibility',
          'version',
          'vert-adv-y',
          'vert-origin-x',
          'vert-origin-y',
          'width',
          'word-spacing',
          'wrap',
          'writing-mode',
          'xchannelselector',
          'ychannelselector',
          'x',
          'x1',
          'x2',
          'xmlns',
          'y',
          'y1',
          'y2',
          'z',
          'zoomandpan']
        ),
        V = c(
          ['accent',
          'accentunder',
          'align',
          'bevelled',
          'close',
          'columnsalign',
          'columnlines',
          'columnspan',
          'denomalign',
          'depth',
          'dir',
          'display',
          'displaystyle',
          'encoding',
          'fence',
          'frame',
          'height',
          'href',
          'id',
          'largeop',
          'length',
          'linethickness',
          'lspace',
          'lquote',
          'mathbackground',
          'mathcolor',
          'mathsize',
          'mathvariant',
          'maxsize',
          'minsize',
          'movablelimits',
          'notation',
          'numalign',
          'open',
          'rowalign',
          'rowlines',
          'rowspacing',
          'rowspan',
          'rspace',
          'rquote',
          'scriptlevel',
          'scriptminsize',
          'scriptsizemultiplier',
          'selection',
          'separator',
          'separators',
          'stretchy',
          'subscriptshift',
          'supscriptshift',
          'symmetric',
          'voffset',
          'width',
          'xmlns']
        ),
        G = c(
          ['xlink:href',
          'xml:id',
          'xlink:title',
          'xml:space',
          'xmlns:xlink']
        ),
        B = l(/\{\{[\w\W]*|[\w\W]*\}\}/gm),
        z = l(/<%[\w\W]*|[\w\W]*%>/gm),
        H = l(/\$\{[\w\W]*}/gm),
        Q = l(/^data-[\-\w.\u00B7-\uFFFF]+$/),
        W = l(/^aria-[\-\w]+$/),
        K = l(
          /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
        ),
        J = l(/^(?:\w+script|data):/i),
        X = l(
          /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
        ),
        Z = l(/^html$/i),
        Y = l(/^[a-z][.\w]*(-[.\w]+)+$/i);
        var ee = Object.freeze({
          __proto__: null,
          ARIA_ATTR: W,
          ATTR_WHITESPACE: X,
          CUSTOM_ELEMENT: Y,
          DATA_ATTR: Q,
          DOCTYPE_NAME: Z,
          ERB_EXPR: z,
          IS_ALLOWED_URI: K,
          IS_SCRIPT_OR_DATA: J,
          MUSTACHE_EXPR: B,
          TMPLIT_EXPR: H
        });
        const te = {
          element: 1,
          attribute: 2,
          text: 3,
          cdataSection: 4,
          entityReference: 5,
          entityNode: 6,
          progressingInstruction: 7,
          comment: 8,
          document: 9,
          documentType: 10,
          documentFragment: 11,
          notation: 12
        },
        ne = function () {
          return 'undefined' == typeof window ? null : window
        },
        ie = function (e, t) {
          if ('object' != typeof e || 'function' != typeof e.createPolicy) return null;
          let n = null;
          const r = 'data-tt-policy-suffix';
          t &&
          t.hasAttribute(r) &&
          (n = t.getAttribute(r));
          const o = 'dompurify' + (n ? '#' + n : '');
          try {
            return e.createPolicy(o, {
              createHTML: html => html,
              createScriptURL: e => e
            })
          } catch (e) {
            return console.warn('TrustedTypes policy ' + o + ' could not be created.'),
            null
          }
        },
        re = function () {
          return {
            afterSanitizeAttributes: [],
            afterSanitizeElements: [],
            afterSanitizeShadowDOM: [],
            beforeSanitizeAttributes: [],
            beforeSanitizeElements: [],
            beforeSanitizeShadowDOM: [],
            uponSanitizeAttribute: [],
            uponSanitizeElement: [],
            uponSanitizeShadowNode: []
          }
        };
        function ae() {
          let t = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : ne();
          const n = e => ae(e);
          if (
            n.version = '3.2.3',
            n.removed = [],
            !t ||
            !t.document ||
            t.document.nodeType !== te.document
          ) return n.isSupported = !1,
          n;
          let {
            document: r
          }
          = t;
          const o = r,
          l = o.currentScript,
          {
            DocumentFragment: m,
            HTMLTemplateElement: h,
            Node: x,
            Element: A,
            NodeFilter: D,
            NamedNodeMap: B = t.NamedNodeMap ||
            t.MozNamedAttrMap,
            HTMLFormElement: z,
            DOMParser: H,
            trustedTypes: Q
          }
          = t,
          W = A.prototype,
          J = P(W, 'cloneNode'),
          X = P(W, 'remove'),
          Y = P(W, 'nextSibling'),
          oe = P(W, 'childNodes'),
          se = P(W, 'parentNode');
          if ('function' == typeof h) {
            const template = r.createElement('template');
            template.content &&
            template.content.ownerDocument &&
            (r = template.content.ownerDocument)
          }
          let ce,
          le = '';
          const {
            implementation: ue,
            createNodeIterator: de,
            createDocumentFragment: me,
            getElementsByTagName: he
          }
          = r,
          {
            importNode: fe
          }
          = o;
          let pe = re();
          n.isSupported = 'function' == typeof e &&
          'function' == typeof se &&
          ue &&
          void 0 !== ue.createHTMLDocument;
          const {
            MUSTACHE_EXPR: ge,
            ERB_EXPR: ve,
            TMPLIT_EXPR: ye,
            DATA_ATTR: we,
            ARIA_ATTR: be,
            IS_SCRIPT_OR_DATA: ke,
            ATTR_WHITESPACE: Se,
            CUSTOM_ELEMENT: Te
          }
          = ee;
          let {
            IS_ALLOWED_URI: Ee
          }
          = ee,
          Ie = null;
          const _e = O({
          }, [
            ...L,
            ...U,
            ...F,
            ...$,
            ...text
          ]);
          let Ce = null;
          const Ne = O({
          }, [
            ...html,
            ...svg,
            ...V,
            ...G
          ]);
          let xe = Object.seal(
            d(
              null,
              {
                tagNameCheck: {
                  writable: !0,
                  configurable: !1,
                  enumerable: !0,
                  value: null
                },
                attributeNameCheck: {
                  writable: !0,
                  configurable: !1,
                  enumerable: !0,
                  value: null
                },
                allowCustomizedBuiltInElements: {
                  writable: !0,
                  configurable: !1,
                  enumerable: !0,
                  value: !1
                }
              }
            )
          ),
          Ae = null,
          Oe = null,
          De = !0,
          Re = !0,
          Pe = !1,
          Le = !0,
          Ue = !1,
          Fe = !0,
          Me = !1,
          $e = !1,
          qe = !1,
          je = !1,
          Ve = !1,
          Ge = !1,
          Be = !0,
          ze = !1;
          const He = 'user-content-';
          let Qe = !0,
          We = !1,
          Ke = {},
          Je = null;
          const Xe = O({
          }, [
            'annotation-xml',
            'audio',
            'colgroup',
            'desc',
            'foreignobject',
            'head',
            'iframe',
            'math',
            'mi',
            'mn',
            'mo',
            'ms',
            'mtext',
            'noembed',
            'noframes',
            'noscript',
            'plaintext',
            'script',
            'style',
            'svg',
            'template',
            'thead',
            'title',
            'video',
            'xmp'
          ]);
          let Ze = null;
          const Ye = O({
          }, [
            'audio',
            'video',
            'img',
            'source',
            'image',
            'track'
          ]);
          let et = null;
          const tt = O({
          }, [
            'alt',
            'class',
            'for',
            'id',
            'label',
            'name',
            'pattern',
            'placeholder',
            'role',
            'summary',
            'title',
            'value',
            'style',
            'xmlns'
          ]),
          nt = 'http://www.w3.org/1998/Math/MathML',
          it = 'http://www.w3.org/2000/svg',
          at = 'http://www.w3.org/1999/xhtml';
          let ot = at,
          st = !1,
          ct = null;
          const lt = O({
          }, [
            nt,
            it,
            at
          ], k);
          let ut = O({
          }, [
            'mi',
            'mo',
            'mn',
            'ms',
            'mtext'
          ]),
          mt = O({
          }, [
            'annotation-xml'
          ]);
          const ht = O({
          }, [
            'title',
            'style',
            'font',
            'a',
            'script'
          ]);
          let ft = null;
          const pt = [
            'application/xhtml+xml',
            'text/html'
          ],
          gt = 'text/html';
          let vt = null,
          yt = null;
          const wt = r.createElement('form'),
          bt = function (e) {
            return e instanceof RegExp ||
            e instanceof Function
          },
          kt = function () {
            let e = arguments.length > 0 &&
            void 0 !== arguments[0] ? arguments[0] : {
            };
            if (!yt || yt !== e) {
              if (
                e &&
                'object' == typeof e ||
                (e = {}),
                e = R(e),
                ft = - 1 === pt.indexOf(e.PARSER_MEDIA_TYPE) ? gt : e.PARSER_MEDIA_TYPE,
                vt = 'application/xhtml+xml' === ft ? k : w,
                Ie = _(e, 'ALLOWED_TAGS') ? O({
                }, e.ALLOWED_TAGS, vt) : _e,
                Ce = _(e, 'ALLOWED_ATTR') ? O({
                }, e.ALLOWED_ATTR, vt) : Ne,
                ct = _(e, 'ALLOWED_NAMESPACES') ? O({
                }, e.ALLOWED_NAMESPACES, k) : lt,
                et = _(e, 'ADD_URI_SAFE_ATTR') ? O(R(tt), e.ADD_URI_SAFE_ATTR, vt) : tt,
                Ze = _(e, 'ADD_DATA_URI_TAGS') ? O(R(Ye), e.ADD_DATA_URI_TAGS, vt) : Ye,
                Je = _(e, 'FORBID_CONTENTS') ? O({
                }, e.FORBID_CONTENTS, vt) : Xe,
                Ae = _(e, 'FORBID_TAGS') ? O({
                }, e.FORBID_TAGS, vt) : {
                },
                Oe = _(e, 'FORBID_ATTR') ? O({
                }, e.FORBID_ATTR, vt) : {
                },
                Ke = !!_(e, 'USE_PROFILES') &&
                e.USE_PROFILES,
                De = !1 !== e.ALLOW_ARIA_ATTR,
                Re = !1 !== e.ALLOW_DATA_ATTR,
                Pe = e.ALLOW_UNKNOWN_PROTOCOLS ||
                !1,
                Le = !1 !== e.ALLOW_SELF_CLOSE_IN_ATTR,
                Ue = e.SAFE_FOR_TEMPLATES ||
                !1,
                Fe = !1 !== e.SAFE_FOR_XML,
                Me = e.WHOLE_DOCUMENT ||
                !1,
                je = e.RETURN_DOM ||
                !1,
                Ve = e.RETURN_DOM_FRAGMENT ||
                !1,
                Ge = e.RETURN_TRUSTED_TYPE ||
                !1,
                qe = e.FORCE_BODY ||
                !1,
                Be = !1 !== e.SANITIZE_DOM,
                ze = e.SANITIZE_NAMED_PROPS ||
                !1,
                Qe = !1 !== e.KEEP_CONTENT,
                We = e.IN_PLACE ||
                !1,
                Ee = e.ALLOWED_URI_REGEXP ||
                K,
                ot = e.NAMESPACE ||
                at,
                ut = e.MATHML_TEXT_INTEGRATION_POINTS ||
                ut,
                mt = e.HTML_INTEGRATION_POINTS ||
                mt,
                xe = e.CUSTOM_ELEMENT_HANDLING ||
                {
                },
                e.CUSTOM_ELEMENT_HANDLING &&
                bt(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck) &&
                (xe.tagNameCheck = e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),
                e.CUSTOM_ELEMENT_HANDLING &&
                bt(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) &&
                (
                  xe.attributeNameCheck = e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck
                ),
                e.CUSTOM_ELEMENT_HANDLING &&
                'boolean' == typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements &&
                (
                  xe.allowCustomizedBuiltInElements = e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements
                ),
                Ue &&
                (Re = !1),
                Ve &&
                (je = !0),
                Ke &&
                (
                  Ie = O({
                  }, text),
                  Ce = [],
                  !0 === Ke.html &&
                  (O(Ie, L), O(Ce, html)),
                  !0 === Ke.svg &&
                  (O(Ie, U), O(Ce, svg), O(Ce, G)),
                  !0 === Ke.svgFilters &&
                  (O(Ie, F), O(Ce, svg), O(Ce, G)),
                  !0 === Ke.mathMl &&
                  (O(Ie, $), O(Ce, V), O(Ce, G))
                ),
                e.ADD_TAGS &&
                (Ie === _e && (Ie = R(Ie)), O(Ie, e.ADD_TAGS, vt)),
                e.ADD_ATTR &&
                (Ce === Ne && (Ce = R(Ce)), O(Ce, e.ADD_ATTR, vt)),
                e.ADD_URI_SAFE_ATTR &&
                O(et, e.ADD_URI_SAFE_ATTR, vt),
                e.FORBID_CONTENTS &&
                (Je === Xe && (Je = R(Je)), O(Je, e.FORBID_CONTENTS, vt)),
                Qe &&
                (Ie['#text'] = !0),
                Me &&
                O(Ie, [
                  'html',
                  'head',
                  'body'
                ]),
                Ie.table &&
                (O(Ie, [
                  'tbody'
                ]), delete Ae.tbody),
                e.TRUSTED_TYPES_POLICY
              ) {
                if ('function' != typeof e.TRUSTED_TYPES_POLICY.createHTML) throw N(
                  'TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.'
                );
                if ('function' != typeof e.TRUSTED_TYPES_POLICY.createScriptURL) throw N(
                  'TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.'
                );
                ce = e.TRUSTED_TYPES_POLICY,
                le = ce.createHTML('')
              } else void 0 === ce &&
              (ce = ie(Q, l)),
              null !== ce &&
              'string' == typeof le &&
              (le = ce.createHTML(''));
              c &&
              c(e),
              yt = e
            }
          },
          St = O({
          }, [
            ...U,
            ...F,
            ...M
          ]),
          Tt = O({
          }, [
            ...$,
            ...j
          ]),
          Et = function (element) {
            let e = se(element);
            e &&
            e.tagName ||
            (e = {
              namespaceURI: ot,
              tagName: 'template'
            });
            const t = w(element.tagName),
            n = w(e.tagName);
            return !!ct[element.namespaceURI] &&
            (
              element.namespaceURI === it ? e.namespaceURI === at ? 'svg' === t : e.namespaceURI === nt ? 'svg' === t &&
              ('annotation-xml' === n || ut[n]) : Boolean(St[t]) : element.namespaceURI === nt ? e.namespaceURI === at ? 'math' === t : e.namespaceURI === it ? 'math' === t &&
              mt[n] : Boolean(Tt[t]) : element.namespaceURI === at ? !(e.namespaceURI === it && !mt[n]) &&
              !(e.namespaceURI === nt && !ut[n]) &&
              !Tt[t] &&
              (ht[t] || !St[t]) : !('application/xhtml+xml' !== ft || !ct[element.namespaceURI])
            )
          },
          It = function (e) {
            y(n.removed, {
              element: e
            });
            try {
              se(e).removeChild(e)
            } catch (t) {
              X(e)
            }
          },
          _t = function (e, element) {
            try {
              y(
                n.removed,
                {
                  attribute: element.getAttributeNode(e),
                  from: element
                }
              )
            } catch (e) {
              y(n.removed, {
                attribute: null,
                from: element
              })
            }
            if (element.removeAttribute(e), 'is' === e) if (je || Ve) try {
              It(element)
            } catch (e) {
            } else try {
              element.setAttribute(e, '')
            } catch (e) {
            }
          },
          Ct = function (e) {
            let t = null,
            n = null;
            if (qe) e = '<remove></remove>' + e;
             else {
              const t = S(e, /^[\r\n\t ]+/);
              n = t &&
              t[0]
            }
            'application/xhtml+xml' === ft &&
            ot === at &&
            (
              e = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + e + '</body></html>'
            );
            const o = ce ? ce.createHTML(e) : e;
            if (ot === at) try {
              t = (new H).parseFromString(o, ft)
            } catch (e) {
            }
            if (!t || !t.documentElement) {
              t = ue.createDocument(ot, 'template', null);
              try {
                t.documentElement.innerHTML = st ? le : o
              } catch (e) {
              }
            }
            const body = t.body ||
            t.documentElement;
            return e &&
            n &&
            body.insertBefore(r.createTextNode(n), body.childNodes[0] || null),
            ot === at ? he.call(t, Me ? 'html' : 'body') [0] : Me ? t.documentElement : body
          },
          Nt = function (e) {
            return de.call(
              e.ownerDocument ||
              e,
              e,
              D.SHOW_ELEMENT | D.SHOW_COMMENT | D.SHOW_TEXT | D.SHOW_PROCESSING_INSTRUCTION | D.SHOW_CDATA_SECTION,
              null
            )
          },
          xt = function (element) {
            return element instanceof z &&
            (
              'string' != typeof element.nodeName ||
              'string' != typeof element.textContent ||
              'function' != typeof element.removeChild ||
              !(element.attributes instanceof B) ||
              'function' != typeof element.removeAttribute ||
              'function' != typeof element.setAttribute ||
              'string' != typeof element.namespaceURI ||
              'function' != typeof element.insertBefore ||
              'function' != typeof element.hasChildNodes
            )
          },
          At = function (e) {
            return 'function' == typeof x &&
            e instanceof x
          };
          function Ot(e, t, data) {
            f(e, (e => {
              e.call(n, t, data, yt)
            }))
          }
          const Dt = function (e) {
            let content = null;
            if (Ot(pe.beforeSanitizeElements, e, null), xt(e)) return It(e),
            !0;
            const t = vt(e.nodeName);
            if (
              Ot(pe.uponSanitizeElement, e, {
                tagName: t,
                allowedTags: Ie
              }),
              e.hasChildNodes() &&
              !At(e.firstElementChild) &&
              C(/<[/\w]/g, e.innerHTML) &&
              C(/<[/\w]/g, e.textContent)
            ) return It(e),
            !0;
            if (e.nodeType === te.progressingInstruction) return It(e),
            !0;
            if (Fe && e.nodeType === te.comment && C(/<[/\w]/g, e.data)) return It(e),
            !0;
            if (!Ie[t] || Ae[t]) {
              if (!Ae[t] && Pt(t)) {
                if (xe.tagNameCheck instanceof RegExp && C(xe.tagNameCheck, t)) return !1;
                if (xe.tagNameCheck instanceof Function && xe.tagNameCheck(t)) return !1
              }
              if (Qe && !Je[t]) {
                const t = se(e) ||
                e.parentNode,
                n = oe(e) ||
                e.childNodes;
                if (n && t) for (let i = n.length - 1; i >= 0; --i) {
                  const r = J(n[i], !0);
                  r.__removalCount = (e.__removalCount || 0) + 1,
                  t.insertBefore(r, Y(e))
                }
              }
              return It(e),
              !0
            }
            return e instanceof A &&
            !Et(e) ? (It(e), !0) : 'noscript' !== t &&
            'noembed' !== t &&
            'noframes' !== t ||
            !C(/<\/no(script|embed|frames)/i, e.innerHTML) ? (
              Ue &&
              e.nodeType === te.text &&
              (
                content = e.textContent,
                f([ge,
                ve,
                ye], (e => {
                  content = T(content, e, ' ')
                })),
                e.textContent !== content &&
                (y(n.removed, {
                  element: e.cloneNode()
                }), e.textContent = content)
              ),
              Ot(pe.afterSanitizeElements, e, null),
              !1
            ) : (It(e), !0)
          },
          Rt = function (e, t, n) {
            if (Be && ('id' === t || 'name' === t) && (n in r || n in wt)) return !1;
            if (Re && !Oe[t] && C(we, t));
             else if (De && C(be, t));
             else if (!Ce[t] || Oe[t]) {
              if (
                !(
                  Pt(e) &&
                  (
                    xe.tagNameCheck instanceof RegExp &&
                    C(xe.tagNameCheck, e) ||
                    xe.tagNameCheck instanceof Function &&
                    xe.tagNameCheck(e)
                  ) &&
                  (
                    xe.attributeNameCheck instanceof RegExp &&
                    C(xe.attributeNameCheck, t) ||
                    xe.attributeNameCheck instanceof Function &&
                    xe.attributeNameCheck(t)
                  ) ||
                  'is' === t &&
                  xe.allowCustomizedBuiltInElements &&
                  (
                    xe.tagNameCheck instanceof RegExp &&
                    C(xe.tagNameCheck, n) ||
                    xe.tagNameCheck instanceof Function &&
                    xe.tagNameCheck(n)
                  )
                )
              ) return !1
            } else if (et[t]);
             else if (C(Ee, T(n, Se, '')));
             else if (
              'src' !== t &&
              'xlink:href' !== t &&
              'href' !== t ||
              'script' === e ||
              0 !== E(n, 'data:') ||
              !Ze[e]
            ) if (Pe && !C(ke, T(n, Se, '')));
             else if (n) return !1;
            return !0
          },
          Pt = function (e) {
            return 'annotation-xml' !== e &&
            S(e, Te)
          },
          Lt = function (e) {
            Ot(pe.beforeSanitizeAttributes, e, null);
            const {
              attributes: t
            }
            = e;
            if (!t || xt(e)) return;
            const r = {
              attrName: '',
              attrValue: '',
              keepAttr: !0,
              allowedAttributes: Ce,
              forceKeepAttr: void 0
            };
            let o = t.length;
            for (; o--; ) {
              const c = t[o],
              {
                name: l,
                namespaceURI: d,
                value: m
              }
              = c,
              h = vt(l);
              let y = 'value' === l ? m : I(m);
              if (
                r.attrName = h,
                r.attrValue = y,
                r.keepAttr = !0,
                r.forceKeepAttr = void 0,
                Ot(pe.uponSanitizeAttribute, e, r),
                y = r.attrValue,
                !ze ||
                'id' !== h &&
                'name' !== h ||
                (_t(l, e), y = He + y),
                Fe &&
                C(/((--!?|])>)|<\/(style|title)/i, y)
              ) {
                _t(l, e);
                continue
              }
              if (r.forceKeepAttr) continue;
              if (_t(l, e), !r.keepAttr) continue;
              if (!Le && C(/\/>/i, y)) {
                _t(l, e);
                continue
              }
              Ue &&
              f([ge,
              ve,
              ye], (e => {
                y = T(y, e, ' ')
              }));
              const w = vt(e.nodeName);
              if (Rt(w, h, y)) {
                if (ce && 'object' == typeof Q && 'function' == typeof Q.getAttributeType) if (d);
                 else switch (Q.getAttributeType(w, h)) {
                  case 'TrustedHTML':
                    y = ce.createHTML(y);
                    break;
                  case 'TrustedScriptURL':
                    y = ce.createScriptURL(y)
                }
                try {
                  d ? e.setAttributeNS(d, l, y) : e.setAttribute(l, y),
                  xt(e) ? It(e) : v(n.removed)
                } catch (e) {
                }
              }
            }
            Ot(pe.afterSanitizeAttributes, e, null)
          },
          Ut = function e(t) {
            let n = null;
            const r = Nt(t);
            for (Ot(pe.beforeSanitizeShadowDOM, t, null); n = r.nextNode(); ) Ot(pe.uponSanitizeShadowNode, n, null),
            Dt(n),
            Lt(n),
            n.content instanceof m &&
            e(n.content);
            Ot(pe.afterSanitizeShadowDOM, t, null)
          };
          return n.sanitize = function (e) {
            let t = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : {
            },
            body = null,
            r = null,
            c = null,
            l = null;
            if (st = !e, st && (e = '<!-->'), 'string' != typeof e && !At(e)) {
              if ('function' != typeof e.toString) throw N('toString is not a function');
              if ('string' != typeof (e = e.toString())) throw N('dirty is not a string, aborting')
            }
            if (!n.isSupported) return e;
            if ($e || kt(t), n.removed = [], 'string' == typeof e && (We = !1), We) {
              if (e.nodeName) {
                const t = vt(e.nodeName);
                if (!Ie[t] || Ae[t]) throw N('root node is forbidden and cannot be sanitized in-place')
              }
            } else if (e instanceof x) body = Ct('<!---->'),
            r = body.ownerDocument.importNode(e, !0),
            r.nodeType === te.element &&
            'BODY' === r.nodeName ||
            'HTML' === r.nodeName ? body = r : body.appendChild(r);
             else {
              if (!je && !Ue && !Me && - 1 === e.indexOf('<')) return ce &&
              Ge ? ce.createHTML(e) : e;
              if (body = Ct(e), !body) return je ? null : Ge ? le : ''
            }
            body &&
            qe &&
            It(body.firstChild);
            const d = Nt(We ? e : body);
            for (; c = d.nextNode(); ) Dt(c),
            Lt(c),
            c.content instanceof m &&
            Ut(c.content);
            if (We) return e;
            if (je) {
              if (Ve) for (l = me.call(body.ownerDocument); body.firstChild; ) l.appendChild(body.firstChild);
               else l = body;
              return (Ce.shadowroot || Ce.shadowrootmode) &&
              (l = fe.call(o, l, !0)),
              l
            }
            let h = Me ? body.outerHTML : body.innerHTML;
            return Me &&
            Ie['!doctype'] &&
            body.ownerDocument &&
            body.ownerDocument.doctype &&
            body.ownerDocument.doctype.name &&
            C(Z, body.ownerDocument.doctype.name) &&
            (h = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + h),
            Ue &&
            f([ge,
            ve,
            ye], (e => {
              h = T(h, e, ' ')
            })),
            ce &&
            Ge ? ce.createHTML(h) : h
          },
          n.setConfig = function () {
            kt(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
            }),
            $e = !0
          },
          n.clearConfig = function () {
            yt = null,
            $e = !1
          },
          n.isValidAttribute = function (e, t, n) {
            yt ||
            kt({
            });
            const r = vt(e),
            o = vt(t);
            return Rt(r, o, n)
          },
          n.addHook = function (e, t) {
            'function' == typeof t &&
            y(pe[e], t)
          },
          n.removeHook = function (e) {
            return v(pe[e])
          },
          n.removeHooks = function (e) {
            pe[e] = []
          },
          n.removeAllHooks = function () {
            pe = re()
          },
          n
        }
        return ae()
      }()
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return d
      }));
      var r = n(0),
      o = n(48),
      c = n(74),
      l = n(6);
      function d() {
        return {
          components: {
            i18nModalWrapper: Object(r.defineAsyncComponent) ((() => n.e(89).then(n.bind(null, 196))))
          },
          computed: {
            isCurrencySelector() {
              return this.$hasI18nSelector
            },
            selectedCurrency() {
              var e;
              const t = null === (e = this.$store.state.currency) ||
              void 0 === e ? void 0 : e.currencyCode;
              return t ? Object(o.a) (t, this.$i18n.locale) : null
            },
            showCurrencyPopover() {
              var e;
              return null === (e = this.$store.state.currency) ||
              void 0 === e ? void 0 : e.currencyPopupShow
            },
            selectedLanguage() {
              return Object(c.a) (this.$i18n.locale)
            }
          },
          methods: {
            togglei18nModal() {
              var e;
              null === (e = Object(l.a) ()) ||
              void 0 === e ||
              e.call('layout.toggleCurrencyModal')
            }
          }
        }
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return v
      }));
      var r = n(4),
      o = n(3),
      c = n(128),
      l = n.n(c),
      d = n(129),
      m = n.n(d),
      h = n(47);
      const f = {
        FREELANCER_PLUS: '2',
        FREELANCER_PLUS_FREE: '12',
        FREELANCER_PLUS_V2: '21',
        FREELANCER_PLUS_FREE_V2: '24',
        FREELANCER_PLUS_APPLE_IAP: '25',
        FREELANCER_PLUS_ANNUAL: '41'
      };
      class v {
        static async checkAppAccess(e, t) {
          const n = Object(o.a) (e),
          c = await n({
            query: Object(r.a) (l.a)
          }, {
            dataKey: 'completionAIGetApplicationsAccess',
            cache: {
            }
          }),
          d = ((null == c ? void 0 : c.applications) || []).find((e => e.application === t));
          return d ? d.accessGranted ? h.a.GRANTED : h.a.WAITLIST : h.a.NONE
        }
        static async getFreelancerPlusStatus(e) {
          var t;
          const n = Object(o.a) (e),
          c = await n({
            query: Object(r.a) (m.a)
          }, {
            dataKey: 'user',
            cache: {
            }
          }),
          l = null == c ||
          null === (t = c.subscriptionPlan) ||
          void 0 === t ? void 0 : t.id;
          return !!l &&
          Object.values(f).includes(l)
        }
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return r
      }));
      const r = {
        NONE: 'NONE',
        WAITLIST: 'WAITLIST',
        GRANTED: 'GRANTED'
      }
    },
    function (e, t, n) {
      'use strict';
      function r() {
        let e = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : 'USD',
        t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : 'en';
        const n = function () {
          let n = arguments.length > 0 &&
          void 0 !== arguments[0] ? arguments[0] : 'name',
          r = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : t;
          return new Intl.NumberFormat(
            r,
            {
              style: 'currency',
              currency: e,
              currencyDisplay: n,
              maximumSignificantDigits: 1
            }
          ).formatToParts(1).find((e => 'currency' === e.type)).value
        },
        r = function (e, t) {
          let[n = '',
          ...r] = e;
          return [n.toLocaleUpperCase(t),
          ...r].join('')
        }(n());
        let symbol;
        try {
          symbol = n('narrowSymbol', 'en')
        } catch (e) {
          symbol = n('symbol', 'en')
        }
        return {
          name: r,
          symbol: symbol,
          code: e,
          hasSymbol: 1 === symbol.length
        }
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    ,
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return o
      }));
      var r = n(12);
      function o(e, t, n, o, c) {
        const l = {};
        return {
          getTopnavSsiSnippet(e) {
            let {
              options: t,
              navigationName: n
            }
            = e;
            return '\n            <!--# block name="empty" --><!--# endblock -->\n            <!--'.concat('# include', ' virtual="/nx/top-nav-ssi/render/').concat(n, '?').concat(
              new URLSearchParams(t).toString(),
              '" stub="empty"-->\n          '
            )
          },
          async loadTopNavSSI(l) {
            let {
              navigationName: d,
              options: m
            }
            = l;
            const h = 'prod' === o ? 900 : 5000,
            f = '/nx/user-navigation-server/render/'.concat(d, '?').concat(new URLSearchParams(m).toString());
            let v = '';
            try {
              v = await e({
                requestAlias: 'ssi-nav-'.concat(d),
                handleApiErrors: !1
              }).url(f).get().setTimeout(h).onAbort(
                (
                  () => {
                    throw new Error('SSI Nav call timed out after '.concat(h, 'ms'))
                  }
                )
              ).res(
                (
                  e => (
                    c.headersSent ||
                    Object(r.c) (e.headers.get('Set-Cookie'), c, n),
                    e.text()
                  )
                )
              )
            } catch (e) {
              var y;
              const n = null != e &&
              null !== (y = e.message) &&
              void 0 !== y &&
              y.includes('call timed out') ? 'warn' : 'error';
              t[n](
                e,
                {
                  msgPrefix: '[micro-fe] Server Side Include failed '.concat(f),
                  appName: d
                }
              )
            }
            return v
          },
          async loadSSI(o) {
            let {
              requestAlias: l,
              name: d,
              url: m,
              options: h,
              ssiTimeout: f
            }
            = o;
            const v = ''.concat(m, '?').concat(new URLSearchParams(h).toString());
            let y = '';
            try {
              y = await e({
                requestAlias: l,
                handleApiErrors: !1
              }).url(v).get().setTimeout(f).onAbort(
                (
                  () => {
                    throw new Error('SSI call timed out after '.concat(f, 'ms'))
                  }
                )
              ).res(
                (
                  e => (
                    c.headersSent ||
                    Object(r.c) (e.headers.get('Set-Cookie'), c, n),
                    e.text()
                  )
                )
              )
            } catch (e) {
              var w;
              const n = null != e &&
              null !== (w = e.message) &&
              void 0 !== w &&
              w.includes('call timed out') ? 'warn' : 'error';
              t[n](
                e,
                {
                  msgPrefix: '[micro-fe] Server Side Include failed '.concat(v),
                  appName: d
                }
              )
            }
            return y
          },
          loadMicroappSpa(e) {
            let {
              appName: t,
              serviceName: n,
              appVersion: r
            }
            = e;
            if (l[t]) return l[t];
            const o = 'microapp-spa-'.concat(t);
            let c = document.querySelector('#'.concat(o));
            if (c) return Promise.resolve();
            let d = window.microAppVersions &&
            window.microAppVersions[t];
            r ? d = r : d &&
            '<' !== d[0] ||
            (d = 'latest');
            const m = '/static/assets/'.concat(n, '/spa/').concat(d, '/').concat(t, '/spa_').concat(t, '.umd.js');
            let h,
            f;
            return c = document.createElement('script'),
            c.setAttribute('src', m),
            c.setAttribute('async', 'true'),
            c.setAttribute('id', 'microapp-spa-'.concat(t)),
            l[t] = new Promise(((e, t) => {
              h = e,
              f = t
            })),
            c.onload = () => h(),
            c.onerror = () => f(new Error('failed to load '.concat(m))),
            document.body.appendChild(c),
            l[t]
          },
          startMicroappSpa(e) {
            let {
              navigationName: t,
              options: n
            }
            = e;
            const r = {
              user: 'TOP_NAV_USER',
              'visitor-v2': 'TOP_NAV'
            }
            [
              t
            ] ||
            'MICROAPP_'.concat(t.toUpperCase().replace(/-/g, '_'));
            window[''.concat(r, '_QUERY')] = n,
            window[''.concat(r, '_CONFIG')] = {
              env: o
            };
            const c = 'spa_'.concat(t);
            if (!window[c]) throw new Error(
              'spa microapp failed to start: window['.concat(c, '] not defined')
            );
            window[c].start()
          }
        }
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return d
      }));
      var r = n(58),
      o = n(18),
      c = n(39);
      async function l(e, t) {
        var n;
        let {
          store: o,
          $httpGql: c,
          config: l,
          $cookies: d,
          $tracker: m,
          req: h
        }
        = e,
        f = null;
        var v;
        (
          f = d.get(''.concat(l.cookiePrefix, 'current_organization_uid')),
          f
        ) ||
        (
          await o.dispatch('orgs/load'),
          f = !o.state.orgs.error &&
          (null === (v = o.state.orgs.current) || void 0 === v ? void 0 : v.id)
        );
        if (!f) return !1;
        Object(r.a) (o, !0, c, m);
        const y = 'undefined' != typeof window &&
        window.location.pathname ||
        (
          null == h ||
          null === (n = h.originalUrl) ||
          void 0 === n ? void 0 : n.split('?') [0]
        );
        return Promise.all(
          [o.dispatch(
            'smf/RETRIEVE',
            {
              location: 'banner',
              url: y,
              orgUid: f,
              isStrictOrder: t
            }
          ),
          o.dispatch(
            'smf/RETRIEVE',
            {
              location: 'very_top',
              url: y,
              orgUid: f,
              isStrictOrder: t
            }
          ),
          o.dispatch(
            'smf/RETRIEVE',
            {
              location: 'top',
              url: y,
              orgUid: f,
              isStrictOrder: t
            }
          ),
          o.dispatch(
            'smf/RETRIEVE',
            {
              location: 'account-enforcement',
              url: y,
              orgUid: f,
              isStrictOrder: !0
            }
          )]
        )
      }
      async function d(e) {
        let t = !(arguments.length > 1 && void 0 !== arguments[1]) ||
        arguments[1],
        n = arguments.length > 2 &&
        void 0 !== arguments[2] &&
        arguments[2];
        if (e.loadingLayoutUser) await e.loadingLayoutUser;
         else {
          Object(c.a) (e.store);
          try {
            const r = Promise.all(
              [e.store.dispatch('context/ready'),
              Object(o.a) (
                e.store,
                {
                  requestAlias: 'user-layout',
                  ff: [
                    {
                      name: 'OTBnrOn',
                      fallback: !1
                    },
                    {
                      name: 'WEBF1122ImpactIntegration',
                      fallback: !1
                    }
                  ],
                  qt: [
                    {
                      name: 'CI12577UniversalSearch',
                      fallback: 'Control',
                      ff: !0
                    }
                  ],
                  cache: {
                    strategy: 'cacheAndNetwork'
                  },
                  auth: !0
                }
              ),
              t ? l(e, n) : null,
              m(e)]
            );
            e.loadingLayoutUser = r,
            await r
          } catch (t) {
            e.$logger.error(t)
          }
          e.loadingLayoutUser = !0
        }
      }
      async function m(e) {
        let {
          store: t,
          $microAppUtils: r
        }
        = e;
        Object(c.a) (t);
        if (!await r.userNav.isSSIEnabled()) return Promise.all([n.e(146),
        n.e(166)]).then(n.bind(null, 195)),
        void await t.dispatch('topNav/load');
        await r.userNav.preload()
      }
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'user'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'id'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'rid'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'name'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'firstName'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'lastName'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'photoUrl'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 81
        }
      };
      n.loc.source = {
        body: '{\n  user {\n    id\n    rid\n    name\n    firstName\n    lastName\n    photoUrl\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'getAiToolsUsed'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'application'
                  }
                },
                type: {
                  kind: 'NamedType',
                  name: {
                    kind: 'Name',
                    value: 'String'
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'completionAIGetAIToolsUsed'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'application'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'application'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'confirmations'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'application'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'alreadyUsed'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 171
        }
      };
      n.loc.source = {
        body: 'query getAiToolsUsed($application: String) {\n  completionAIGetAIToolsUsed(application: $application) {\n    confirmations {\n      application\n      alreadyUsed\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.getAiToolsUsed = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'getAiToolsUsed')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'confirmAIToolUsed'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'toolsUsedRequest'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'CompletionAIToolUsedRequest'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'completionAIConfirmAIToolUsed'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'toolsUsedRequest'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'toolsUsedRequest'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'application'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'alreadyUsed'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 187
        }
      };
      n.loc.source = {
        body: 'mutation confirmAIToolUsed($toolsUsedRequest: CompletionAIToolUsedRequest!) {\n  completionAIConfirmAIToolUsed(toolsUsedRequest: $toolsUsedRequest) {\n    application\n    alreadyUsed\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.confirmAIToolUsed = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'confirmAIToolUsed')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'freelancerChatStopGeneratingAnswer'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'questionId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatStopGeneratingAnswer'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'questionId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'questionId'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'completed'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 148
        }
      };
      n.loc.source = {
        body: 'mutation freelancerChatStopGeneratingAnswer($questionId: ID!) {\n  freelancerChatStopGeneratingAnswer(questionId: $questionId) {\n    completed\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.freelancerChatStopGeneratingAnswer = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'freelancerChatStopGeneratingAnswer')
    },
    function (e, t, n) {
      'use strict';
      t.a = '/ab/account-security/login'
    },
    function (e, t, n) {
      'use strict';
      n.r(t);
      var r = n(66),
      o = n(85);
      var c = function (e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : 4;
        const n = e.length,
        r = Math.floor(n / t),
        o = t - n % t,
        c = [],
        l = e.slice(0);
        for (let i = 0; i < t; i += 1) {
          const e = i < o ? r : r + 1;
          c.push(l.splice(0, e))
        }
        return c
      },
      footer = n(94),
      l = n.n(footer),
      d = {
        'en-gb': n(95),
        en: n(96),
        is: n(97)
      },
      m = {
        name: 'UserFooter',
        serverCacheKey: e => ''.concat(e.serverCacheKey, '-').concat(String(e.shouldShowOtCookieSettings)),
        components: {
          FooterSocial: o.a
        },
        props: {
          http: {
            type: Function,
            required: !0
          },
          shouldShowOtCookieSettings: {
            type: Boolean,
          default:
            !1
          },
          serverCacheKey: {
            type: String,
          default:
            'footer'
          }
        },
        i18n: {
          messages: d
        },
        data() {
          return {
            feedback: this.getFeedback(),
            currentYear: (new Date).getFullYear(),
            impactTokenReady: !1
          }
        },
        computed: {
          items() {
            return [{
              label: this.$t('nsc_AboutUs_1'),
              href: '/about/'
            },
            this.feedback,
            this.isImpactAvailable ? {
              label: this.$t('nsc_ReferralProgram'),
              id: 'impactPopupLink'
            }
             : null,
            {
              label: this.$t('nsc_TrustSafetySecurity_4'),
              href: '/trust-and-safety/security/'
            },
            {
              label: this.$t('nsc_HelpSupport_5'),
              href: 'https://support.upwork.com/login'
            },
            {
              label: this.$t('nsc_UpworkFoundation_6'),
              href: '/ppc/foundation/'
            },
            {
              label: this.$t('nsc_TermsOfService_7'),
              href: '/legal#terms'
            },
            {
              label: this.$t('nsc_PrivacyPolicy_8'),
              href: '/legal#privacy'
            },
            {
              label: this.$t('nsc_CA_Notice_at_Collection'),
              href: '/legal#SupplementalPrivacyNoticeforCaliforniaResidents'
            },
            !0 === this.shouldShowOtCookieSettings ? {
              label: this.$t('nsc_OneTrustCookieSettings'),
              href: 'javascript:',
              id: 'oneTrustBannerLink'
            }
             : null,
            {
              label: this.$t('nsc_Accessibility_9'),
              href: '/legal#accessibility'
            },
            {
              label: this.$t('nsc_DesktopApp_10'),
              href: '/downloads?source=Footer'
            },
            {
              label: this.$t('nsc_CookiePolicy_11'),
              href: '/legal#cookie-policy'
            },
            {
              label: this.$t('nsc_EnterpriseSolutions_12'),
              href: '/enterprise'
            },
            {
              label: this.$t('nsc_ReleaseNotes'),
              href: '/product-release-notes'
            }
            ]
          },
          columnizedItems() {
            return c(this.items.filter(Boolean))
          },
          impactIntegrationFlag() {
            var e;
            return null === (e = this.$store.state) ||
            void 0 === e ||
            null === (e = e.flags) ||
            void 0 === e ||
            null === (e = e.ff) ||
            void 0 === e ? void 0 : e.WEBF1122ImpactIntegration
          },
          isClient() {
            var e;
            return (null === (e = this.$store.state.orgs) || void 0 === e ? void 0 : e.current).flag.client
          },
          isImpactAvailable() {
            return this.impactIntegrationFlag &&
            this.isClient
          }
        },
        mounted() {
          this.isMounted = !0,
          !0 === this.shouldShowOtCookieSettings &&
          Object(r.a) (),
          this.setupImpactIntegration()
        },
        updated() {
          !0 === this.shouldShowOtCookieSettings &&
          Object(r.a) ()
        },
        methods: {
          async setupImpactIntegration() {
            await this.$store.dispatch('context/load'),
            this.isImpactAvailable &&
            (this.loadImpactScript(), await this.setImpactToken())
          },
          loadImpactScript() {
            const e = document.createElement('script');
            e.src = 'https://utt.impactcdn.com/A2798569-68a2-43d5-98ff-96c66d56992b1.js',
            e.async = !0,
            document.head.appendChild(e)
          },
          async setImpactToken() {
            var e;
            const t = 'query { impactToken{ token } }',
            n = await this.$httpGql({
              handleApiErrors: !1
            }).post({
              query: t
            }).json(),
            r = null == n ||
            null === (e = n.data) ||
            void 0 === e ||
            null === (e = e.impactToken) ||
            void 0 === e ? void 0 : e.token;
            r ? (window.impactToken = r, this.impactTokenReady = !0) : console.error('Impact token not found in query', t, n)
          },
          openFeedbackModal() {
            var e;
            null === (e = window.$qualtrics) ||
            void 0 === e ||
            e.triggerSurvey('FooterSurvey')
          },
          getFeedback() {
            const e = this.$appConfig ||
            this.$config;
            return !(null != e && e.disableQualtrics) &&
            {
              label: this.$t('nsc_Feedback_2'),
              href: 'javascript:'
            }
          }
        },
        injectStyles: [
          l.a
        ]
      },
      h = n(2),
      f = Object(h.a) (
        m,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'footer',
              {
                staticClass: 'up-footer'
              },
              [
                t(
                  'div',
                  {
                    staticClass: 'sr-only',
                    attrs: {
                      role: 'heading',
                      'aria-level': '2'
                    }
                  },
                  [
                    e._v('\n    ' + e._s(e.$t('nsc_FooterNavigation_224')) + '\n  ')
                  ]
                ),
                e._v(' '),
                t(
                  'div',
                  {
                    staticClass: 'container'
                  },
                  [
                    t(
                      'div',
                      {
                        staticClass: 'up-footer-columns'
                      },
                      e._l(
                        e.columnizedItems,
                        (
                          function (n, r) {
                            return t(
                              'div',
                              {
                                key: r
                              },
                              [
                                t(
                                  'ul',
                                  {
                                    staticClass: 'up-footer-list'
                                  },
                                  e._l(
                                    n,
                                    (
                                      function (n, r) {
                                        return t(
                                          'li',
                                          {
                                            key: r,
                                            staticClass: 'up-footer-list-item'
                                          },
                                          [
                                            'oneTrustBannerLink' === n.id ? t(
                                              'a',
                                              {
                                                staticClass: 'up-footer-list-link ot-sdk-show-settings',
                                                attrs: {
                                                  href: n.href
                                                }
                                              },
                                              [
                                                e._v('\n              ' + e._s(n.label) + '\n            ')
                                              ]
                                            ) : 'impactPopupLink' === n.id &&
                                            e.impactTokenReady ? t(
                                              'impact-popup',
                                              {
                                                attrs: {
                                                  widget: 'p/28282/w/referrerWidget'
                                                }
                                              },
                                              [
                                                t(
                                                  'a',
                                                  {
                                                    staticClass: 'up-footer-list-link',
                                                    attrs: {
                                                      href: n.href,
                                                      impression: '',
                                                      'data-ev-label-prefix': '',
                                                      'data-ev-label': 'impact_link',
                                                      'data-ev-sublocation': 'footer'
                                                    }
                                                  },
                                                  [
                                                    e._v('\n                ' + e._s(n.label) + '\n              ')
                                                  ]
                                                )
                                              ]
                                            ) : t(
                                              'UpLink',
                                              e._g(
                                                e._b({
                                                  staticClass: 'up-footer-list-link',
                                                  attrs: {
                                                    href: n.href,
                                                    target: '_self'
                                                  }
                                                }, 'UpLink', n === e.feedback ? {
                                                  'data-cy': 'feedback-link'
                                                }
                                                 : null, !1),
                                                n === e.feedback ? {
                                                  click: e.openFeedbackModal
                                                }
                                                 : {
                                                }
                                              ),
                                              [
                                                e._v('\n              ' + e._s(n.label) + '\n            ')
                                              ]
                                            )
                                          ],
                                          1
                                        )
                                      }
                                    )
                                  ),
                                  0
                                )
                              ]
                            )
                          }
                        )
                      ),
                      0
                    ),
                    e._v(' '),
                    t('FooterSocial'),
                    e._v(' '),
                    t(
                      'p',
                      {
                        staticClass: 'up-footer-copyright'
                      },
                      [
                        t(
                          'span',
                          [
                            e._v(
                              '\n        ' + e._s(
                                e.$t(
                                  'nsc_Copy2015CurrentyearUpworkRegGlobalInc_102',
                                  [
                                    e.currentYear
                                  ]
                                )
                              ) + '\n      '
                            )
                          ]
                        )
                      ]
                    )
                  ],
                  1
                )
              ]
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      ).exports,
      v = n(0),
      y = n(42),
      w = n(41),
      k = n(102),
      S = n.n(k),
      T = n(58),
      E = n(38);
      const I = w.a ? 'unmounted' : 'destroyed',
      _ = 'closed-smf-id';
      var C = Object(v.defineComponent) ({
        name: 'UpCSmf',
        components: {
          UpCAlert: y.a,
          UpCAnnouncementModal: Object(v.defineAsyncComponent) (
            (
              () => Promise.all([n.e(0),
              n.e(1),
              n.e(5),
              n.e(14),
              n.e(21),
              n.e(138),
              n.e(58)]).then(n.bind(null, 1197))
            )
          ),
          UpCBanner: Object(v.defineAsyncComponent) (
            (
              () => Promise.all([n.e(5),
              n.e(21),
              n.e(140),
              n.e(63)]).then(n.bind(null, 1221))
            )
          )
        },
        props: {
          location: {
            type: String,
          default:
            'top'
          },
          url: {
            type: String,
          default:
            ''
          },
          http: {
            type: Function,
          default:
            null
          },
          httpGql: {
            type: Function,
          default:
            null
          },
          orgUid: {
            type: String,
          default:
            null
          },
          visitorId: {
            type: String,
          default:
            null
          },
          tracker: {
            type: Object,
          default:
            null
          },
          skipFetch: {
            type: Boolean,
          default:
            !1
          },
          localStorage: {
            type: Object,
          default:
            null
          },
          strictOrder: {
            type: Boolean,
          default:
            !1
          },
          isSudo: {
            type: Boolean,
          default:
            !1
          }
        },
        computed: {
          filteredMessages() {
            return this.$store.getters['smf/getMessages'](this.location)
          },
          getUrl() {
            var e,
            t;
            return this.url ||
            'undefined' != typeof window &&
            window.location.pathname ||
            ''.concat(null === (e = this.$router) || void 0 === e ? void 0 : e.options.base).concat(null === (t = this.$router) || void 0 === t ? void 0 : t.currentRoute.path).replace('//', '/')
          },
          httpApi() {
            return this.httpGql ||
            this.http
          },
          isGraphqlEnabled() {
            return !!this.httpGql
          }
        },
        created() {
          Object(T.a) (this.$store, this.isGraphqlEnabled, this.httpApi, this.tracker),
          !this.skipFetch &&
          this.orgUid &&
          this.$store.dispatch(
            'smf/RETRIEVE',
            {
              location: this.location,
              url: this.getUrl,
              orgUid: this.orgUid,
              visitorId: this.visitorId,
              isStrictOrder: this.strictOrder
            }
          )
        },
        mounted() {
          if (
            this.registerLocalStorageListener(),
            this.filteredMessages.length > 0 &&
            !this.isSudo
          ) {
            const {
              templateUid: e
            }
            = this.filteredMessages[0];
            this.$store.dispatch('smf/DISPLAY', {
              templateUid: e,
              visitorId: this.visitorId
            })
          }
        },
        [
          I
        ]() {
          this.callRemoveLocalStorage()
        },
        methods: {
          async onAlertClose(e) {
            var t;
            let {
              displayLocation: n,
              templateUid: r
            }
            = e;
            await this.$store.dispatch(
              'smf/DISMISS',
              {
                location: n,
                templateUid: r,
                visitorId: this.visitorId,
                isUserAction: !0
              }
            ),
            this.callRemoveLocalStorage(),
            null === (t = this.localStorage) ||
            void 0 === t ||
            t.set(_, r)
          },
          async onClick(e, t) {
            if ('A' === e.target.tagName) {
              const {
                templateUid: e
              }
              = t;
              Object(E.a) (this.tracker, 'click', 'smf_click_link', e)
            }
          },
          callRemoveLocalStorage() {
            this.removeLocalStorageListener &&
            (
              this.removeLocalStorageListener(),
              this.removeLocalStorageListener = null
            )
          },
          lsTriggeredAndCloseSMF() {
            var e,
            t;
            const n = null === (e = this.localStorage) ||
            void 0 === e ? void 0 : e.get(_);
            if (!n || 0 === this.filteredMessages.length) return;
            const r = null === (t = this.filteredMessages) ||
            void 0 === t ||
            null === (t = t[0]) ||
            void 0 === t ? void 0 : t.templateUid;
            n === r &&
            (
              this.$store.dispatch('smf/REMOVEMESSAGE', {
                templateUid: r
              }),
              this.callRemoveLocalStorage()
            )
          },
          registerLocalStorageListener() {
            var e;
            this.localStorage &&
            !this.removeLocalStorageListener &&
            (
              this.removeLocalStorageListener = null === (e = this.localStorage) ||
              void 0 === e ? void 0 : e.onUpdate((e => {
                e === _ &&
                this.lsTriggeredAndCloseSMF()
              }))
            )
          }
        },
        injectStyles: [
          S.a
        ]
      }),
      N = Object(h.a) (
        C,
        (
          function () {
            var e = this,
            t = e._self._c;
            e._self._setupProxy;
            return e.filteredMessages &&
            e.filteredMessages.length ? t(
              'div',
              {
                attrs: {
                  'design-system': 'air-3-0',
                  'data-test': 'smf'
                }
              },
              e._l(
                e.filteredMessages,
                (
                  function (n) {
                    return t(
                      'div',
                      {
                        key: n.type,
                        staticClass: 'air3-smf-container',
                        on: {
                          '!click': function (t) {
                            return e.onClick(t, n)
                          }
                        }
                      },
                      [
                        'banner' === n.displayLocation ? t('UpCBanner', {
                          ref: 'banner',
                          refInFor: !0,
                          attrs: {
                            message: n
                          }
                        }) : 'announcement-modal' === n.displayLocation ? t(
                          'UpCAnnouncementModal',
                          {
                            ref: 'announcementModal',
                            refInFor: !0,
                            attrs: {
                              message: n
                            }
                          }
                        ) : t(
                          'UpCAlert',
                          {
                            attrs: {
                              'full-width': 'very_top' === n.displayLocation,
                              type: n.type,
                              close: 1 === n.dismissible ||
                              !0 === n.dismissible
                            },
                            on: {
                              'alert-close': function (t) {
                                return e.onAlertClose(n)
                              }
                            }
                          },
                          [
                            t('div', {
                              domProps: {
                                innerHTML: e._s(n.content)
                              }
                            })
                          ]
                        )
                      ],
                      1
                    )
                  }
                )
              ),
              0
            ) : e._e()
          }
        ),
        [],
        !1,
        null,
        null,
        null
      ).exports,
      x = n(31),
      A = n(64),
      O = n(45),
      D = n(20),
      R = {
        'en-gb': n(103),
        en: n(104),
        is: n(105)
      },
      P = {
        name: 'SudoWarning',
        components: {
          UpCAlert: y.a
        },
        i18n: {
          messages: R
        }
      },
      L = (
        n(171),
        Object(h.a) (
          P,
          (
            function () {
              var e = this;
              return (0, e._self._c) (
                'UpCAlert',
                {
                  staticClass: 'air3-sudo-alert'
                },
                [
                  e._v(
                    '\n  ' + e._s(
                      e.$t(
                        'nsc_ReminderYouAreCurrentlyInSudoModeAsUserR_262',
                        {
                          storeStateUserNid: e.$store.state.user.nid
                        }
                      )
                    ) + '\n'
                  )
                ]
              )
            }
          ),
          [],
          !1,
          null,
          null,
          null
        ).exports
      ),
      U = n(6),
      F = n(50),
      M = n(12),
      $ = {
        name: 'MicroAppNodeComponent',
        props: {
          appName: {
            type: String,
            required: !0
          },
          serviceName: {
            type: String,
            required: !0
          },
          spaOnly: {
            type: Boolean,
            required: !0
          },
          lazyHydrate: {
            type: Object,
            required: !0
          },
          options: {
            type: Object,
          default:
            () => ({
            })
          },
          simulateSsiError: {
            type: Boolean,
          default:
            !1
          },
          ssiHtmlPromise: {
            type: Promise,
          default:
            null
          },
          url: {
            type: String,
          default:
            null
          },
          requestAlias: {
            type: String,
          default:
            null
          },
          ssiTimeout: {
            type: Number,
          default:
            null
          }
        },
        data: () => ({
          ssiFailed: !1,
          isDestroyed: !1,
          isServer: !1,
          fetchedHtml: null,
          microAppLoader: null
        }),
        computed: {
          app() {
            return 'user' === this.appName ? 'top-navigation' : 'app'
          },
          loadingOptions() {
            return {
              ...this.simulateSsiError ? {
                throwError: !0
              }
               : {
              },
              locale: this.$i18n.locale,
              ...this.ssiFailed ? {
                isFallback: !0
              }
               : {
              },
              ...this.options
            }
          },
          ssiRequestTimeout() {
            var e;
            return this.ssiTimeout ||
            (
              'prod' === (null === (e = this.$appConfig) || void 0 === e ? void 0 : e.env) ? 900 : 5000
            )
          }
        },
        watch: {
          options: {
            handler(e) {
              Object(U.a) ().setState(''.concat(this.appName, '.options'), e)
            }
          }
        },
        created() {
          const e = this.$appConfig ||
          this.$config;
          this.microAppLoader = Object(F.a) (this.$http, this.$logger, e.cookiePrefix, e.env, null)
        },
        async serverPrefetch() {
        },
        mounted() {
          this.isAppRenderedOnServer() ||
          (
            this.ssiFailed = this.isServerSlotRendered() &&
            !this.isAppRenderedOnServer(),
            this.ssiFailed &&
            this.$microAppUtils.$microAppLogger.error(
              '[micro-fe] '.concat(this.appName, ' SSI failed, loading fallback'),
              {
                appName: this.appName
              }
            ),
            this.microAppLoader.loadMicroappSpa({
              appName: this.appName,
              serviceName: this.serviceName
            }).then(
              (
                () => {
                  this.isDestroyed ||
                  this.microAppLoader.startMicroappSpa({
                    navigationName: this.appName,
                    options: this.loadingOptions
                  })
                }
              )
            ).catch(
              (
                e => {
                  this.$microAppUtils.$microAppLogger.error(
                    e,
                    {
                      appName: this.appName,
                      msgPrefix: '[micro-fe] '.concat(this.appName, ' rendering failed')
                    }
                  )
                }
              )
            )
          )
        },
        unmounted() {
          this.onDestroy()
        },
        destroyed() {
          this.onDestroy()
        },
        methods: {
          async loadSsiHtml() {
            return this.microAppLoader.loadSSI({
              name: this.appName,
              options: this.loadingOptions,
              url: this.url,
              requestAlias: this.requestAlias,
              ssiTimeout: this.ssiRequestTimeout
            })
          },
          isServerSlotRendered() {
            return !!this.$el.querySelector('.microapp-slot-'.concat(this.appName))
          },
          isAppRenderedOnServer() {
            if (this.$el) return Object(M.a) (this.$el, this.appName)
          },
          onDestroy() {
            var e;
            this.isDestroyed = !0,
            null === (e = window['spa_'.concat(this.appName)]) ||
            void 0 === e ||
            e.stop()
          }
        }
      },
      j = {
        name: 'UserNavAppLoader',
        components: {
          MicroAppNodeComponent: Object(h.a) (
            $,
            (
              function () {
                var e = this,
                t = e._self._c;
                return t(
                  'div',
                  [
                    t(
                      'ClientOnly',
                      [
                        !1 === e.isAppRenderedOnServer() ? t(
                          'div',
                          {
                            attrs: {
                              id: ''.concat(e.appName, '-').concat(e.app, '-container')
                            }
                          },
                          [
                            e._t('placeholder')
                          ],
                          2
                        ) : e._e()
                      ]
                    ),
                    e._v(' '),
                    t(
                      e.lazyHydrate,
                      {
                        tag: 'component',
                        attrs: {
                          never: ''
                        }
                      },
                      [
                        e.isServer &&
                        !e.spaOnly ? t(
                          'div',
                          {
                            class : 'microapp-slot-'.concat(e.appName),
                            domProps: {
                              innerHTML: e._s(e.fetchedHtml)
                            }
                          }
                        ) : e._e()
                      ]
                    )
                  ],
                  1
                )
              }
            ),
            [],
            !1,
            null,
            null,
            null
          ).exports,
          TopNavUserSkeleton: x.a
        },
        props: {
          lazyHydrate: {
            type: Object,
            required: !0
          },
          userNavOptions: {
            type: Object,
          default:
            () => ({
            })
          }
        },
        computed: {
          options() {
            return {
              isLayout: !0,
              ...this.$microAppUtils.userNav.overrides.ssrOptions,
              ...this.$microAppUtils.userNav.getOptions(),
              ...this.userNavOptions
            }
          },
          ssiHtmlPromise() {
            return this.$microAppUtils.userNav.topNavHtmlPromise
          }
        }
      },
      V = Object(h.a) (
        j,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'MicroAppNodeComponent',
              {
                staticClass: 'nav-parent-wrapper',
                attrs: {
                  'app-name': 'user',
                  'service-name': 'UserNavigationServerNuxt',
                  options: e.options,
                  'spa-only': !1,
                  'lazy-hydrate': e.lazyHydrate,
                  'ssi-html-promise': e.ssiHtmlPromise,
                  url: '/nx/user-navigation-server/render/user',
                  'request-alias': 'ssi-nav-user'
                },
                scopedSlots: e._u(
                  [{
                    key: 'placeholder',
                    fn: function () {
                      return [t('TopNavUserSkeleton')]
                    },
                    proxy: !0
                  }
                  ]
                )
              }
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      ).exports,
      G = n(39),
      B = n(51),
      z = n(106),
      H = {
        computed: {
          navHaveErrors() {
            const {
              state: e
            }
            = this.$store;
            return e.orgs &&
            e.orgs.error ||
            e.topNav &&
            e.topNav.error
          },
          shouldShowSmf() {
            return !this.$fetchState.pending &&
            this.$store.state.orgs &&
            this.$store.state.orgs.loaded &&
            !this.$store.state.orgs.error
          },
          localStorage: () => D.a,
          commonSmfProps() {
            return {
              http: null,
              'http-gql': this.$httpGql,
              tracker: this.$tracker,
              'org-uid': this.$store.state.orgs.current.id,
              'skip-fetch': this.preloadSmf,
              'local-storage': this.localStorage,
              'strict-order': this.smfStrictOrder,
              'is-sudo': this.$store.state.user.isSudo
            }
          }
        },
        fetchDelay: 0,
        injectStyles: [
          n.n(z).a
        ]
      },
      Q = Object(h.a) (H, undefined, undefined, !1, null, null, null).exports,
      W = n(78),
      K = {
        name: 'NuxtLayoutUserBase',
        components: {
          UpCSmf: N,
          topNav: () => Promise.resolve({
          }),
          upFooter: () => Promise.resolve({
          }),
          SudoWarning: L,
          LazyHydrate: A.a,
          TopNavUserSkeleton: x.a,
          UserNavAppLoader: V
        },
        mixins: [
          Q,
          Object(O.a) (),
          Object(W.a) ()
        ],
        props: {
          preloadSmf: {
            type: Boolean,
          default:
            !0
          },
          smfStrictOrder: {
            type: Boolean,
          default:
            !1
          },
          isSearchEnabled: {
            type: Boolean,
          default:
            !0
          },
          isFooterEnabled: {
            type: Boolean,
          default:
            !0
          },
          partnershipLogo: {
            type: String,
          default:
            null
          }
        },
        data: () => ({
          cachedTopNavHtml: '',
          isTopNavBundleLoaded: !1
        }),
        async fetch() {
          await Object(B.a) (this.$nuxt.context, this.preloadSmf, this.smfStrictOrder)
        },
        computed: {
          shouldShowTopNav() {
            return !this.$fetchState.pending &&
            !this.navHaveErrors &&
            (this.isTopNavBundleLoaded || this.isServerRendered)
          },
          oneTrustBannerEnabled() {
            return this.$config.oneTrustBannerEnabled &&
            this.$store.state.flags.ff.OTBnrOn
          },
          ssiEnabled() {
            var e;
            return null === (e = this.$microAppUtils) ||
            void 0 === e ? void 0 : e.userNav.isSSIEnabled()
          },
          isServerRendered() {
            var e;
            return !(
              null === (e = this.$nuxt.context.nuxtState) ||
              void 0 === e ||
              !e.serverRendered
            )
          },
          containerQueryEnabled() {
            var e;
            return null === (e = this.$nuxt.context.$config) ||
            void 0 === e ? void 0 : e.containerQueries
          },
          LazyHydrate: () => A.a
        },
        watch: {
          $route: {
            handler() {
              const e = this.$nuxt.context.route.meta.reduce(((e, meta) => meta.navigationRoute || e), []);
              e.length &&
              this.$store.commit('topNav/setNavigationRoute', e)
            },
            immediate: !0
          }
        },
        beforeCreate() {
          Object(G.a) (this.$store)
        },
        async beforeMount() {
          if (this.$isNativeApp) return;
          if (this.ssiEnabled) return;
          await Promise.all([n.e(146),
          n.e(166)]).then(n.bind(null, 195)),
          this.isTopNavBundleLoaded = !0;
          const e = this.$cookies.get(
            ''.concat(this.$config.cookiePrefix, 'current_organization_uid')
          ),
          t = D.a.get(''.concat(e, 'top-nav-html'));
          t &&
          (this.cachedTopNavHtml = t)
        },
        async mounted() {
          await n.e(126).then(n.t.bind(null, 1157, 7));
          const e = this.$cookies.get(
            ''.concat(this.$config.cookiePrefix, 'oauth2_global_js_token')
          );
          window.dashApiScript.setup({
            env: this.$config.dashApiEnv ||
            this.$config.env,
            authToken: e
          })
        }
      },
      J = (
        n(176),
        {
          name: 'NuxtLayoutUser',
          components: {
            topNav: () => Promise.all([n.e(146),
            n.e(166)]).then(n.bind(null, 195)),
            UpFooter: f
          },
          extends : Object(h.a) (
            K,
            (
              function () {
                var e = this,
                t = e._self._c;
                return t(
                  'div',
                  {
                    staticClass: 'layout-container layout-sidebar_page-content',
                    class : {
                      'query-container': e.containerQueryEnabled
                    }
                  },
                  [
                    t(
                      'div',
                      {
                        staticClass: 'layout'
                      },
                      [
                        e.$isNativeApp ||
                        e.ssiEnabled ? e.$isNativeApp ? e._e() : t('UserNavAppLoader', {
                          attrs: {
                            'lazy-hydrate': e.LazyHydrate
                          }
                        }) : [
                          e.shouldShowTopNav ? t(
                            'top-nav',
                            {
                              attrs: {
                                'is-search-enabled': e.isSearchEnabled,
                                'partnership-logo': e.partnershipLogo
                              }
                            }
                          ) : e._e(),
                          e._v(' '),
                          e.shouldShowTopNav ||
                          e.cachedTopNavHtml ? e._e() : t('TopNavUserSkeleton'),
                          e._v(' '),
                          !e.shouldShowTopNav &&
                          e.cachedTopNavHtml ? t('div', {
                            domProps: {
                              innerHTML: e._s(e.cachedTopNavHtml)
                            }
                          }) : e._e()
                        ],
                        e._v(' '),
                        t(
                          'main',
                          {
                            attrs: {
                              id: 'main',
                              tabindex: '-1'
                            }
                          },
                          [
                            e.$profilingPromise ? t('div', {
                              staticClass: 'dashboard-placeholder'
                            }) : e._e(),
                            e._v(' '),
                            t(
                              e.preloadSmf ? 'div' : 'client-only',
                              {
                                tag: 'component'
                              },
                              [
                                t(
                                  'UpCSmf',
                                  e._b({
                                    attrs: {
                                      location: 'banner'
                                    }
                                  }, 'UpCSmf', e.commonSmfProps, !1)
                                )
                              ],
                              1
                            ),
                            e._v(' '),
                            e.shouldShowSmf ? e._t(
                              'smfVeryTop',
                              (
                                function () {
                                  return [t(
                                    e.preloadSmf ? 'div' : 'client-only',
                                    {
                                      tag: 'component'
                                    },
                                    [
                                      t(
                                        'UpCSmf',
                                        e._b({
                                          staticClass: 'up-smf-very-top',
                                          attrs: {
                                            location: 'very_top'
                                          }
                                        }, 'UpCSmf', e.commonSmfProps, !1)
                                      )
                                    ],
                                    1
                                  )]
                                }
                              )
                            ) : e._e(),
                            e._v(' '),
                            e._t('beforeContent'),
                            e._v(' '),
                            t(
                              'div',
                              {
                                staticClass: 'container'
                              },
                              [
                                t(
                                  e.preloadSmf ? 'div' : 'client-only',
                                  {
                                    tag: 'component'
                                  },
                                  [
                                    t(
                                      'UpCSmf',
                                      e._b({
                                        staticClass: 'up-smf',
                                        attrs: {
                                          location: 'account-enforcement',
                                          'strict-order': !0
                                        }
                                      }, 'UpCSmf', e.commonSmfProps, !1)
                                    )
                                  ],
                                  1
                                ),
                                e._v(' '),
                                t(
                                  e.preloadSmf ? 'div' : 'client-only',
                                  {
                                    tag: 'component'
                                  },
                                  [
                                    t(
                                      'UpCSmf',
                                      e._b({
                                        staticClass: 'up-smf',
                                        attrs: {
                                          location: 'announcement-modal'
                                        }
                                      }, 'UpCSmf', e.commonSmfProps, !1)
                                    )
                                  ],
                                  1
                                ),
                                e._v(' '),
                                e.shouldShowSmf ? e._t(
                                  'smfTop',
                                  (
                                    function () {
                                      return [t(
                                        e.preloadSmf ? 'div' : 'client-only',
                                        {
                                          tag: 'component'
                                        },
                                        [
                                          t(
                                            'UpCSmf',
                                            e._b({
                                              staticClass: 'up-smf',
                                              attrs: {
                                                location: 'top'
                                              }
                                            }, 'UpCSmf', e.commonSmfProps, !1)
                                          )
                                        ],
                                        1
                                      )]
                                    }
                                  )
                                ) : e._e(),
                                e._v(' '),
                                !e.$fetchState.pending &&
                                e.$store.state.user.isSudo ? t('sudo-warning') : e._e(),
                                e._v(' '),
                                e._t('content', (function () {
                                  return [t('nuxt')]
                                }))
                              ],
                              2
                            ),
                            e._v(' '),
                            e.isCurrencySelector &&
                            e.selectedCurrency ? t(
                              'i18n-modal-wrapper',
                              {
                                attrs: {
                                  'selected-currency': e.selectedCurrency.code,
                                  'selected-language': e.selectedLanguage.code
                                }
                              }
                            ) : e._e()
                          ],
                          2
                        )
                      ],
                      2
                    ),
                    e._v(' '),
                    t(
                      'LazyHydrate',
                      {
                        attrs: {
                          'when-visible': ''
                        }
                      },
                      [
                        !e.$isNativeApp &&
                        e.isFooterEnabled ? t(
                          'up-footer',
                          {
                            attrs: {
                              http: e.$http,
                              'server-cache-key': 'footer-'.concat(e.$i18n.locale, '-').concat(e.isCurrencySelector, '-').concat(e.selectedCurrency ? e.selectedCurrency.code : ''),
                              'should-show-ot-cookie-settings': e.oneTrustBannerEnabled
                            }
                          }
                        ) : e._e()
                      ],
                      1
                    )
                  ],
                  1
                )
              }
            ),
            [],
            !1,
            null,
            null,
            null
          ).exports
        }
      ),
      X = Object(h.a) (J, undefined, undefined, !1, null, null, null);
      t.default = X.exports
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return w
      }));
      const r = {
        info: [
          'GettingStarted',
          'Promotional',
          'Notification'
        ],
        warning: [
          'Warning'
        ],
        danger: [
          'ActionRequired',
          'AccountHold'
        ]
      };
      var o = (e, t) => 'very_top' === t ? 'warning' : - 1 !== Object.keys(r).indexOf(e) ? e : Object.keys(r).reduce(((t, n) => r[n].includes(e) ? n : t), 'info'),
      c = n(38);
      class l {
        catchError(e) {
          return e.response ? Promise.reject(e.response.statusText) : Promise.reject(e)
        }
        constructor(e) {
          this.api = e
        }
      }
      class d extends l {
        retrieveGQL(e) {
          let {
            location: t,
            url: n,
            visitorId: r,
            isStrictOrder: o
          }
          = e,
          c = 'displayLocation:"'.concat(t, '", url:"').concat(n, '"');
          return o &&
          (c += ', strictOrder:true'),
          r ? '{\n      visitor {\n        siteMessage('.concat(c, ', visitorId:"').concat(
            r,
            '") {\n          title\n          templateUid: templateId\n          content\n          dismissible\n          displayLocation\n          severity\n        }\n      }\n    }'
          ) : '{\n      siteMessage('.concat(
            c,
            ') {\n        title\n        templateUid: templateId\n        content\n        dismissible\n        displayLocation\n        severity\n      }\n    }'
          )
        }
        dismissGQL(e) {
          let {
            templateUid: t,
            visitorId: n
          }
          = e;
          return n ? 'mutation {\n      siteMessageDismissedVisitor(templateId:"'.concat(t, '", visitorId:"').concat(n, '")\n    }') : 'mutation {\n      siteMessageDismissed(templateId:"'.concat(t, '")\n    }')
        }
        displayGQL(e) {
          let {
            templateUid: t,
            visitorId: n
          }
          = e;
          return n ? 'mutation {\n      siteMessageDisplayedVisitor(templateId:"'.concat(t, '", visitorId:"').concat(n, '")\n    }') : 'mutation {\n      siteMessageDisplayed(templateId:"'.concat(t, '")\n    }')
        }
        retrieve(e) {
          let {
            orgUid: t,
            location: n,
            url: r,
            visitorId: o,
            isStrictOrder: c
          }
          = e;
          return this.api.headers(t ? {
            'X-Upwork-API-TenantId': t
          }
           : {
          }).options({
            requestAlias: 'smf.retrieve.'.concat(n)
          }).post({
            query: this.retrieveGQL({
              orgUid: t,
              location: n,
              url: r,
              visitorId: o,
              isStrictOrder: c
            })
          }).res(
            (
              e => e &&
              200 === e.status ? e.json().then(
                (
                  function () {
                    let e = arguments.length > 0 &&
                    void 0 !== arguments[0] ? arguments[0] : {
                    };
                    if (e.error) return {
                    };
                    return (o ? e.data.visitor.siteMessage : e.data.siteMessage) ||
                    {
                    }
                  }
                )
              ) : {
              }
            )
          ).catch(this.catchError)
        }
        dismiss(e) {
          let {
            templateUid: t,
            visitorId: n
          }
          = e;
          return this.api.options({
            requestAlias: 'smf.dismiss'
          }).post({
            query: this.dismissGQL({
              templateUid: t,
              visitorId: n
            })
          }).res().catch(this.catchError)
        }
        display(e) {
          var t,
          n;
          let {
            templateUid: r,
            visitorId: o
          }
          = e;
          return null === (t = (n = this.api).options) ||
          void 0 === t ? void 0 : t.call(n, {
            requestAlias: 'smf.display'
          }).post({
            query: this.displayGQL({
              templateUid: r,
              visitorId: o
            })
          }).res().catch(this.catchError)
        }
      }
      var m = e => new d(e);
      class h extends l {
        retrieve(e) {
          let {
            orgUid: t,
            location: n,
            url: r,
            isStrictOrder: o
          }
          = e;
          return this.api.url(
            '/api/v3/site-messaging/person-messages/top-priority/org/:orgUid/display-location/:location'.replace(':orgUid', t).replace(':location', n)
          ).query({
            ...r ? {
              url: r
            }
             : {
            },
            ...o ? {
              'strict-order': !0
            }
             : {
            }
          }).get().res((e => e && 200 === e.status ? e.json() : {
          })).catch(this.catchError)
        }
        dismiss(e) {
          let {
            templateUid: t
          }
          = e;
          return this.api.url(
            '/api/v3/site-messaging/person-messages/templates/:templateUid/dismissals'.replace(':templateUid', t)
          ).post().res().catch(this.catchError)
        }
        display(e) {
          let {
            templateUid: t
          }
          = e;
          return this.api.url(
            '/api/v3/site-messaging/person-messages/templates/:templateUid/displays'.replace(':templateUid', t)
          ).post().res().catch(this.catchError)
        }
      }
      var f = e => new h(e);
      const v = async e => {
        let {
          http: t,
          graphql: n = !1
        }
        = e;
        return n ? m(t({
          handleApiErrors: !1
        })) : f(t({
          handleApiErrors: !1
        }))
      },
      y = e => {
        let {
          http: t,
          graphql: n,
          tracker: r
        }
        = e;
        return {
          namespaced: !0,
          state: {
            messages: {
            }
          },
          getters: {
            getMessages: e => t => Object.values(e.messages).filter((e => e.displayLocation === t))
          },
          mutations: {
            setMessages: (e, t) => {
              let {
                message: n
              }
              = t;
              e.messages = {
                ...e.messages,
                [
                  n.templateUid
                ]: n
              }
            },
            removeMessage: (e, t) => {
              let {
                templateUid: n
              }
              = t;
              delete e.messages[n],
              e.messages = {
                ...e.messages
              }
            }
          },
          actions: {
            RETRIEVE: async(e, r) => {
              let {
                commit: c
              }
              = e,
              {
                location: l,
                orgUid: d,
                url: m,
                visitorId: h,
                isStrictOrder: f
              }
              = r;
              const y = await v({
                http: t,
                graphql: n
              });
              try {
                const e = await y.retrieve({
                  orgUid: d,
                  location: l,
                  url: m,
                  visitorId: h,
                  isStrictOrder: f
                });
                e &&
                e.templateUid &&
                e.severity &&
                (
                  e.type = o(e.severity, l),
                  c('smf/setMessages', {
                    message: e
                  }, {
                    root: !0
                  })
                )
              } catch (e) {
              }
            },
            DISMISS: async(e, o) => {
              let {
                commit: l
              }
              = e,
              {
                templateUid: d,
                visitorId: m,
                isUserAction: h
              }
              = o;
              const f = await v({
                http: t,
                graphql: n
              });
              await f.dismiss({
                templateUid: d,
                visitorId: m
              }),
              l('smf/removeMessage', {
                templateUid: d
              }, {
                root: !0
              });
              const y = h ? 'smf_dismissed_by_user' : 'smf_dismissed_from_outside';
              Object(c.a) (r, 'click', y, d)
            },
            DISPLAY: async function () {
              const e = await v({
                http: t,
                graphql: n
              });
              for (var o = arguments.length, l = new Array(o), d = 0; d < o; d++) l[d] = arguments[d];
              l[1] &&
              l[1].templateUid &&
              (
                await e.display({
                  templateUid: l[1].templateUid,
                  visitorId: l[1].visitorId
                }),
                Object(c.a) (r, 'impression', 'smf_impression', l[1].templateUid)
              )
            },
            REMOVEMESSAGE: (e, t) => {
              let {
                commit: n
              }
              = e,
              {
                templateUid: r
              }
              = t;
              n('smf/removeMessage', {
                templateUid: r
              }, {
                root: !0
              })
            }
          }
        }
      };
      function w(e, t, n, r) {
        if (e.hasModule('smf')) return;
        const o = y({
          http: n,
          tracker: r,
          graphql: t
        });
        e.registerModule('smf', o, {
          preserveState: !!e.state.smf
        })
      }
    },
    function (e, t, n) {
      'use strict';
      var r = n(0);
      const o = window.requestIdleCallback ||
      function (e) {
        const t = Date.now();
        return setTimeout(
          (
            function () {
              e({
                didTimeout: !1,
                timeRemaining: () => Math.max(0, 50 - (Date.now() - t))
              })
            }
          ),
          1
        )
      },
      c = window.cancelIdleCallback ||
      function (e) {
        clearTimeout(e)
      },
      l = window.IntersectionObserver &&
      new window.IntersectionObserver(
        (
          e => {
            e.forEach(
              (
                e => {
                  let {
                    intersectionRatio: t,
                    target: link
                  }
                  = e;
                  t <= 0 ||
                  !link.__prefetch ||
                  link.__prefetch()
                }
              )
            )
          }
        )
      );
      t.a = {
        name: 'NuxtLink',
        extends : r.default.component('RouterLink'),
        props: {
          prefetch: {
            type: Boolean,
          default:
            !0
          },
          noPrefetch: {
            type: Boolean,
          default:
            !1
          }
        },
        mounted() {
          this.prefetch &&
          !this.noPrefetch &&
          (this.handleId = o(this.observe, {
            timeout: 2000
          }))
        },
        beforeDestroy() {
          c(this.handleId),
          this.__observed &&
          (l.unobserve(this.$el), delete this.$el.__prefetch)
        },
        methods: {
          observe() {
            l &&
            this.shouldPrefetch() &&
            (
              this.$el.__prefetch = this.prefetchLink.bind(this),
              l.observe(this.$el),
              this.__observed = !0
            )
          },
          shouldPrefetch() {
            return this.getPrefetchComponents().length > 0
          },
          canPrefetch() {
            const e = navigator.connection;
            return !(
              this.$nuxt.isOffline ||
              e &&
              ((e.effectiveType || '').includes('2g') || e.saveData)
            )
          },
          getPrefetchComponents() {
            return this.$router.resolve(this.to, this.$route, this.append).resolved.matched.map((e => e.components.default)).filter((e => 'function' == typeof e && !e.options && !e.__prefetched))
          },
          prefetchLink() {
            if (!this.canPrefetch()) return;
            l.unobserve(this.$el);
            const e = this.getPrefetchComponents();
            for (const t of e) {
              const e = t();
              e instanceof Promise &&
              e.catch((() => {
              })),
              t.__prefetched = !0
            }
          }
        }
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return o
      })),
      n.d(t, 'b', (function () {
        return c
      }));
      let r = 0;
      function o() {
        return r += 1,
        r
      }
      function c() {
        return ([10000000] + - 1000 + - 4000 + - 8000 + - 100000000000).replace(
          /[018]/g,
          (
            e => (e ^ crypto.getRandomValues(new Uint8Array(1)) [0] & 15 >> e / 4).toString(16)
          )
        )
      }
    },
    function (e, t, n) {
      'use strict';
      var r = n(141),
      o = {
        name: 'UpLink',
        props: {
          href: {
            type: String,
          default:
            void 0
          },
          i18nPrefix: {
            type: Boolean,
          default:
            !0
          },
          disabled: {
          default:
            !1,
            type: Boolean
          }
        },
        emits: [
          'click',
          'keydown'
        ],
        computed: {
          computedHref() {
            return this.i18nPrefix &&
            this.href &&
            'function' == typeof this.$localePrefix ? this.$localePrefix(this.href) : this.href
          }
        },
        injectStyles: [
          n.n(r).a
        ]
      },
      c = n(2),
      component = Object(c.a) (
        o,
        (
          function () {
            var e = this;
            return (0, e._self._c) (
              'a',
              {
                staticClass: 'up-n-link',
                attrs: {
                  role: !!e.disabled &&
                  'link',
                  'aria-disabled': !!e.disabled ||
                  null,
                  href: !e.disabled &&
                  e.computedHref
                },
                on: {
                  click: function (t) {
                    return e.$emit('click', t)
                  },
                  keydown: function (t) {
                    return e.$emit('keydown', t)
                  }
                }
              },
              [
                e._t('default')
              ],
              2
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      );
      t.a = component.exports
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      n.d(t, 'sanitizeUrl', (function () {
        return c
      })),
      n.d(t, 'sanitizeHtml', (function () {
        return l
      })),
      n.d(t, 'sanitize', (function () {
        return d
      }));
      var r = n(44),
      o = n.n(r);
      function c(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : o.a;
        return null != this &&
        this.$upSanitizeUrl ? this.$upSanitizeUrl(e) : t.isSupported &&
        t.isValidAttribute('a', 'href', e) ? e : null
      }
      function l(html, e) {
        return (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : o.a).sanitize(html, e || {
          USE_PROFILES: {
            html: !0
          }
        })
      }
      function d(content) {
        let e = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : {
        },
        t = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : o.a;
        return 'function' == typeof (null == e ? void 0 : e.addHooks) &&
        e.addHooks(t),
        null != this &&
        this.$upSanitizeHtml ? this.$upSanitizeHtml(content, e) : t.isSupported ? t.sanitize(content, e) : content
      }
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'c', (function () {
        return r
      })),
      n.d(t, 'a', (function () {
        return o
      })),
      n.d(t, 'b', (function () {
        return c
      }));
      const r = e => /(iPad|iPhone|iPod)/gi.test(e),
      o = e => /(Android)/gi.test(e),
      c = e => r(e) ||
      (e => /(Macintosh)/gi.test(e)) (e)
    },
    function (e, t, n) {
      'use strict';
      var r = new Map;
      var o = 'undefined' == typeof window;
      function c(component, e) {
        return Object.assign({
          mixins: [
            {
              beforeCreate: function () {
                this.cleanupHandlers = [];
                var e = function () {
                  var e = function () {
                  },
                  t = new Promise((function (t) {
                    e = t
                  }));
                  return {
                    hydrate: e,
                    hydrationPromise: t
                  }
                }(),
                t = e.hydrate,
                n = e.hydrationPromise;
                this.Nonce = function (e) {
                  var component = e.component,
                  t = e.hydrationPromise;
                  return o ? component : function () {
                    return t.then(
                      (
                        function () {
                          return function (e) {
                            return 'function' == typeof e
                          }(e = component) ? e().then((function (e) {
                            return e.default
                          })) : e;
                          var e
                        }
                      )
                    )
                  }
                }({
                  component: component,
                  hydrationPromise: n
                }),
                this.hydrate = t,
                this.hydrationPromise = n
              },
              beforeDestroy: function () {
                this.cleanup()
              },
              mounted: function () {
                var e = this;
                if (this.$el.nodeType !== Node.COMMENT_NODE) {
                  if (!this.never) {
                    if (this.whenVisible) {
                      var t = function (e) {
                        if ('undefined' == typeof IntersectionObserver) return null;
                        var t = JSON.stringify(e);
                        if (r.has(t)) return r.get(t);
                        var n = new IntersectionObserver(
                          (
                            function (e) {
                              e.forEach(
                                (
                                  function (e) {
                                    (e.isIntersecting || e.intersectionRatio > 0) &&
                                    e.target.hydrate &&
                                    e.target.hydrate()
                                  }
                                )
                              )
                            }
                          ),
                          e
                        );
                        return r.set(t, n),
                        n
                      }(!0 !== this.whenVisible ? this.whenVisible : void 0);
                      if (!t) return void this.hydrate();
                      this.$el.hydrate = this.hydrate;
                      var n = function () {
                        return t.unobserve(e.$el)
                      };
                      return this.cleanupHandlers.push(n),
                      this.hydrationPromise.then(n),
                      void t.observe(this.$el)
                    }
                    if (this.whenIdle) {
                      if (
                        !('requestIdleCallback' in window) ||
                        !('requestAnimationFrame' in window)
                      ) return void this.hydrate();
                      var o = requestIdleCallback(
                        (function () {
                          requestAnimationFrame(e.hydrate)
                        }),
                        {
                          timeout: this.idleTimeout
                        }
                      ),
                      c = function () {
                        return cancelIdleCallback(o)
                      };
                      this.cleanupHandlers.push(c),
                      this.hydrationPromise.then(c)
                    }
                    if (this.interactionEvents && this.interactionEvents.length) {
                      var l = {
                        capture: !0,
                        once: !0,
                        passive: !0
                      };
                      this.interactionEvents.forEach(
                        (
                          function (t) {
                            e.$el.addEventListener(t, e.hydrate, l);
                            e.cleanupHandlers.push((function () {
                              e.$el.removeEventListener(t, e.hydrate, l)
                            }))
                          }
                        )
                      )
                    }
                  }
                } else this.hydrate()
              },
              methods: {
                cleanup: function () {
                  this.cleanupHandlers.forEach((function (e) {
                    return e()
                  }))
                }
              },
              render: function (e) {
                return e(
                  this.Nonce,
                  {
                    attrs: this.$attrs,
                    on: this.$listeners,
                    scopedSlots: this.$scopedSlots
                  },
                  this.$slots.default
                )
              }
            }
          ]
        }, e)
      }
      var l = c({
        render: function () {
          return this.$slots.default
        }
      }, {
        props: {
          idleTimeout: {
          default:
            2000,
            type: Number
          },
          never: {
            type: Boolean
          },
          onInteraction: {
            type: [
              Array,
              Boolean,
              String
            ]
          },
          triggerHydration: {
          default:
            !1,
            type: Boolean
          },
          whenIdle: {
            type: Boolean
          },
          whenVisible: {
            type: [
              Boolean,
              Object
            ]
          }
        },
        computed: {
          interactionEvents: function () {
            return this.onInteraction ? !0 === this.onInteraction ? [
              'focus'
            ] : Array.isArray(this.onInteraction) ? this.onInteraction : [
              this.onInteraction
            ] : []
          }
        },
        watch: {
          triggerHydration: {
            immediate: !0,
            handler: function (e) {
              e &&
              this.hydrate()
            }
          }
        }
      });
      t.a = l
    },
    function (e, t) {
      e.exports = function (e) {
        function t(r) {
          if (n[r]) return n[r].exports;
          var o = n[r] = {
            i: r,
            l: !1,
            exports: {
            }
          };
          return e[r].call(o.exports, o, o.exports, t),
          o.l = !0,
          o.exports
        }
        var n = {};
        return t.m = e,
        t.c = n,
        t.d = function (e, n, r) {
          t.o(e, n) ||
          Object.defineProperty(e, n, {
            configurable: !1,
            enumerable: !0,
            get: r
          })
        },
        t.n = function (e) {
          var n = e &&
          e.__esModule ? function () {
            return e.default
          }
           : function () {
            return e
          };
          return t.d(n, 'a', n),
          n
        },
        t.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t)
        },
        t.p = '',
        t(t.s = 0)
      }(
        [function (e, t, n) {
          'use strict';
          var r = 'function' == typeof Symbol &&
          'symbol' == typeof Symbol.iterator ? function (e) {
            return typeof e
          }
           : function (e) {
            return e &&
            'function' == typeof Symbol &&
            e.constructor === Symbol &&
            e !== Symbol.prototype ? 'symbol' : typeof e
          },
          o = n(1);
          e.exports = function (t, n) {
            var i = !(arguments.length > 2 && void 0 !== arguments[2]) ||
            arguments[2],
            a = 'object' === ('undefined' == typeof document ? 'undefined' : r(document)) &&
            'string' == typeof document.cookie,
            s = 'object' === (void 0 === t ? 'undefined' : r(t)) &&
            'object' === (void 0 === n ? 'undefined' : r(n)) &&
            void 0 !== e,
            u = !a &&
            !s ||
            a &&
            s,
            c = function (e) {
              if (s) {
                var r = t.headers.cookie ||
                '';
                return e &&
                (
                  r = (r = n.getHeaders()) ['set-cookie'] ? r['set-cookie'].map((function (e) {
                    return e.split(';') [0]
                  })).join(';') : ''
                ),
                r
              }
              if (a) return document.cookie ||
              ''
            },
            l = function () {
              var e = n.getHeader('Set-Cookie');
              return (e = 'string' == typeof e ? [
                e
              ] : e) ||
              []
            },
            p = function (e) {
              return n.setHeader('Set-Cookie', e)
            },
            d = function (e, t) {
              if (!t) return e;
              try {
                return JSON.parse(e)
              } catch (t) {
                return e
              }
            },
            m = {
              parseJSON: i,
              set: function () {
                var e = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : '',
                t = arguments.length > 1 &&
                void 0 !== arguments[1] ? arguments[1] : '',
                n = arguments.length > 2 &&
                void 0 !== arguments[2] ? arguments[2] : {
                  path: '/'
                };
                if (!u) if (
                  t = 'object' === (void 0 === t ? 'undefined' : r(t)) ? JSON.stringify(t) : t,
                  s
                ) {
                  var i = l();
                  i.push(o.serialize(e, t, n)),
                  p(i)
                } else document.cookie = o.serialize(e, t, n)
              },
              setAll: function () {
                var e = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : [];
                u ||
                Array.isArray(e) &&
                e.forEach(
                  (
                    function (e) {
                      var t = e.name,
                      n = void 0 === t ? '' : t,
                      r = e.value,
                      o = void 0 === r ? '' : r,
                      i = e.opts,
                      a = void 0 === i ? {
                        path: '/'
                      }
                       : i;
                      m.set(n, o, a)
                    }
                  )
                )
              },
              get: function () {
                var e = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : '',
                t = arguments.length > 1 &&
                void 0 !== arguments[1] ? arguments[1] : {
                  fromRes: !1,
                  parseJSON: m.parseJSON
                };
                if (u) return '';
                var n = o.parse(c(t.fromRes)) [e];
                return d(n, t.parseJSON)
              },
              getAll: function () {
                var e = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : {
                  fromRes: !1,
                  parseJSON: m.parseJSON
                };
                if (u) return {
                };
                var t = o.parse(c(e.fromRes));
                for (var n in t) t[n] = d(t[n], e.parseJSON);
                return t
              },
              remove: function () {
                var e = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : '',
                t = arguments.length > 1 &&
                void 0 !== arguments[1] ? arguments[1] : {
                  path: '/'
                };
                u ||
                (t.expires = new Date(0), m.set(e, '', t))
              },
              removeAll: function () {
                var e = arguments.length > 0 &&
                void 0 !== arguments[0] ? arguments[0] : {
                  path: '/'
                };
                if (!u) {
                  var t = o.parse(c());
                  for (var n in t) m.remove(n, e)
                }
              },
              nodeCookie: o
            };
            return m
          }
        },
        function (e, t, n) {
          'use strict';
          function i(e, t) {
            try {
              return t(e)
            } catch (t) {
              return e
            }
          }
          t.parse = function (e, t) {
            if ('string' != typeof e) throw new TypeError('argument str must be a string');
            for (
              var n = {},
              r = t ||
              {
              },
              o = e.split(u),
              s = r.decode ||
              a,
              c = 0;
              c < o.length;
              c++
            ) {
              var l = o[c],
              p = l.indexOf('=');
              if (!(p < 0)) {
                var d = l.substr(0, p).trim(),
                m = l.substr(++p, l.length).trim();
                '"' == m[0] &&
                (m = m.slice(1, - 1)),
                null == n[d] &&
                (n[d] = i(m, s))
              }
            }
            return n
          },
          t.serialize = function (e, t, n) {
            var o = n ||
            {
            },
            c = o.encode ||
            s;
            if ('function' != typeof c) throw new TypeError('option encode is invalid');
            if (!r.test(e)) throw new TypeError('argument name is invalid');
            var i = c(t);
            if (i && !r.test(i)) throw new TypeError('argument val is invalid');
            var a = e + '=' + i;
            if (null != o.maxAge) {
              var u = o.maxAge - 0;
              if (isNaN(u)) throw new Error('maxAge should be a Number');
              a += '; Max-Age=' + Math.floor(u)
            }
            if (o.domain) {
              if (!r.test(o.domain)) throw new TypeError('option domain is invalid');
              a += '; Domain=' + o.domain
            }
            if (o.path) {
              if (!r.test(o.path)) throw new TypeError('option path is invalid');
              a += '; Path=' + o.path
            }
            if (o.expires) {
              if ('function' != typeof o.expires.toUTCString) throw new TypeError('option expires is invalid');
              a += '; Expires=' + o.expires.toUTCString()
            }
            if (
              o.httpOnly &&
              (a += '; HttpOnly'),
              o.secure &&
              (a += '; Secure'),
              o.sameSite
            ) switch (
                'string' == typeof o.sameSite ? o.sameSite.toLowerCase() : o.sameSite
              ) {
              case !0:
                a += '; SameSite=Strict';
                break;
              case 'lax':
                a += '; SameSite=Lax';
                break;
              case 'strict':
                a += '; SameSite=Strict';
                break;
              case 'none':
                a += '; SameSite=None';
                break;
              default:
                throw new TypeError('option sameSite is invalid')
            }
            return a
          };
          var a = decodeURIComponent,
          s = encodeURIComponent,
          u = /; */,
          r = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/
        }
        ]
      )
    },
    function (e, t, n) {
      'use strict';
      function r() {
        var e,
        t;
        null === (e = window.OneTrust) ||
        void 0 === e ||
        null === (t = e.initializeCookiePolicyHtml) ||
        void 0 === t ||
        t.call(e)
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    function (e, t, n) {
      'use strict';
      var r = {
        name: 'ClientOnly',
        functional: !0,
        props: {
          placeholder: String,
          placeholderTag: {
            type: String,
          default:
            'div'
          }
        },
        render: function (e, t) {
          var n = t.parent,
          r = t.slots,
          o = t.props,
          c = r(),
          l = c.default;
          void 0 === l &&
          (l = []);
          var d = c.placeholder;
          return n._isMounted ? l : (
            n.$once('hook:mounted', (function () {
              n.$forceUpdate()
            })),
            o.placeholderTag &&
            (o.placeholder || d) ? e(
              o.placeholderTag,
              {
                class : [
                  'client-only-placeholder'
                ]
              },
              o.placeholder ||
              d
            ) : l.length > 0 ? l.map((function () {
              return e(!1)
            })) : e(!1)
          )
        }
      };
      e.exports = r
    },
    function (e, t, n) {
      var r,
      o,
      c;
      o = [],
      void 0 === (
        c = 'function' == typeof (
          r = function () {
            var e,
            t,
            n = 'lscache-',
            r = '-cacheexpiration',
            o = 10,
            c = 60000,
            l = x(c),
            d = '',
            m = !1;
            function h() {
              var t = '__lscachetest__',
              n = t;
              if (void 0 !== e) return e;
              try {
                if (!localStorage) return !1
              } catch (e) {
                return !1
              }
              try {
                T(t, n),
                E(t),
                e = !0
              } catch (t) {
                e = !(!f(t) || !localStorage.length)
              }
              return e
            }
            function f(e) {
              return e &&
              (
                'QUOTA_EXCEEDED_ERR' === e.name ||
                'NS_ERROR_DOM_QUOTA_REACHED' === e.name ||
                'QuotaExceededError' === e.name
              )
            }
            function v() {
              return void 0 === t &&
              (t = null != window.JSON),
              t
            }
            function y(text) {
              return text.replace(/[[\]{}()*+?.\\^$|]/g, '\\$&')
            }
            function w(e) {
              return e + r
            }
            function k() {
              return Math.floor((new Date).getTime() / c)
            }
            function S(e) {
              return localStorage.getItem(n + d + e)
            }
            function T(e, t) {
              localStorage.removeItem(n + d + e),
              localStorage.setItem(n + d + e, t)
            }
            function E(e) {
              localStorage.removeItem(n + d + e)
            }
            function I(e) {
              var t,
              i,
              o = new RegExp('^' + n + y(d) + '(.*)'),
              c = [];
              for (i = 0; i < localStorage.length; i++) (t = (t = (t = localStorage.key(i)) && t.match(o)) && t[1]) &&
              t.indexOf(r) < 0 &&
              c.push(t);
              for (i = 0; i < c.length; i++) e(c[i], w(c[i]))
            }
            function _(e) {
              var t = w(e);
              E(e),
              E(t)
            }
            function C(e) {
              var t = w(e),
              n = S(t);
              if (n) {
                var r = parseInt(n, o);
                if (k() >= r) return E(e),
                E(t),
                !0
              }
            }
            function N(e, t) {
              m &&
              'console' in window &&
              'function' == typeof window.console.warn &&
              (
                window.console.warn('lscache - ' + e),
                t &&
                window.console.warn('lscache - The error was: ' + t.message)
              )
            }
            function x(e) {
              return Math.floor(8640000000000000 / e)
            }
            return {
              set: function (e, t, time) {
                if (!h()) return !1;
                if (!v()) return !1;
                try {
                  t = JSON.stringify(t)
                } catch (e) {
                  return !1
                }
                try {
                  T(e, t)
                } catch (d) {
                  if (!f(d)) return N('Could not add item with key \'' + e + '\'', d),
                  !1;
                  var n,
                  r = [];
                  I(
                    (
                      function (e, t) {
                        var n = S(t);
                        n = n ? parseInt(n, o) : l,
                        r.push({
                          key: e,
                          size: (S(e) || '').length,
                          expiration: n
                        })
                      }
                    )
                  ),
                  r.sort((function (a, b) {
                    return b.expiration - a.expiration
                  }));
                  for (var c = (t || '').length; r.length && c > 0; ) N(
                    'Cache is full, removing item with key \'' + (n = r.pop()).key + '\''
                  ),
                  _(n.key),
                  c -= n.size;
                  try {
                    T(e, t)
                  } catch (t) {
                    return N(
                      'Could not add item with key \'' + e + '\', perhaps it\'s too big?',
                      t
                    ),
                    !1
                  }
                }
                return time ? T(w(e), (k() + time).toString(o)) : E(w(e)),
                !0
              },
              get: function (e) {
                if (!h()) return null;
                if (C(e)) return null;
                var t = S(e);
                if (!t || !v()) return t;
                try {
                  return JSON.parse(t)
                } catch (e) {
                  return t
                }
              },
              remove: function (e) {
                h() &&
                _(e)
              },
              supported: function () {
                return h()
              },
              flush: function () {
                h() &&
                I((function (e) {
                  _(e)
                }))
              },
              flushExpired: function () {
                h() &&
                I((function (e) {
                  C(e)
                }))
              },
              setBucket: function (e) {
                d = e
              },
              resetBucket: function () {
                d = ''
              },
              getExpiryMilliseconds: function () {
                return c
              },
              setExpiryMilliseconds: function (e) {
                l = x(c = e)
              },
              enableWarnings: function (e) {
                m = e
              }
            }
          }
        ) ? r.apply(t, o) : r
      ) ||
      (e.exports = c)
    },
    ,
    function (e, t, n) {
      window.$workbox = async function () {
        if (!1 in navigator) throw new Error('serviceWorker is not supported in current browser!');
        const {
          Workbox: e
        }
        = await n.e(172).then(n.bind(null, 194)),
        t = new e('/sw.js', {
          scope: '/'
        });
        return await t.register(),
        t
      }().catch((e => {
      }))
    },
    function (e, t, n) {
      'use strict';
      n.r(t);
      var r = n(73),
      o = {
        name: 'UpCIcon',
        props: {
          icon: {
          default:
            null,
            type: [
              Object,
              Function
            ]
          },
          size: {
          default:
            'md',
            type: String,
            validator: e => ['sm',
            'md',
            'lg',
            'xl'].includes(e)
          }
        },
        emits: [
          'mounted'
        ],
        mounted() {
          this.$emit('mounted')
        },
        injectStyles: [
          n.n(r).a
        ]
      },
      c = n(2),
      component = Object(c.a) (
        o,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'div',
              {
                class : 'air3-icon '.concat(e.size)
              },
              [
                t(e.icon, {
                  tag: 'component'
                })
              ],
              1
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      );
      t.default = component.exports
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return o
      }));
      var r = n(14);
      async function o(e) {
        if (e.loadingLayoutVisitor) await e.loadingLayoutVisitor;
         else {
          try {
            const t = Promise.all(
              [Object(r.a) (
                e.store,
                {
                  requestAlias: 'visitor-top-nav-ssi',
                  ff: [
                    {
                      name: 'OTBnrOn',
                      fallback: !1
                    },
                    {
                      name: 'MP17304HreflangTag',
                      fallback: !1
                    }
                  ],
                  cache: {
                    strategy: 'cacheAndNetwork'
                  }
                }
              )]
            );
            e.loadingLayoutVisitor = t,
            await t
          } catch (t) {
            e.$logger.error(t, {
              msgPrefix: 'layout-visitor-ssi'
            })
          }
          e.loadingLayoutVisitor = !0
        }
      }
    },
    ,
    function (e, t, n) {
      'use strict';
      function r(code) {
        const e = new Intl.Locale(code),
        t = new Intl.DisplayNames([code], {
          type: 'language'
        }).of (e.language),
        n = new Intl.DisplayNames([code], {
          type: 'region'
        }).of (e.region) ||
        '',
        r = new Intl.DisplayNames([code], {
          type: 'region',
          style: 'narrow'
        }).of (e.region) ||
        '';
        return {
          iso: e.baseName,
          code: code,
          language: t,
          region: n,
          regionAbbr: r
        }
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    function (e, t, n) {
      var content = n(168);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('988be3a6', content, !0, {
        sourceMap: !1
      })
    },
    function (e, t, n) {
      var content = n(170);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('14d362f0', content, !0, {
        sourceMap: !1
      })
    },
    function (e, t, n) {
      var content = n(172);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('a7d75b1c', content, !0, {
        sourceMap: !1,
        manualInject: !0
      })
    },
    function (e, t, n) {
      'use strict';
      n.d(t, 'a', (function () {
        return o
      }));
      var r = n(6);
      n(174);
      function o() {
        return {
          props: {
            enableUma: {
              type: Boolean,
            default:
              !1
            },
            umaVisitorVariant: {
              type: Boolean,
            default:
              void 0
            }
          },
          beforeMount() {
            this.isUmaEnabled &&
            document.body.classList.add('layout-sidebar_enabled')
          },
          mounted() {
            this.isUmaEnabled &&
            this.initialize()
          },
          destroyed() {
            this.isUmaEnabled &&
            this.destroy()
          },
          watch: {
            isUmaEnabled(e, t) {
              t ||
              !0 !== e ? !0 !== t ||
              e ||
              this.destroy() : this.initialize()
            }
          },
          computed: {
            isUmaEnabled() {
              return !this.$isNativeApp &&
              (!!this.$route.query.enableUma || this.enableUma)
            }
          },
          methods: {
            initialize() {
              document.body.classList.contains('layout-sidebar_enabled') ||
              document.body.classList.add('layout-sidebar_enabled'),
              this.$microAppUtils.innova.setOptions({
                inLayout: !0
              }),
              this.$microAppUtils.innova.load();
              (
                void 0 === this.umaVisitorVariant ? !this.$store.state.context.isLoggedIn : this.umaVisitorVariant
              ) ? Object(r.a) ().setState('uma.options', {
              }) : (
                Object(r.a) ().setState('uma.options', {
                  umaVariant: 'USI'
                }),
                Object(r.a) ().setState('uma.context.hostContext', {
                  page: 'proposal_manager'
                })
              ),
              this.unsubscribeApi = Object(r.a) ().subscribeToState(
                'layout.sidebarExpanded',
                (
                  e => {
                    document.body.classList.toggle('layout-sidebar_expanded', !!e)
                  }
                )
              )
            },
            destroy() {
              setTimeout((() => {
                this.$microAppUtils.innova.destroy()
              })),
              Object(r.a) ().setState('layout.sidebarExpanded', !1),
              this.unsubscribeApi &&
              this.unsubscribeApi(),
              document.body.classList.remove('layout-sidebar_enabled')
            }
          }
        }
      }
    },
    function (e, t, n) {
      var content = n(177);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('22e197dc', content, !0, {
        sourceMap: !1,
        manualInject: !0
      })
    },
    function (e, t, n) {
      'use strict';
      var r = /["'&<>]/;
      e.exports = function (e) {
        var t,
        n = '' + e,
        o = r.exec(n);
        if (!o) return n;
        var html = '',
        c = 0,
        l = 0;
        for (c = o.index; c < n.length; c++) {
          switch (n.charCodeAt(c)) {
            case 34:
              t = '&quot;';
              break;
            case 38:
              t = '&amp;';
              break;
            case 39:
              t = '&#39;';
              break;
            case 60:
              t = '&lt;';
              break;
            case 62:
              t = '&gt;';
              break;
            default:
              continue
          }
          l !== c &&
          (html += n.substring(l, c)),
          l = c + 1,
          html += t
        }
        return l !== c ? html + n.substring(l, c) : html
      }
    },
    function (e, t, n) {
      var content = n(185);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('766c6ca1', content, !0, {
        sourceMap: !1
      })
    },
    function (e, t, n) {
      var content = n(187);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('78dc5d8d', content, !0, {
        sourceMap: !1,
        manualInject: !0
      })
    },
    function (e, t, n) {
      var content = n(189);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('e690e088', content, !0, {
        sourceMap: !1
      })
    },
    function (e, t, n) {
      var content = n(191);
      content.__esModule &&
      (content = content.default),
      'string' == typeof content &&
      (content = [
        [e.i,
        content,
        '']
      ]),
      content.locals &&
      (e.exports = content.locals);
      (0, n(8).default) ('920744e2', content, !0, {
        sourceMap: !1,
        manualInject: !0
      })
    },
    function (e, t, n) {
      'use strict';
      var r = n(0),
      o = n(71),
      c = n(45),
      l = n(90),
      d = n.n(l),
      m = {
        'en-gb': n(91),
        en: n(92),
        is: n(93)
      },
      h = {
        components: {
          UpCIcon: o.default
        },
        mixins: [
          Object(c.a) ()
        ],
        props: {
          hideI18nSelector: {
            type: Boolean,
          default:
            !1
          }
        },
        i18n: {
          messages: m
        },
        computed: {
          iconPublic: () => Object(r.defineAsyncComponent) ((() => n.e(114).then(n.bind(null, 672)))),
          socialItems() {
            return [{
              title: this.$t('nsc_VisitUpworkOnFacebook'),
              href: 'https://www.facebook.com/upwork',
              icon: Object(r.defineAsyncComponent) ((() => n.e(128).then(n.bind(null, 1214))))
            },
            {
              title: this.$t('nsc_ReadUpworkCompanyNewsOnLinkedIn'),
              href: 'https://www.linkedin.com/company/upwork',
              icon: Object(r.defineAsyncComponent) ((() => n.e(130).then(n.bind(null, 1215))))
            },
            {
              title: this.$t('nsc_FollowUpworkOnTwitter'),
              href: 'https://twitter.com/Upwork',
              icon: Object(r.defineAsyncComponent) ((() => n.e(131).then(n.bind(null, 1216))))
            },
            {
              title: this.$t('nsc_WatchUpworkvideosonYouTube'),
              href: 'https://www.youtube.com/channel/UCvxGFOnwUBDHHcxuPqhe4CQ',
              icon: Object(r.defineAsyncComponent) ((() => n.e(132).then(n.bind(null, 1217))))
            },
            {
              title: this.$t('nsc_FollowUpworkOnInstagram'),
              href: 'https://www.instagram.com/upwork/',
              icon: Object(r.defineAsyncComponent) ((() => n.e(129).then(n.bind(null, 1218))))
            }
            ]
          },
          mobileAppItems() {
            return [{
              title: this.$t('nsc_DownloadUpworkAppFromITunes'),
              href: 'https://apps.apple.com/us/developer/upwork-global-inc/id329377609',
              icon: Object(r.defineAsyncComponent) ((() => n.e(60).then(n.bind(null, 1219))))
            },
            {
              title: this.$t('nsc_DownloadUpworkAppFromGooglePlay'),
              href: 'https://play.google.com/store/apps/dev?id=8802639270489632480',
              icon: Object(r.defineAsyncComponent) ((() => n.e(57).then(n.bind(null, 1220))))
            }
            ]
          }
        },
        injectStyles: [
          d.a
        ]
      },
      f = n(2),
      component = Object(f.a) (
        h,
        (
          function () {
            var e = this,
            t = e._self._c;
            return t(
              'div',
              {
                staticClass: 'up-footer-social'
              },
              [
                t(
                  'div',
                  {
                    staticClass: 'up-footer-social-icons'
                  },
                  [
                    t(
                      'div',
                      {
                        staticClass: 'up-footer-social-header',
                        attrs: {
                          role: 'heading',
                          'aria-level': '3'
                        }
                      },
                      [
                        e._v('\n      ' + e._s(e.$t('nsc_FollowUs')) + '\n    ')
                      ]
                    ),
                    e._v(' '),
                    t(
                      'ul',
                      {
                        staticClass: 'up-footer-social-list'
                      },
                      e._l(
                        e.socialItems,
                        (
                          function (n, r) {
                            let {
                              href: o,
                              title: title,
                              icon: c
                            }
                            = n;
                            return t(
                              'li',
                              {
                                key: r,
                                staticClass: 'up-footer-social-list-item'
                              },
                              [
                                t(
                                  'a',
                                  {
                                    staticClass: 'up-footer-social-list-link',
                                    attrs: {
                                      href: o,
                                      title: title,
                                      target: '_blank',
                                      rel: 'noopener noreferrer'
                                    }
                                  },
                                  [
                                    t('span', {
                                      staticClass: 'sr-only'
                                    }, [
                                      e._v(e._s(title))
                                    ]),
                                    e._v(' '),
                                    t('UpCIcon', {
                                      attrs: {
                                        icon: c
                                      }
                                    })
                                  ],
                                  1
                                )
                              ]
                            )
                          }
                        )
                      ),
                      0
                    )
                  ]
                ),
                e._v(' '),
                t(
                  'div',
                  {
                    staticClass: 'up-footer-social-icons up-footer-download'
                  },
                  [
                    t(
                      'div',
                      {
                        staticClass: 'up-footer-social-header',
                        attrs: {
                          role: 'heading',
                          'aria-level': '3'
                        }
                      },
                      [
                        e._v('\n      ' + e._s(e.$t('nsc_MobileApp')) + '\n    ')
                      ]
                    ),
                    e._v(' '),
                    t(
                      'ul',
                      {
                        staticClass: 'up-footer-social-list'
                      },
                      [
                        e._l(
                          e.mobileAppItems,
                          (
                            function (n, r) {
                              let {
                                href: o,
                                title: title,
                                icon: c
                              }
                              = n;
                              return t(
                                'li',
                                {
                                  key: r,
                                  staticClass: 'up-footer-social-list-item'
                                },
                                [
                                  t(
                                    'a',
                                    {
                                      staticClass: 'up-footer-social-list-link',
                                      attrs: {
                                        href: o,
                                        title: title,
                                        target: '_blank',
                                        rel: 'noopener noreferrer'
                                      }
                                    },
                                    [
                                      t('span', {
                                        staticClass: 'sr-only'
                                      }, [
                                        e._v(e._s(title))
                                      ]),
                                      e._v(' '),
                                      t('UpCIcon', {
                                        attrs: {
                                          icon: c
                                        }
                                      })
                                    ],
                                    1
                                  )
                                ]
                              )
                            }
                          )
                        ),
                        e._v(' '),
                        e.isCurrencySelector &&
                        e.selectedCurrency &&
                        !e.hideI18nSelector ? t(
                          'li',
                          {
                            staticClass: 'up-footer-social-list-item up-footer-social-list-item-currency'
                          },
                          [
                            t(
                              'button',
                              {
                                staticClass: 'up-footer-social-i18n-modal-trigger',
                                attrs: {
                                  type: 'button',
                                  'data-cy': 'up-footer-i18n-modal-trigger',
                                  'data-ev-sublocation': 'footer',
                                  'data-ev-label': 'open_i18n_modal',
                                  'data-ev-label-prefix': ''
                                },
                                on: {
                                  click: e.togglei18nModal
                                }
                              },
                              [
                                t('UpCIcon', {
                                  attrs: {
                                    icon: e.iconPublic,
                                    size: 'sm'
                                  }
                                }),
                                e._v(' '),
                                t(
                                  'span',
                                  {
                                    staticClass: 'sr-only'
                                  },
                                  [
                                    e._v(e._s(e.$t('nsc_FooterSelectACurrency')))
                                  ]
                                ),
                                e._v(
                                  '\n          ' + e._s(e.selectedLanguage.language) + ' (' + e._s(e.selectedLanguage.regionAbbr) + ')\n          | ' + e._s(e.selectedCurrency.code) + '\n        '
                                )
                              ],
                              1
                            )
                          ]
                        ) : e._e()
                      ],
                      2
                    )
                  ]
                )
              ]
            )
          }
        ),
        [],
        !1,
        null,
        null,
        null
      );
      t.a = component.exports
    },
    function (e, t, n) {
      'use strict';
      function r(e, t) {
        return t = t ||
        {
        },
        new Promise(
          (
            function (n, r) {
              var s = new XMLHttpRequest,
              o = [],
              u = {},
              a = function e() {
                return {
                  ok: 2 == (s.status / 100 | 0),
                  statusText: s.statusText,
                  status: s.status,
                  url: s.responseURL,
                  text: function () {
                    return Promise.resolve(s.responseText)
                  },
                  json: function () {
                    return Promise.resolve(s.responseText).then(JSON.parse)
                  },
                  blob: function () {
                    return Promise.resolve(new Blob([s.response]))
                  },
                  clone: e,
                  headers: {
                    keys: function () {
                      return o
                    },
                    entries: function () {
                      return o.map((function (e) {
                        return [e,
                        s.getResponseHeader(e)]
                      }))
                    },
                    get: function (e) {
                      return s.getResponseHeader(e)
                    },
                    has: function (e) {
                      return null != s.getResponseHeader(e)
                    }
                  }
                }
              };
              for (
                var i in s.open(t.method || 'get', e, !0),
                s.onload = function () {
                  s.getAllResponseHeaders().toLowerCase().replace(/^(.+?):/gm, (function (e, t) {
                    u[t] ||
                    o.push(u[t] = t)
                  })),
                  n(a())
                },
                s.onerror = r,
                s.withCredentials = 'include' == t.credentials,
                t.headers
              ) s.setRequestHeader(i, t.headers[i]);
              s.send(t.body || null)
            }
          )
        )
      }
      n.d(t, 'a', (function () {
        return r
      }))
    },
    function (e, t, n) {
      'use strict';
      var r = function (e) {
        return function (e) {
          return !!e &&
          'object' == typeof e
        }(e) &&
        !function (e) {
          var t = Object.prototype.toString.call(e);
          return '[object RegExp]' === t ||
          '[object Date]' === t ||
          function (e) {
            return e.$$typeof === o
          }(e)
        }(e)
      };
      var o = 'function' == typeof Symbol &&
      Symbol.for ? Symbol.for('react.element') : 60103;
      function c(e, t) {
        return !1 !== t.clone &&
        t.isMergeableObject(e) ? f((n = e, Array.isArray(n) ? [] : {
        }), e, t) : e;
        var n
      }
      function l(e, source, t) {
        return e.concat(source).map((function (element) {
          return c(element, t)
        }))
      }
      function d(e) {
        return Object.keys(e).concat(
          function (e) {
            return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(e).filter(
              (
                function (symbol) {
                  return Object.propertyIsEnumerable.call(e, symbol)
                }
              )
            ) : []
          }(e)
        )
      }
      function m(object, e) {
        try {
          return e in object
        } catch (e) {
          return !1
        }
      }
      function h(e, source, t) {
        var n = {};
        return t.isMergeableObject(e) &&
        d(e).forEach((function (r) {
          n[r] = c(e[r], t)
        })),
        d(source).forEach(
          (
            function (r) {
              (
                function (e, t) {
                  return m(e, t) &&
                  !(
                    Object.hasOwnProperty.call(e, t) &&
                    Object.propertyIsEnumerable.call(e, t)
                  )
                }
              ) (e, r) ||
              (
                m(e, r) &&
                t.isMergeableObject(source[r]) ? n[r] = function (e, t) {
                  if (!t.customMerge) return f;
                  var n = t.customMerge(e);
                  return 'function' == typeof n ? n : f
                }(r, t) (e[r], source[r], t) : n[r] = c(source[r], t)
              )
            }
          )
        ),
        n
      }
      function f(e, source, t) {
        (t = t || {
        }).arrayMerge = t.arrayMerge ||
        l,
        t.isMergeableObject = t.isMergeableObject ||
        r,
        t.cloneUnlessOtherwiseSpecified = c;
        var n = Array.isArray(source);
        return n === Array.isArray(e) ? n ? t.arrayMerge(e, source, t) : h(e, source, t) : c(source, t)
      }
      f.all = function (e, t) {
        if (!Array.isArray(e)) throw new Error('first argument should be an array');
        return e.reduce((function (e, n) {
          return f(e, n, t)
        }), {
        })
      };
      var v = f;
      e.exports = v
    },
    function (e, t, n) {
      'use strict';
      var r = n(24);
      n.d(t, 'a', (function () {
        return r.a
      }))
    },
    function (e, t, n) {
      'use strict';
      var r = n(30);
      n.d(t, 'a', (function () {
        return r.b
      }))
    },
    ,
    function (e) {
      e.exports = JSON.parse('{}')
    },
    function (e) {
      e.exports = JSON.parse(
        '{"nsc_FollowUs":"Follow Us","nsc_MobileApp":"Mobile app","nsc_VisitUpworkOnFacebook":"Visit Upwork on Facebook","nsc_ReadUpworkCompanyNewsOnLinkedIn":"Read Upwork company news on LinkedIn","nsc_FollowUpworkOnTwitter":"Follow @Upwork on Twitter","nsc_WatchUpworkvideosonYouTube":"Watch Upwork videos on YouTube","nsc_FollowUpworkOnInstagram":"Follow Upwork on Instagram","nsc_DownloadUpworkAppFromITunes":"Download Upwork app from iTunes","nsc_DownloadUpworkAppFromGooglePlay":"Download Upwork app from Google Play","nsc_FooterSelectACurrency":"Select a language and currency"}'
      )
    },
    function (e) {
      e.exports = JSON.parse('{}')
    },
    ,
    function (e) {
      e.exports = JSON.parse('{}')
    },
    function (e) {
      e.exports = JSON.parse(
        '{"nsc_AboutUs_1":"About Us","nsc_Feedback_2":"Feedback","nsc_TrustSafetySecurity_4":"Trust, Safety & Security","nsc_HelpSupport_5":"Help & Support","nsc_UpworkFoundation_6":"Upwork Foundation","nsc_TermsOfService_7":"Terms of Service","nsc_PrivacyPolicy_8":"Privacy Policy","nsc_CA_Notice_at_Collection":"CA Notice at Collection","nsc_OneTrustCookieSettings":"Cookie Settings","nsc_Accessibility_9":"Accessibility","nsc_DesktopApp_10":"Desktop App","nsc_CookiePolicy_11":"Cookie Policy","nsc_EnterpriseSolutions_12":"Enterprise Solutions","nsc_GotAnIdeaSuggestionOrGeneralFeedbackShar_82":"Got an idea, suggestion or general feedback? Share it here!","nsc_HavingProblemWithOurSite_83":"Having problem with our site?","nsc_VisitHelpCenter_84":"Visit Help Center","nsc_LookingForGuidanceFromYourFellowUpworker_85":"Looking for guidance from your fellow Upworkers?","nsc_GoToOurForum_86":"Go To Our Forum","nsc_ThanksForTakingTheTimeToShareYourThought_87":"Thanks for taking the time to share your thoughts - honest feedback helps make Upwork a better place! And while we can\'t respond to every comment, please know that we read and appreciate every suggestion that comes our way.","nsc_ThanksForYourFeedback_88":"Thanks for your feedback.","nsc_Cancel_89":"Cancel","nsc_Send_90":"Send","nsc_Copy2015CurrentyearUpworkRegGlobalInc_102":"© 2015 - {0} Upwork® Global Inc.","nsc_FooterNavigation_224":"Footer navigation","nsc_ReleaseNotes":"Release notes","nsc_ReferralProgram":"Referral Program"}'
      )
    },
    function (e) {
      e.exports = JSON.parse('{}')
    },
    ,
    function (e) {
      e.exports = JSON.parse('{}')
    },
    function (e) {
      e.exports = JSON.parse(
        '{"vc_CloseTheHiddenlabelAlert_37":"Close the {label} alert"}'
      )
    },
    function (e) {
      e.exports = JSON.parse('{}')
    },
    ,
    function (e) {
      e.exports = JSON.parse('{}')
    },
    function (e) {
      e.exports = JSON.parse(
        '{"nsc_ReminderYouAreCurrentlyInSudoModeAsUserR_262":"Reminder: You are currently in SUDO mode as user \\"{storeStateUserNid}\\""}'
      )
    },
    function (e) {
      e.exports = JSON.parse('{}')
    },
    ,
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatThreads'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threads'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'id'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'title'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'createdAt'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'model'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 109
        }
      };
      n.loc.source = {
        body: 'query {\n  freelancerChatThreads {\n    threads {\n      id\n      title\n      createdAt\n      model\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'FreelancerChatThread'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatThread'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'id'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'title'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'createdAt'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'model'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 138
        }
      };
      n.loc.source = {
        body: 'query FreelancerChatThread($threadId: ID!) {\n  freelancerChatThread(threadId: $threadId) {\n    id\n    title\n    createdAt\n    model\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.FreelancerChatThread = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'FreelancerChatThread')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'FreelancerChatAskQuestion'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'model'
                  }
                },
                type: {
                  kind: 'NamedType',
                  name: {
                    kind: 'Name',
                    value: 'String'
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatQuestionRequest'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'FreelancerChatQuestionRequestInput'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatAskQuestion'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'model'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'model'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'freelancerChatQuestionRequest'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'freelancerChatQuestionRequest'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'questionId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 280
        }
      };
      n.loc.source = {
        body: 'mutation FreelancerChatAskQuestion(\n  $model: String\n  $freelancerChatQuestionRequest: FreelancerChatQuestionRequestInput!\n) {\n  freelancerChatAskQuestion(\n    model: $model\n    freelancerChatQuestionRequest: $freelancerChatQuestionRequest\n  ) {\n    questionId\n    threadId\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.FreelancerChatAskQuestion = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'FreelancerChatAskQuestion')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'FreelancerChatAskQuestionInChat'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatQuestionRequest'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'FreelancerChatQuestionRequest'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatAskQuestionInThread'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'freelancerChatQuestionRequest'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'freelancerChatQuestionRequest'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'questionId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 295
        }
      };
      n.loc.source = {
        body: 'mutation FreelancerChatAskQuestionInChat(\n  $freelancerChatQuestionRequest: FreelancerChatQuestionRequest!\n  $threadId: ID!\n) {\n  freelancerChatAskQuestionInThread(\n    threadId: $threadId\n    freelancerChatQuestionRequest: $freelancerChatQuestionRequest\n  ) {\n    questionId\n    threadId\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.FreelancerChatAskQuestionInChat = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'FreelancerChatAskQuestionInChat')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'GetChatConversation'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatConversation'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'conversation'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'question'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'answer'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'id'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'createdAt'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'thumbs'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'attachedFiles'
                              },
                              arguments: [],
                              directives: [],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'id'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'name'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'type'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'size'
                                    },
                                    arguments: [],
                                    directives: []
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 273
        }
      };
      n.loc.source = {
        body: 'query GetChatConversation($threadId: ID!) {\n  freelancerChatConversation(threadId: $threadId) {\n    conversation {\n      question\n      answer\n      id\n      createdAt\n      thumbs\n      attachedFiles {\n        id\n        name\n        type\n        size\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.GetChatConversation = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'GetChatConversation')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'GetFreelancerChatAnswer'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'questionId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatAnswer'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'questionId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'questionId'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'answer'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'finished'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'error'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'attachedFiles'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'id'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'name'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'type'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'size'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 221
        }
      };
      n.loc.source = {
        body: 'query GetFreelancerChatAnswer($questionId: ID!) {\n  freelancerChatAnswer(questionId: $questionId) {\n    answer\n    finished\n    threadId\n    error\n    attachedFiles {\n      id\n      name\n      type\n      size\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.GetFreelancerChatAnswer = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'GetFreelancerChatAnswer')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatUsageStats'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'usagePercentage'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'remainingMessages'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'nextReset'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 99
        }
      };
      n.loc.source = {
        body: 'query {\n  freelancerChatUsageStats {\n    usagePercentage\n    remainingMessages\n    nextReset\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'freelancerChatProfilePrompts'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'model'
                  }
                },
                type: {
                  kind: 'NamedType',
                  name: {
                    kind: 'Name',
                    value: 'String'
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatProfilePrompts'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'model'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'model'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'prompts'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'prompt'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 140
        }
      };
      n.loc.source = {
        body: 'query freelancerChatProfilePrompts($model: String) {\n  freelancerChatProfilePrompts(model: $model) {\n    prompts {\n      prompt\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.freelancerChatProfilePrompts = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'freelancerChatProfilePrompts')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'FreelancerChatDeleteThread'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatDeleteThread'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'completed'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 126
        }
      };
      n.loc.source = {
        body: 'mutation FreelancerChatDeleteThread($threadId: ID!) {\n  freelancerChatDeleteThread(threadId: $threadId) {\n    completed\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.FreelancerChatDeleteThread = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'FreelancerChatDeleteThread')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'FreelancerChatRenameThread'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatRenameThreadRequest'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'FreelancerChatRenameThreadRequest'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatRenameThread'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'freelancerChatRenameThreadRequest'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'freelancerChatRenameThreadRequest'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'title'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 294
        }
      };
      n.loc.source = {
        body: 'mutation FreelancerChatRenameThread(\n  $threadId: ID!\n  $freelancerChatRenameThreadRequest: FreelancerChatRenameThreadRequest!\n) {\n  freelancerChatRenameThread(\n    threadId: $threadId\n    freelancerChatRenameThreadRequest: $freelancerChatRenameThreadRequest\n  ) {\n    title\n    threadId\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.FreelancerChatRenameThread = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'FreelancerChatRenameThread')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'FreelancerChatRateAnswer'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'questionId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatAnswerThumbsRequest'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'FreelancerChatAnswerThumbsRequest'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'freelancerChatRateAnswer'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'questionId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'questionId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'freelancerChatAnswerThumbsRequest'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'freelancerChatAnswerThumbsRequest'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'completed'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 287
        }
      };
      n.loc.source = {
        body: 'mutation FreelancerChatRateAnswer(\n  $questionId: ID!\n  $freelancerChatAnswerThumbsRequest: FreelancerChatAnswerThumbsRequest!\n) {\n  freelancerChatRateAnswer(\n    questionId: $questionId\n    freelancerChatAnswerThumbsRequest: $freelancerChatAnswerThumbsRequest\n  ) {\n    completed\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.FreelancerChatRateAnswer = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'FreelancerChatRateAnswer')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'CreateMessageRating'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'messageId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'request'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'UsiMessageRatingRequest'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiCreateMessageRating'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'messageId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'messageId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'request'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'request'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'ratingId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'type'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'feedback'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 251
        }
      };
      n.loc.source = {
        body: 'mutation CreateMessageRating(\n  $threadId: ID!\n  $messageId: ID!\n  $request: UsiMessageRatingRequest!\n) {\n  usiCreateMessageRating(\n    threadId: $threadId\n    messageId: $messageId\n    request: $request\n  ) {\n    ratingId\n    type\n    feedback\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.CreateMessageRating = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'CreateMessageRating')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'CreateThread'
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiCreateThread'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'request'
                      },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: {
                              kind: 'Name',
                              value: 'application'
                            },
                            value: {
                              kind: 'StringValue',
                              value: 'INNOVA',
                              block: !1
                            }
                          }
                        ]
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'title'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'createdDateTime'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'lastMessageDateTime'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'application'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 169
        }
      };
      n.loc.source = {
        body: 'mutation CreateThread {\n  usiCreateThread(request: { application: "INNOVA" }) {\n    threadId\n    title\n    createdDateTime\n    lastMessageDateTime\n    application\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.CreateThread = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'CreateThread')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiGetThreads'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'userId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'organizationId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'createdDateTime'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'lastMessageDateTime'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'title'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'application'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 145
        }
      };
      n.loc.source = {
        body: 'query {\n  usiGetThreads {\n    threadId\n    userId\n    organizationId\n    createdDateTime\n    lastMessageDateTime\n    title\n    application\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'getThreadMessages'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiGetMessagesByThreadId'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'filter'
                      },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: {
                              kind: 'Name',
                              value: 'orderBy'
                            },
                            value: {
                              kind: 'EnumValue',
                              value: 'CREATED_DATE_TIME_ASC'
                            }
                          }
                        ]
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'turns'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'status'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'turn'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'messages'
                              },
                              arguments: [],
                              directives: [],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'messageId'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'content'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'format'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'threadId'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'action'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'createdDateTime'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'role'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'status'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'intent'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'sequence'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'turn'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'rating'
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'ratingId'
                                          },
                                          arguments: [],
                                          directives: []
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'type'
                                          },
                                          arguments: [],
                                          directives: []
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'feedback'
                                          },
                                          arguments: [],
                                          directives: []
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 491
        }
      };
      n.loc.source = {
        body: 'query getThreadMessages($threadId: ID!) {\n  usiGetMessagesByThreadId(\n    threadId: $threadId\n    filter: { orderBy: CREATED_DATE_TIME_ASC }\n  ) {\n    threadId\n    turns {\n      status\n      turn\n      messages {\n        messageId\n        content\n        format\n        threadId\n        action\n        createdDateTime\n        role\n        status\n        intent\n        sequence\n        turn\n        rating {\n          ratingId\n          type\n          feedback\n        }\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.getThreadMessages = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'getThreadMessages')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'createMessagesInThread'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'messages'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'ListType',
                    type: {
                      kind: 'NonNullType',
                      type: {
                        kind: 'NamedType',
                        name: {
                          kind: 'Name',
                          value: 'UsiNewMessage'
                        }
                      }
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiCreateMessagesByThreadId'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'request'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'messages'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'nextTurn'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'messages'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'messageId'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'content'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'format'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'threadId'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'action'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'createdDateTime'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'role'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'status'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'intent'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'sequence'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'turn'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 349
        }
      };
      n.loc.source = {
        body: 'mutation createMessagesInThread($threadId: ID!, $messages: [UsiNewMessage!]!) {\n  usiCreateMessagesByThreadId(threadId: $threadId, request: $messages) {\n    nextTurn\n    messages {\n      messageId\n      content\n      format\n      threadId\n      action\n      createdDateTime\n      role\n      status\n      intent\n      sequence\n      turn\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.createMessagesInThread = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'createMessagesInThread')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'GetMessages'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'turnId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'String'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'subscribedEvents'
                  }
                },
                type: {
                  kind: 'ListType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'String'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiGetMessagesByThreadId'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'filter'
                      },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: {
                              kind: 'Name',
                              value: 'turn'
                            },
                            value: {
                              kind: 'Variable',
                              name: {
                                kind: 'Name',
                                value: 'turnId'
                              }
                            }
                          },
                          {
                            kind: 'ObjectField',
                            name: {
                              kind: 'Name',
                              value: 'keepInternalActions'
                            },
                            value: {
                              kind: 'Variable',
                              name: {
                                kind: 'Name',
                                value: 'subscribedEvents'
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'turns'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'status'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'turn'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'messages'
                              },
                              arguments: [],
                              directives: [],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'messageId'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'format'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'action'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'role'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'content'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'status'
                                    },
                                    arguments: [],
                                    directives: []
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'rating'
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'ratingId'
                                          },
                                          arguments: [],
                                          directives: []
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'type'
                                          },
                                          arguments: [],
                                          directives: []
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'feedback'
                                          },
                                          arguments: [],
                                          directives: []
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 462
        }
      };
      n.loc.source = {
        body: 'query GetMessages(\n  $threadId: ID!\n  $turnId: String!\n  $subscribedEvents: [String]\n) {\n  usiGetMessagesByThreadId(\n    threadId: $threadId\n    filter: { turn: $turnId, keepInternalActions: $subscribedEvents }\n  ) {\n    turns {\n      status\n      turn\n      messages {\n        messageId\n        format\n        action\n        role\n        content\n        status\n        rating {\n          ratingId\n          type\n          feedback\n        }\n      }\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.GetMessages = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'GetMessages')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'GetMessage'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'messageId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'sinceChars'
                  }
                },
                type: {
                  kind: 'NamedType',
                  name: {
                    kind: 'Name',
                    value: 'Int'
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiGetMessageByMessageId'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'messageId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'messageId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'filter'
                      },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: {
                              kind: 'Name',
                              value: 'sinceChars'
                            },
                            value: {
                              kind: 'Variable',
                              name: {
                                kind: 'Name',
                                value: 'sinceChars'
                              }
                            }
                          }
                        ]
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'messageId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'format'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'action'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'role'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'content'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'status'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 268
        }
      };
      n.loc.source = {
        body: 'query GetMessage($threadId: ID!, $messageId: ID!, $sinceChars: Int) {\n  usiGetMessageByMessageId(\n    threadId: $threadId\n    messageId: $messageId\n    filter: { sinceChars: $sinceChars }\n  ) {\n    messageId\n    format\n    action\n    role\n    content\n    status\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.GetMessage = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'GetMessage')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'updateThreadTitle'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              },
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'title'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'String'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiUpdateThreadTitle'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    },
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'title'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'title'
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'title'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'createdDateTime'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'lastMessageDateTime'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'application'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 212
        }
      };
      n.loc.source = {
        body: 'mutation updateThreadTitle($threadId: ID!, $title: String!) {\n  usiUpdateThreadTitle(threadId: $threadId, title: $title) {\n    threadId\n    title\n    createdDateTime\n    lastMessageDateTime\n    application\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.updateThreadTitle = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'updateThreadTitle')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: {
              kind: 'Name',
              value: 'deleteThread'
            },
            variableDefinitions: [
              {
                kind: 'VariableDefinition',
                variable: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'threadId'
                  }
                },
                type: {
                  kind: 'NonNullType',
                  type: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ID'
                    }
                  }
                },
                directives: []
              }
            ],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usiDeleteThread'
                  },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: {
                        kind: 'Name',
                        value: 'threadId'
                      },
                      value: {
                        kind: 'Variable',
                        name: {
                          kind: 'Name',
                          value: 'threadId'
                        }
                      }
                    }
                  ],
                  directives: []
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 81
        }
      };
      n.loc.source = {
        body: 'mutation deleteThread($threadId: ID!) {\n  usiDeleteThread(threadId: $threadId)\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.deleteThread = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'deleteThread')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'usageStats'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'usagePercentage'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'nextResetDate'
                        },
                        arguments: [],
                        directives: []
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'allocatedBudget'
                        },
                        arguments: [],
                        directives: []
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 87
        }
      };
      n.loc.source = {
        body: 'query {\n  usageStats {\n    usagePercentage\n    nextResetDate\n    allocatedBudget\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
              kind: 'Name',
              value: 'getApplicationsAccess'
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'completionAIGetApplicationsAccess'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'applications'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'application'
                              },
                              arguments: [],
                              directives: []
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'accessGranted'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 137
        }
      };
      n.loc.source = {
        body: 'query getApplicationsAccess {\n  completionAIGetApplicationsAccess {\n    applications {\n      application\n      accessGranted\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      function c(e, t) {
        for (var i = 0; i < e.definitions.length; i++) {
          var element = e.definitions[i];
          if (element.name && element.name.value == t) return element
        }
      }
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n,
      e.exports.getApplicationsAccess = function (e, t) {
        var n = {
          kind: e.kind,
          definitions: [
            c(e, t)
          ]
        };
        e.hasOwnProperty('loc') &&
        (n.loc = e.loc);
        var r = o[t] ||
        new Set,
        l = new Set,
        d = new Set;
        for (r.forEach((function (e) {
          d.add(e)
        })); d.size > 0; ) {
          var m = d;
          d = new Set,
          m.forEach(
            (
              function (e) {
                l.has(e) ||
                (l.add(e), (o[e] || new Set).forEach((function (e) {
                  d.add(e)
                })))
              }
            )
          )
        }
        return l.forEach((function (t) {
          var r = c(e, t);
          r &&
          n.definitions.push(r)
        })),
        n
      }(n, 'getApplicationsAccess')
    },
    function (e, t) {
      var n = {
        kind: 'Document',
        definitions: [
          {
            kind: 'OperationDefinition',
            operation: 'query',
            variableDefinitions: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'user'
                  },
                  arguments: [],
                  directives: [],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'subscriptionPlan'
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'id'
                              },
                              arguments: [],
                              directives: []
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        loc: {
          start: 0,
          end: 61
        }
      };
      n.loc.source = {
        body: 'query {\n  user {\n    subscriptionPlan {\n      id\n    }\n  }\n}\n',
        name: 'GraphQL request',
        locationOffset: {
          line: 1,
          column: 1
        }
      };
      function r(e, t) {
        if ('FragmentSpread' === e.kind) t.add(e.name.value);
         else if ('VariableDefinition' === e.kind) {
          var n = e.type;
          'NamedType' === n.kind &&
          t.add(n.name.value)
        }
        e.selectionSet &&
        e.selectionSet.selections.forEach((function (e) {
          r(e, t)
        })),
        e.variableDefinitions &&
        e.variableDefinitions.forEach((function (e) {
          r(e, t)
        })),
        e.definitions &&
        e.definitions.forEach((function (e) {
          r(e, t)
        }))
      }
      var o = {};
      n.definitions.forEach(
        (
          function (e) {
            if (e.name) {
              var t = new Set;
              r(e, t),
              o[e.name.value] = t
            }
          }
        )
      ),
      e.exports = n
    },
    function (e, t, n) {
      'use strict';
      (
        function (t) {
          e.exports = function (e, n) {
            n ||
            (n = [
              t.stdout,
              t.stderr
            ]);
            var r = 0;
            function o() {
              r === n.length &&
              t.exit(e)
            }
            n.forEach(
              (
                function (e) {
                  0 === e.bufferSize ? r++ : e.write('', 'utf-8', (function () {
                    r++,
                    o()
                  })),
                  e.write = function () {
                  }
                }
              )
            ),
            o(),
            t.on('exit', (function () {
              t.exit(e)
            }))
          }
        }
      ).call(this, n(22))
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          n.d(t, 'a', (function () {
            return r
          }));
          class r {
            constructor() {
              let {
                stream: e,
                appType: t
              }
              = arguments.length > 0 &&
              void 0 !== arguments[0] ? arguments[0] : {
              }
            }
            log(e) {
              const t = {
                ...e
              };
              if ( - 1 !== ['fatal',
              'error',
              'warn',
              'log'].indexOf(e.type)) {
                if (e.args.length > 0) if (
                  t.level_name = e.type,
                  t['@timestamp'] ||
                  (t['@timestamp'] = e.date),
                  Number.isInteger(e.level) &&
                  (t.level_value = e.level),
                  t.level = e.type,
                  t.type = this.appType,
                  'string' == typeof e.args[0]
                ) t.message = e.args.shift();
                 else if (e.args[0] instanceof Error) {
                  const n = e.args.shift();
                  t.message = n.message,
                  t.trace = n.stack,
                  void 0 !== n.nuxtErrorCode &&
                  (t.nuxtErrorCode = n.nuxtErrorCode),
                  t.trace = n.stack
                }
                try {
                  t.args = JSON.stringify(t.args)
                } catch (e) {
                  delete t.args
                }
                try {
                  this.stream.write(''.concat(JSON.stringify(t), '\n'))
                } catch (e) {
                }
              }
            }
          }
        }
      ).call(this, n(22))
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          var r = n(56),
          o = n(144),
          c = (n(133), n(15));
          function l(e, t, n, r) {
            let d = arguments.length > 4 &&
            void 0 !== arguments[4] &&
            arguments[4],
            m = arguments.length > 5 &&
            void 0 !== arguments[5] ? arguments[5] : 3;
            if (m <= 0) return Promise.reject(
              d ? c.a : new Error('AUTH_MIDDLEWARE_ERROR: Maximum retry attempts reached')
            );
            const h = o.a;
            return h.getRequestCallback(e, n, r).then((e => e(t, n))).then((o => 401 === o.status ? (h.clearCache(e, n), l(e, t, n, r, !0, --m)) : o)).catch(
              (
                e => e === c.a ? Promise.reject(e) : Promise.reject(
                  new Error(
                    'AUTH_MIDDLEWARE_ERROR: '.concat(e.message || 'Failed to process subordinate token request')
                  )
                )
              )
            )
          }
          t.a = function (e) {
            let t = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : {
            };
            return n => (o, d) => (
              d.ssrContext = t.ssrContext,
              l(e, o, d, n).catch(
                (
                  e => {
                    if (c.a === e) if ('function' == typeof t.onUnauthorized) t.onUnauthorized();
                     else if (!1 !== t.redirToLogin) {
                      void 0 !== d.$logger &&
                      d.$logger.log('unauthenticated, redirecting to login');
                      const e = new URL(document.location.href);
                      document.location.href = ''.concat(r.a, '?redir=').concat(encodeURIComponent(e.pathname + e.search + e.hash))
                    }
                    return Promise.reject(e)
                  }
                )
              )
            )
          }
        }
      ).call(this, n(22))
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          var r = n(134),
          o = n(15),
          c = n(33),
          l = n(80),
          d = n.n(l),
          m = n(135);
          const h = 'cleared',
          f = '/api/v3/oauth2/token/subordinate-ssr';
          async function v(t) {
            let n = arguments.length > 1 &&
            void 0 !== arguments[1] ? arguments[1] : 3;
            const c = t.ssrContext;
            c.subordinateTokenRequest ||
            (
              c.subordinateTokenRequest = function (t) {
                return new Promise(
                  (
                    (n, c) => {
                      t.wretch().errorType('text').url(
                        function (t) {
                          let n = Object(r.a) (t.req);
                          if (!n) throw new Error('Can not get baseUrl from request object');
                          'true' === e.env.NUXT_HTTPS &&
                          (n = n.replace('http://', 'https://'));
                          return new URL(f, n).href
                        }(t)
                      ).headers({
                        Accept: 'application/json'
                      }).post({
                        clientId: e.env.CLIENT_ID,
                        clientSecret: e.env.CLIENT_SECRET,
                        accessToken: t.masterAccessToken
                      }).text(
                        (
                          text => {
                            try {
                              const data = text ? JSON.parse(text) : {
                              };
                              return data.accessToken ? n(data) : c(
                                new Error('No accessToken provided in Subordinate SSR response.')
                              )
                            } catch (e) {
                              return c(
                                new Error(
                                  'Failed to parse response as JSON. Response text: '.concat(text)
                                )
                              )
                            }
                          }
                        )
                      ).catch(
                        (
                          e => (
                            e !== o.a &&
                            (
                              void 0 !== t.$logger ? t.$logger.log('Subordinate request error: ' + JSON.stringify(e)) : console.log(e)
                            ),
                            c(401 === (e || {
                            }).status ? o.a : o.b)
                          )
                        )
                      )
                    }
                  )
                )
              }(t),
              c.subordinateTokenRequest.then(
                (
                  e => {
                    c.subordinateToken = e.accessToken,
                    function (e, t) {
                      e.cookies.set(
                        y(e),
                        t.accessToken,
                        {
                          maxAge: t.expiresIn / 1000,
                          path: e.ssrContext.app.router.options.base,
                          httpOnly: !0
                        }
                      )
                    }(t, e)
                  }
                )
              ).finally((() => {
                delete c.subordinateTokenRequest
              }))
            );
            try {
              return (await c.subordinateTokenRequest).accessToken
            } catch (e) {
              if (o.b === e && n > 0) return v(t, --n);
              throw e
            }
          }
          function y(t) {
            return ''.concat(t.cookiePrefix).concat(
              (
                Object(m.str) (
                  ''.concat(t.masterAccessToken.slice( - 8)).concat(e.env.CLIENT_ID)
                ) >>> 0
              ).toString(16),
              'sb'
            )
          }
          t.a = {
            async getRequestCallback(t, n, r) {
              if (
                n.masterAccessToken = function (e) {
                  if (!e.cookies || 'object' != typeof e.cookies) throw new Error('Can not get cookies object from the request data');
                  const t = e.cookies.get(''.concat(e.cookiePrefix, 'master_access_token'));
                  if (t) {
                    const e = t.split('.');
                    if (e.length > 0) return e[1]
                  }
                  return null
                }(n),
                !n.masterAccessToken
              ) throw o.a;
              if (!e.env.CLIENT_ID || !e.env.CLIENT_SECRET) throw new Error('Can not get client credentials');
              let l = function (e) {
                if (h === e.ssrContext.subordinateToken) return null;
                return e.ssrContext.subordinateToken ||
                e.cookies.get(y(e))
              }(n);
              return l ||
              (l = await v(n)),
              function (t, n) {
                var r,
                o,
                l;
                const m = 'authSubordinateToken',
                h = t.ssrContext;
                if (!h.app || !h.req) throw new Error(
                  'Invalid ssrContext parameter has been provided to subordinate middleware'
                );
                const f = h.req.headers ||
                {
                };
                if (
                  'document' !== f['sec-fetch-dest'] ||
                  'navigate' !== f['sec-fetch-mode']
                ) return;
                if (
                  null !== (r = h.app.head) &&
                  void 0 !== r &&
                  null !== (r = r.__dangerouslyDisableSanitizersByTagID) &&
                  void 0 !== r &&
                  r[m]
                ) return;
                const v = e.env.subordinateTokenCarierScript.replace(
                  'clientConf={}',
                  'clientConf='.concat(JSON.stringify({
                    id: e.env.CLIENT_ID,
                    token: d() (n)
                  }))
                );
                if (e.env.isNuxt3) {
                  if (
                    h.subordinateTokenScripts ||
                    (h.subordinateTokenScripts = {}),
                    h.subordinateTokenScripts[m]
                  ) return;
                  return h.subordinateTokenScripts[m] = !0,
                  void h.runWithContext(
                    (
                      () => {
                        useHead({
                          script: [
                            {
                              'data-hid': m,
                              innerHTML: v
                            },
                            {
                              'data-hid': c.a,
                              innerHTML: 'document.querySelector(\'[data-hid="'.concat(m, '"]\').remove()')
                            }
                          ]
                        })
                      }
                    )
                  )
                }
                const script = (null === (o = h.app.head) || void 0 === o ? void 0 : o.script) ||
                [];
                script.unshift({
                  hid: c.a,
                  innerHTML: 'document.querySelector(\'[data-hid="'.concat(m, '"]\').remove()')
                }),
                script.unshift({
                  hid: m,
                  innerHTML: v
                }),
                h.app.head.script = script,
                Object.assign(
                  h.app.head,
                  {
                    script: script,
                    __dangerouslyDisableSanitizersByTagID: {
                      [
                        m
                      ]: [
                        'innerHTML'
                      ],
                      [
                        c.a
                      ]: [
                        'innerHTML'
                      ],
                      ...null === (l = h.app.head) ||
                      void 0 === l ? void 0 : l.__dangerouslyDisableSanitizersByTagID
                    }
                  }
                )
              }(n, l),
              function (e, t) {
                return function (n) {
                  let r = arguments.length > 1 &&
                  void 0 !== arguments[1] ? arguments[1] : {
                  };
                  return r.headers = {
                    ...r.headers,
                    Authorization: 'bearer '.concat(e)
                  },
                  t(n, {
                    credentials: 'same-origin',
                    ...r
                  })
                }
              }(l, r)
            },
            clearCache(e, t) {
              t.ssrContext.subordinateToken = h
            }
          }
        }
      ).call(this, n(22))
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          function r(t) {
            let n = '';
            if (t) if (e.env.NUXT_API_BASE_URL) n = e.env.NUXT_API_BASE_URL;
             else if (t.headers['x-forwarded-host']) n = ''.concat(t.headers['x-forwarded-proto'], '://').concat(t.headers['x-forwarded-host']);
             else {
              const r = /localhost|\d+\.\d+\.\d+\.\d+/.test(t.headers.host);
              n = ''.concat(r && 'true' !== e.env.NUXT_HTTPS ? 'http' : 'https', '://').concat(t.headers.host)
            }
            return n
          }
          n.d(t, 'a', (function () {
            return r
          }))
        }
      ).call(this, n(22))
    },
    function (e, t, n) {
      var r;
      r = function (e) {
        e.version = '1.2.2';
        var t = function () {
          for (var e = 0, table = new Array(256), t = 0; 256 != t; ++t) e = 1 & (
            e = 1 & (
              e = 1 & (
                e = 1 & (
                  e = 1 & (
                    e = 1 & (
                      e = 1 & (e = 1 & (e = t) ? - 306674912 ^ e >>> 1 : e >>> 1) ? - 306674912 ^ e >>> 1 : e >>> 1
                    ) ? - 306674912 ^ e >>> 1 : e >>> 1
                  ) ? - 306674912 ^ e >>> 1 : e >>> 1
                ) ? - 306674912 ^ e >>> 1 : e >>> 1
              ) ? - 306674912 ^ e >>> 1 : e >>> 1
            ) ? - 306674912 ^ e >>> 1 : e >>> 1
          ) ? - 306674912 ^ e >>> 1 : e >>> 1,
          table[t] = e;
          return 'undefined' != typeof Int32Array ? new Int32Array(table) : table
        }(),
        n = function (e) {
          var t = 0,
          n = 0,
          r = 0,
          table = 'undefined' != typeof Int32Array ? new Int32Array(4096) : new Array(4096);
          for (r = 0; 256 != r; ++r) table[r] = e[r];
          for (r = 0; 256 != r; ++r) for (n = e[r], t = 256 + r; t < 4096; t += 256) n = table[t] = n >>> 8 ^ e[255 & n];
          var o = [];
          for (r = 1; 16 != r; ++r) o[r - 1] = 'undefined' != typeof Int32Array ? table.subarray(256 * r, 256 * r + 256) : table.slice(256 * r, 256 * r + 256);
          return o
        }(t),
        r = n[0],
        o = n[1],
        c = n[2],
        l = n[3],
        d = n[4],
        m = n[5],
        h = n[6],
        f = n[7],
        v = n[8],
        y = n[9],
        w = n[10],
        k = n[11],
        S = n[12],
        T = n[13],
        E = n[14];
        e.table = t,
        e.bstr = function (e, n) {
          for (var r = - 1 ^ n, i = 0, o = e.length; i < o; ) r = r >>> 8 ^ t[255 & (r ^ e.charCodeAt(i++))];
          return ~r
        },
        e.buf = function (e, n) {
          for (var I = - 1 ^ n, _ = e.length - 15, i = 0; i < _; ) I = E[e[i++] ^ 255 & I] ^ T[e[i++] ^ I >> 8 & 255] ^ S[e[i++] ^ I >> 16 & 255] ^ k[e[i++] ^ I >>> 24] ^ w[e[i++]] ^ y[e[i++]] ^ v[e[i++]] ^ f[e[i++]] ^ h[e[i++]] ^ m[e[i++]] ^ d[e[i++]] ^ l[e[i++]] ^ c[e[i++]] ^ o[e[i++]] ^ r[e[i++]] ^ t[e[i++]];
          for (_ += 15; i < _; ) I = I >>> 8 ^ t[255 & (I ^ e[i++])];
          return ~I
        },
        e.str = function (e, n) {
          for (var r = - 1 ^ n, i = 0, o = e.length, c = 0, l = 0; i < o; ) (c = e.charCodeAt(i++)) < 128 ? r = r >>> 8 ^ t[255 & (r ^ c)] : c < 2048 ? r = (r = r >>> 8 ^ t[255 & (r ^ (192 | c >> 6 & 31))]) >>> 8 ^ t[255 & (r ^ (128 | 63 & c))] : c >= 55296 &&
          c < 57344 ? (
            c = 64 + (1023 & c),
            l = 1023 & e.charCodeAt(i++),
            r = (
              r = (
                r = (r = r >>> 8 ^ t[255 & (r ^ (240 | c >> 8 & 7))]) >>> 8 ^ t[255 & (r ^ (128 | c >> 2 & 63))]
              ) >>> 8 ^ t[255 & (r ^ (128 | l >> 6 & 15 | (3 & c) << 4))]
            ) >>> 8 ^ t[255 & (r ^ (128 | 63 & l))]
          ) : r = (
            r = (r = r >>> 8 ^ t[255 & (r ^ (224 | c >> 12 & 15))]) >>> 8 ^ t[255 & (r ^ (128 | c >> 6 & 63))]
          ) >>> 8 ^ t[255 & (r ^ (128 | 63 & c))];
          return ~r
        }
      },
      'undefined' == typeof DO_NOT_EXPORT_CRC ? r(t) : r({
      })
    },
    function (e, t, n) {
      'use strict';
      (
        function (e) {
          function r() {
            return fetch
          }
          n.d(t, 'a', (function () {
            return r
          }))
        }
      ).call(this, n(22))
    },
    function (e) {
      e.exports = JSON.parse('{}')
    },
    function (e) {
      e.exports = JSON.parse(
        '{"nsc_alert_api_error_msg":{"nsc_error_trace_id":": error [{traceId}]","nsc_contact_support_text":"Please contact customer support for assistance: <a href=\'https://support.upwork.com\' target=\'_blank\'>support.upwork.com</a>","nsc_default":"There was an error loading this page{traceIdMsg}. @:nsc_alert_api_error_msg.nsc_contact_support_text","nsc_with_error":"There was an error {errorActionMsg}{traceIdMsg}. @:nsc_alert_api_error_msg.nsc_contact_support_text"}}'
      )
    },
    function (e) {
      e.exports = JSON.parse('{}')
    },
    function (e) {
      e.exports = JSON.parse(
        '{"flgai_beta":"BETA","flgai_chatPro":{"title":"Chat Pro | Upwork","newChat":"New chat","previous30Days":"Previous 30 days","sendMessage":"Message Upwork Chat Pro","options":"Options","startNewChat":"Start new chat","privacyNotice":"Please note that you are responsible for ensuring that all tools you use in your work, including AI tools, are appropriate for your contract and are not restricted by your client. You are also responsible for ensuring that all content you post on Upwork or provide to your client is accurate and original. All content and messages are subject to Upwork\'s {termsOfService} and {privacyPolicy}.","howItWorks":"How it works","learnMore":"Learn more","viewLess":"View less","openAIHowItWorksLong":"Powered by Uma, Upwork’s Mindful AI, with {model}. We will share the information you provide in this chat with OpenAI to answer your questions. Your use of this feature will be subject to OpenAI\'s {openAIUsagePolicy} and {openAIPrivacyPolicy}. {viewLess}","openAIHowItWorksShort":"Powered by Uma, Upwork’s Mindful AI, with {model}. {howItWorks}","genericErrorWarning":"Sorry, something went wrong on our end. Please refresh the page or try again later.","profilePhoto":"Profile photo","partialUsageReachedLimitWarning":"You’ve used {usagePercentage}% of your messaging limit for this 30-day period. It resets in {daysToReset} days on {resetDate}.","remainingMessagesWarning":"You have {remainingMessages} {message} left for this 30-day period. Your messaging limit resets in {daysToReset} days on {resetDate}.","message":"message | messages","usageReachedLimitWarning":"You\'ve hit your messaging limit for this 30-day period. It resets in {daysToReset} days on {resetDate}.","answerTokenLimitExceeded":"This response may have been cut short. Try asking Upwork Chat Pro to continue where it left off.","deleteChat":"Delete chat","deleteChatQuestion":"Delete chat?","deleteChatPrompt":"This will delete all of your prompts and responses within this chat.","renameThisChat":"Rename this chat","renameThisChatEdit":"Rename this chat edit","renameChat":"Rename chat","renameChatErrorPrompt":"Add a name for this chat.","scrollChatBottom":"Scroll Down to new message","hi":"Hi {name}. 👋 ","welcomeTextLong":"I’m here to help you brainstorm ideas, draft content, debug code, and more. Here are a few things to know.","next":"Next","back":"Back","confirm":"Get started","confirmTitle":"Great! Here are a few things to know.","confirmEntries":[{"key":"Check in with your clients","value":"Make sure all of the tools you use in your work, including AI tools, are appropriate for your contract and are not restricted by your client."},{"key":"Ensure accuracy","value":"Check that any content you post on Upwork or provide to your client is accurate and original."},{"key":"Understand data sharing","value":"Your information will be shared with OpenAI to optimize your experience. All content and messages are subject to Upwork\'s {0} and {1}."},{"key":"Understand data sharing","value":"All content and messages are subject to Upwork\'s {0} and {1}."}],"copy":"Copy","goodResponse":"Good response","badResponse":"Bad response","poorResponse":"Poor response","thanksForYourFeedback":"Thanks for your feedback.","longTapToActivateOptions":"Long tap to activate options","send":"Send","stopGeneratingAnswer":"Stop generating answer","attachFile":"attach File","learnMoreInNewTab":"Learn more Opens in new tab","removeAttachment":"Remove attachment","filesUploaded":"{n} file uploaded | {n} files uploaded"},"flgai_uma":{"title":"Uma | Upwork","welcomeToUma":"Welcome to Uma,","hereAreAFewThingsToKnow":"Here are a few things to know.","askAnything":"Ask anything...","howItWorks":"Uma is Upwork\'s Mindful AI. You\'re responsible for your content and work, so be sure to check all responses.","howItWorksTooltip":"We\'ll share the information you provide in this chat with OpenAI to answer your questions. Your use of this feature will be subject to OpenAI\'s {openAIUsagePolicy} and {openAIPrivacyPolicy}.","howItWorksTooltipUpwork":"Your use of this feature will be subject to Upwork\'s {userAgreement} and {privacyPolicy}.","untitledChat":"Untitled chat","mobileTitle":"Uma"},"flgai_back":"Back","flgai_copyCode":"Copy code","flgai_copied":"Copied","flgai_error":"Error","flgai_cancel":"Cancel","flgai_delete":"Delete","flgai_rename":"Rename","flgai_edit":"Edit","flgai_welcome_name":"Hi {name}","flgai_welcome_back":"Welcome back","flgai_welcome_text_uma":"I\'m Uma, Upwork\'s Mindful AI.","flgai_welcome_text":"Let’s get to work. How can I help you today?","flgai_welcome_text_pw":"Uma can help you work on a project, write proposals, and more.","flgai_helpMe":"Help me","flgai_helpMeThreeDots":"Help me...","flgai_initialPrompts":["... brainstorm ideas for my new project","... write or debug code","... create a rough draft for some content","... research a topic for my project","... check my writing for grammar and spelling mistakes"],"flgai_onlyFreelancers":"Sorry, this page is only for freelancers","flgai_sign_up_as_talent":"Sign up as talent","flgai_close":"Close","flgai_termsOfService":"Terms of Service","flgai_userAgreement":"User Agreement","flgai_privacyPolicy":"Privacy Policy","flgai_usagePolicy":"Usage Policy","flgai_sorryOnlyFreelancers":"Sorry, this page is only for freelancers","flgai_toContinueSignUp":"To continue, you’ll need to sign up for a freelancer account.","flgai_signUpAsFreelancer":"Sign up as freelancer","flgai_goBackHome":"Go back home","flgai_freelancer":"Freelancer","flgai_files":"{n} file | {n} files","flgai_version":"Version","flgai_accessibleUntilNextReset":"Use it again on {date}","flgai_modelToggle":{"4_o":{"title":"More powerful (GPT-4o)","name":"GPT-4o","label":"Solve problems with greater accuracy, plus advanced features like file upload."},"4_0":{"title":"More powerful (GPT-4)","name":"GPT-4","label":"Solve problems with greater accuracy, plus advanced features like file upload."},"3_5":{"title":"Faster (GPT-3.5)","name":"GPT-3.5","label":"Get ideas and inspiration quickly."}},"flgai_remainingLimit":"You have {limit}% of your {model} usage left in this 30-day period. You’ll be switched to GPT-3.5 when it run out.","flgai_reachLimit":"You’ve reached your limit for using Upwork Chat Pro. You can start using it again on {date}.","flgai_switchLimit":{"text":"You’ve reached your limit for {model}. You can continue with GPT-3.5 {action}.","action":"in a new chat"},"flgai_gpt4":"GPT-4","flgai_gpt4o":"GPT-4o","flgai_gpt3.5":"GPT-3.5","flgai_fileUploadRetry":"Upload failed, click to retry","flgai_fileUploadRetryMobile":"Upload failed, tap to retry","flgai_fileUploading":"Uploading... ({uploaded}/{total})","flgai_fileUploadingSR":"File uploading","flgai_fileUploadedSR":"File uploaded","flgai_fileUploadTooltip":"Upload files (Max 10mb each)","flgai_fileUploadTooltipDisabledModel3_5":"Only available for GPT-4o","flgai_fileUploadTooltipDisabledNotNew":"Only available when you start a new chat","flgai_fileUploadTooLarge":"This file is too large. Choose one smaller than 10mb.","flgai_fileUploadTypeNotSupported":{"text":"This file type isn\'t supported. Use .doc, .pdf, .txt and {action}.","action":"other accepted types"},"flgai_loading1":"Analyzing files","flgai_loading2":"Working on your answer","flgai_loading3":"Just a few more moments","flgai_retryOnError":{"text":"It seems something went wrong. Please {action}","action":"try again."},"flgai_generatingAnswer":"New message loading","flgai_backToMyProposal":"Back to my proposal","flgai_youReachedWeeklyLimit":"You’ve reached your weekly limit","flgai_viewPlans":"View plans","flgai_upgradeToFlPlus":"Upgrade to Freelancer Plus","flgai_removeWeeklyLimitsUma":"Remove weekly limits on Uma","flgai_100ConnectsPerMonth":"100 Connects per month","flgai_viewCompetitorBids":"View competitor bids","flgai_youUsedHalfOfWeekly":"You\'ve used half of your weekly free access. It resets each Sunday.","flgai_upgradeNow":"Upgrade now","flgai_thumbsDownFeedback":{"tellUsMore":"Tell us more","optional":"(optional)","chooseAReason":"Choose a reason: ","notAccurate":"Not accurate","notUseful":"Not useful","harmful":"Harmful","slowOrNotLoading":"Slow or not loading","didntFollowMyInstructions":"Didn\'t follow my instructions","submit":"Submit","somethingElse":"Something else..."},"flgai_beta_tooltip":"Uma is new and still learning.","flgai_betaFeedback":{"text":"Try working with Uma and let us know what you think. {feedback}","link":"Share feedback"}}'
      )
    },
    ,
    function (e) {
      e.exports = JSON.parse('{"a":"2.19.0"}')
    },
    function (e, t, n) {
      'use strict';
      var r = n(0),
      o = n(1);
      const c = window.__NUXT__;
      function l() {
        if (!this._hydrated) return this.$fetch()
      }
      function d() {
        if (
          !(
            (e = this).$vnode &&
            e.$vnode.elm &&
            e.$vnode.elm.dataset &&
            e.$vnode.elm.dataset.fetchKey
          )
        ) return;
        var e;
        this._hydrated = !0,
        this._fetchKey = this.$vnode.elm.dataset.fetchKey;
        const data = c.fetch[this._fetchKey];
        if (data && data._error) this.$fetchState.error = data._error;
         else for (const e in data) r.default.set(this.$data, e, data[e])
      }
      function m() {
        return this._fetchPromise ||
        (
          this._fetchPromise = h.call(this).then((() => {
            delete this._fetchPromise
          }))
        ),
        this._fetchPromise
      }
      async function h() {
        this.$nuxt.nbFetching++,
        this.$fetchState.pending = !0,
        this.$fetchState.error = null,
        this._hydrated = !1;
        let e = null;
        const t = Date.now();
        try {
          await this.$options.fetch.call(this)
        } catch (t) {
          0,
          e = Object(o.p) (t)
        }
        const n = this._fetchDelay - (Date.now() - t);
        n > 0 &&
        await new Promise((e => setTimeout(e, n))),
        this.$fetchState.error = e,
        this.$fetchState.pending = !1,
        this.$fetchState.timestamp = Date.now(),
        this.$nextTick((() => this.$nuxt.nbFetching--))
      }
      t.a = {
        beforeCreate() {
          Object(o.l) (this) &&
          (
            this._fetchDelay = 'number' == typeof this.$options.fetchDelay ? this.$options.fetchDelay : 200,
            r.default.util.defineReactive(
              this,
              '$fetchState',
              {
                pending: !1,
                error: null,
                timestamp: Date.now()
              }
            ),
            this.$fetch = m.bind(this),
            Object(o.a) (this, 'created', d),
            Object(o.a) (this, 'beforeMount', l)
          )
        }
      }
    },
    function (e, t, n) {
      'use strict';
      var r = n(26);
      var o = class {
        constructor() {
          this.locks = {},
          this.retryCounter = {}
        }
        lock(e) {
          this.locks[e] = !0
        }
        release(e) {
          delete this.locks[e]
        }
        isLocked() {
          return 0 !== Object.keys(this.locks).length
        }
        retryAllowed(e) {
          let t = this.retryCounter[e] ||
          3;
          return t--,
          this.retryCounter[e] = t,
          t >= 0 ? Promise.resolve() : Promise.reject()
        }
      },
      c = n(56),
      l = '/ab/account-security/is-authenticated',
      d = {
        getValueFromNameSelector(e) {
          if ('undefined' == typeof document) return '';
          const t = document.cookie.match(new RegExp('(; *|^)' + e + '\\s*=\\s*([^;]*)'));
          return t &&
          3 === t.length ? t[2] : ''
        },
        getPrefix() {
          return this.nuxtPrefix() ||
          ''
        },
        nuxtPrefix() {
          if ('undefined' == typeof window) return !1;
          let e = window;
          return ['$nuxt',
          '$options',
          '$config',
          'cookiePrefix'].some((param => {
            if (e = e[param], !e) return !0
          })),
          e
        }
      };
      const m = 'XSRF-TOKEN',
      h = 'X-Odesk-Csrf-Token';
      class f {
        static extendHeaders(e) {
          return e[Object.keys(e).find((e => e === h.toLowerCase())) ||
          h] = f.getCookieValue(),
          e
        }
        static getCookieValue() {
          return d.getValueFromNameSelector(
            function () {
              const e = function () {
                const e = d.nuxtPrefix();
                if ('' === e) return m;
                return e ? e + m : void 0
              }();
              return e ? '(?:^| )' + e : m
            }()
          )
        }
      }
      var v = () => e => (t, n) => (
        f.getCookieValue() ? Promise.resolve() : fetch(
          '/ab/account-security/login?' + (new Date).getTime(),
          {
            credentials: 'same-origin',
            redirect: 'manual'
          }
        )
      ).catch((() => !0)).then((() => (f.extendHeaders(n.headers), e(t, n))));
      var y = function () {
        let e = arguments.length > 0 &&
        void 0 !== arguments[0] ? arguments[0] : [];
        return t => (n, r) => function o() {
          return f.extendHeaders(r.headers),
          t(n, r).catch((() => ({
            data: {
            }
          }))).then(
            (
              e => e.data ? e : function (e) {
                try {
                  return e.clone().json().catch((() => ({
                  }))).then((data => (e.data = data, e)))
                } catch (t) {
                  return ''.concat(t).includes('not valid JSON') &&
                  (e.data = {}),
                  e
                }
              }(e)
            )
          ).then(
            (
              t => e.reduce(
                (
                  (e, n) => e.then((() => Promise.resolve(n(t, r, o)).then((e => t = e || t))))
                ),
                Promise.resolve(t)
              )
            )
          )
        }()
      },
      w = () => (e, t, n) => e.ok ||
      t.retryCounter <= 0 ? (t.locked = !1, e) : (
        void 0 === t.retryCounter ? t.retryCounter = 2 : t.retryCounter--,
        t.locked = !0,
        n()
      ),
      k = n(15);
      const S = '_subordinate_oauth2_token_key',
      T = 3;
      var E = n(33);
      const {
        callbacks: I,
        errors: _
      }
      = function () {
        let e = {},
        t = {};
        if ('undefined' != typeof window) {
          if (
            window._authTokenExceptions = window._authTokenExceptions ||
            {
            },
            window._authRequestCallbacks = window._authRequestCallbacks ||
            {
            },
            e = window._authTokenExceptions,
            t = window._authRequestCallbacks,
            window._authTokenException &&
            window._authTokenRegister &&
            window._authOrigFetch
          ) return {
            errors: e,
            callbacks: t
          };
          try {
            Object.defineProperty(window, '_authTokenException', {
              value: (t, n) => {
                e[t] = n
              }
            }),
            Object.defineProperty(window, '_authTokenRegister', {
              value: (e, n) => {
                t[e] = n
              }
            }),
            Object.defineProperty(
              window,
              '_authOrigFetch',
              {
                value: new Promise(
                  (
                    e => {
                      const t = window._authGlobalFetch;
                      if (
                        t &&
                        (
                          'function' == typeof (n = t) &&
                          '(){[nativecode]}' === Function.prototype.toString.call(n).replace(/[\n ]/g, '').substr( - 16)
                        )
                      ) return e(t);
                      var n;
                      requestAnimationFrame(
                        (
                          () => {
                            let iframe = document.createElement('iframe');
                            if (
                              iframe.style.display = 'none',
                              document.body.appendChild(iframe),
                              !/iPad|iPhone|iPod|iOS|Version\/[\d\.]+.*Safari/.test(navigator.userAgent)
                            ) return e(iframe.contentWindow.fetch);
                            iframe.src = l,
                            iframe.onload = () => {
                              e(iframe.contentWindow.fetch)
                            }
                          }
                        )
                      )
                    }
                  )
                )
              }
            ),
            window.dispatchEvent(new Event('authSubordinateTokenCallbacksReady'))
          } catch (e) {
            Object.defineProperty(window, '_authTokenRegistrationFailed', {
              value: 1
            })
          }
        }
        return {
          errors: e,
          callbacks: t
        }
      }(),
      C = {};
      t.a = {
        getRequestCallback(e) {
          let t = I[e];
          return t ? Promise.resolve(t) : N(e)
        },
        preloadSubordinateToken(e) {
          var t;
          'undefined' != typeof window &&
          (
            document.querySelector('[data-hid="'.concat(E.a, '"]')) ||
            N(
              e ||
              (
                null === (t = window.NUXT_APP_CONFIG) ||
                void 0 === t ? void 0 : t.subordinateClientId
              )
            )
          )
        },
        clearCache(e) {
          C[e] ||
          A(e)
        }
      };
      function N(e) {
        let t = C[e];
        return t ||
        (t = x(e), t.finally((() => {
          delete C[e]
        })), C[e] = t, t)
      }
      function x(e) {
        let t = arguments.length > 1 &&
        void 0 !== arguments[1] ? arguments[1] : 3,
        n = arguments.length > 2 &&
        void 0 !== arguments[2] &&
        arguments[2];
        return new Promise(
          (
            (l, m) => {
              if (t <= 0) return m(_[e] || new Error('subordinate token script failed'));
              delete _[e];
              const h = document.createElement('script');
              h.onerror = n => {
                Object(r.a) (c.a).headers({
                  'X-Requested-With': 'XMLHttpRequest',
                  'Content-Type': 'application/json'
                }).options({
                  credentials: 'same-origin',
                  requestInfo: new o
                }).middlewares([v(),
                y([w()])], !0).get().res(
                  (
                    n => {
                      if (n && k.a === n.headers.get('x-upwork-authentication')) return m(k.a);
                      l(x(e, --t, !0))
                    }
                  )
                )
              },
              h.onload = () => {
                setTimeout((() => {
                  let n = I[e];
                  if (n) return l(n);
                  l(x(e, --t, !0))
                }))
              },
              n &&
              A(e),
              document.head.appendChild(h),
              h.src = function () {
                const e = window.NUXT_APP_CONFIG,
                t = e.subordinateEndpointPath ? e.subordinateEndpointPath : '/api/v3/oauth2/token/subordinate',
                n = e.subordinateEndpointOrigin ? e.subordinateEndpointOrigin : '',
                r = e.subordinateSubdomain ? e.subordinateSubdomain : 'auth',
                o = function (e) {
                  const t = document.cookie.match(new RegExp('(^| )' + e + '=([^;]+)'));
                  return t ? t[2] : null
                }('base_domain');
                if (o) return 'https://'.concat(r, '.').concat(o).concat(t);
                if (e.subordinateOAuth2TokenEndpoint) return e.subordinateOAuth2TokenEndpoint;
                return ''.concat(n).concat(t)
              }() + '/v'.concat(T, '/').concat(e, '?') + function (e) {
                const t = [],
                n = d.getPrefix();
                n &&
                t.push('cookiePrefix=' + encodeURIComponent(n));
                return t.push(
                  function (e) {
                    const t = O(e);
                    let n = (new Date).getTime().toString();
                    try {
                      const e = localStorage.getItem(t);
                      e ? n = e : localStorage.setItem(t, n)
                    } catch (e) {
                      console.error(e)
                    }
                    return n
                  }(e)
                ),
                t.join('&')
              }(e)
            }
          )
        )
      }
      function A(e) {
        try {
          localStorage.removeItem(O(e))
        } catch (e) {
        }
        delete I[e]
      }
      function O(e) {
        return ''.concat(S, '_').concat(e)
      }
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      n.d(t, 'storeName', (function () {
        return H
      })),
      n.d(t, 'SET_CHAT_LIST', (function () {
        return W
      })),
      n.d(t, 'SET_USAGE_STATS', (function () {
        return K
      })),
      n.d(t, 'SET_CHAT_CONVERSATION', (function () {
        return J
      })),
      n.d(t, 'SET_USER_DETAILS', (function () {
        return X
      })),
      n.d(t, 'SET_SUGGESTED_PROMPTS', (function () {
        return Z
      })),
      n.d(t, 'ASK_QUESTION', (function () {
        return Y
      })),
      n.d(
        t,
        'APPLICATION_NAME_FOR_CHAT_PRO_ACCESS_CHECK',
        (function () {
          return ee
        })
      ),
      n.d(t, 'THUMBS', (function () {
        return te
      })),
      n.d(t, 'ERROR_CODES', (function () {
        return re
      })),
      n.d(t, 'gtp4Limit', (function () {
        return ae
      })),
      n.d(t, 'gptModel', (function () {
        return oe
      })),
      n.d(t, 'defaultModel', (function () {
        return se
      })),
      n.d(t, 'newChatStruct', (function () {
        return le
      })),
      n.d(t, 'state', (function () {
        return ue
      })),
      n.d(t, 'mutations', (function () {
        return de
      })),
      n.d(t, 'getters', (function () {
        return me
      })),
      n.d(t, 'actions', (function () {
        return he
      }));
      var r = n(0),
      o = n(4),
      c = n(3),
      l = n(107),
      d = n.n(l),
      m = n(108),
      h = n.n(m),
      f = n(109),
      v = n.n(f),
      y = n(110),
      w = n.n(y),
      k = n(52),
      S = n.n(k),
      T = n(111),
      E = n.n(T),
      I = n(112),
      _ = n.n(I),
      C = n(113),
      N = n.n(C),
      x = n(114),
      A = n.n(x),
      O = n(115),
      D = n.n(O),
      R = n(116),
      P = n.n(R),
      L = n(53),
      U = n.n(L),
      F = n(54),
      M = n.n(F),
      $ = n(55),
      j = n.n($),
      V = n(117),
      G = n.n(V);
      class B {
        static async getUserDetails(e) {
          return Object(c.a) (e) ({
            query: Object(o.a) (S.a)
          }, {
            dataKey: 'user',
            cache: {
            }
          })
        }
        static async getSuggestedPrompts(e, t) {
          return Object(c.a) (e) ({
            query: Object(o.a) (A.a),
            variables: {
              model: t
            }
          }, {
            dataKey: 'freelancerChatProfilePrompts',
            cache: {
            }
          })
        }
        static async getAiToolsUsed(e, t) {
          var n;
          const r = Object(c.a) (e),
          l = null === (
            n = (
              await r({
                query: Object(o.a) (U.a),
                variables: {
                  application: t
                }
              }, {
                dataKey: 'completionAIGetAIToolsUsed',
                cache: {
                }
              })
            ).confirmations
          ) ||
          void 0 === n ? void 0 : n.find((e => e.application === t));
          return null == l ? void 0 : l.alreadyUsed
        }
        static async confirmAIToolUsed(e, t) {
          return Object(c.a) (e) ({
            query: Object(o.a) (M.a),
            variables: {
              toolsUsedRequest: t
            }
          }, {
            dataKey: 'confirmAIToolUsed',
            cache: {
            }
          })
        }
        static async getChatList(e) {
          return Object(c.a) (e) ({
            query: Object(o.a) (d.a)
          }, {
            dataKey: 'freelancerChatThreads',
            cache: {
            }
          })
        }
        static async getChat(e, t) {
          let {
            threadId: n
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (h.a),
            variables: {
              threadId: n
            }
          }, {
            dataKey: 'freelancerChatThread',
            cache: {
            }
          })
        }
        static async askQuestion(e, t) {
          let {
            model: n,
            question: r,
            attachedFiles: l
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (v.a),
            variables: {
              model: n,
              freelancerChatQuestionRequest: {
                question: r,
                attachedFiles: l
              }
            }
          }, {
            dataKey: 'freelancerChatAskQuestion',
            cache: {
            },
            throwOnError: !0
          })
        }
        static async askQuestionInChat(e, t) {
          let {
            question: n,
            chatId: r,
            attachedFiles: l
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (w.a),
            variables: {
              freelancerChatQuestionRequest: {
                question: n,
                attachedFiles: l
              },
              threadId: r
            }
          }, {
            dataKey: 'freelancerChatAskQuestionInThread',
            cache: {
            },
            throwOnError: !0
          })
        }
        static async getChatConversation(e, t) {
          let {
            chatId: n
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (E.a),
            variables: {
              threadId: n
            }
          }, {
            dataKey: 'freelancerChatConversation',
            cache: {
            }
          })
        }
        static async getAnswer(e, t) {
          let {
            questionId: n
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (_.a),
            variables: {
              questionId: n
            }
          }, {
            dataKey: 'freelancerChatAnswer',
            cache: {
            },
            throwOnError: !0
          })
        }
        static async getUsageStats(e) {
          return Object(c.a) (e) ({
            query: Object(o.a) (N.a)
          }, {
            dataKey: 'freelancerChatUsageStats',
            cache: {
            }
          })
        }
        static async deleteChat(e, t) {
          let {
            chatId: n
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (D.a),
            variables: {
              threadId: n
            }
          }, {
            dataKey: 'freelancerDeleteChat',
            cache: {
            }
          })
        }
        static async renameChat(e, t) {
          let {
            newChatTitle: n,
            chatId: r
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (P.a),
            variables: {
              threadId: r,
              freelancerChatRenameThreadRequest: {
                title: n
              }
            }
          }, {
            dataKey: 'freelancerChatRenameThread',
            cache: {
            }
          })
        }
        static async stopGeneratingAnswer(e, t) {
          let {
            questionId: n
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (j.a),
            variables: {
              questionId: n
            }
          }, {
            dataKey: 'stopGeneratingAnswer',
            cache: {
            }
          })
        }
        static async rateAnswer(e, t) {
          let {
            questionId: n,
            thumbs: r
          }
          = t;
          return Object(c.a) (e) ({
            query: Object(o.a) (G.a),
            variables: {
              questionId: n,
              freelancerChatAnswerThumbsRequest: {
                thumbs: r
              }
            }
          }, {
            dataKey: 'rateAnswer',
            cache: {
            }
          })
        }
      }
      var z = n(10);
      const H = 'chatPro',
      Q = 'setLoading',
      W = 'setChatList',
      K = 'setUsageStats',
      J = 'setChatConversation',
      X = 'setUserDetails',
      Z = 'setSuggestedPrompts',
      Y = 'askQuestion',
      ee = 'UpworkChatPro',
      te = {
        up: 'UP',
        down: 'DOWN',
        none: 'NONE'
      },
      ne = 'chat-pro-privacy-notice',
      ie = 'chat-pro-already-used',
      re = {
        GENERIC_ERROR: {
          message: 'flgai_chatPro.genericErrorWarning'
        },
        USER_TOKEN_LIMIT_EXCEEDED: {
          message: 'flgai_chatPro.usageReachedLimitWarning'
        },
        ANSWER_TOKEN_LIMIT_EXCEEDED: {
          message: 'flgai_chatPro.answerTokenLimitExceeded'
        }
      },
      ae = 90,
      oe = {
        gpt_3_5: 'gpt-3.5',
        gpt4_0: 'gpt-4'
      },
      se = oe.gpt4_0,
      ce = e => null != e &&
      e.includes(oe.gpt4_0) ? oe.gpt4_0 : null != e &&
      e.includes(oe.gpt_3_5) ? oe.gpt_3_5 : null,
      le = {
        id: '0',
        title: 'New chat',
        createdAt: (new Date).toISOString()
      },
      ue = () => ({
        isLoading: {
          [
            W
          ]: !0
        },
        userDetails: {
        },
        suggestedPrompts: [],
        chatList: [],
        selectedChatIndex: null,
        error: null,
        errorActionLink: {
          label: '',
          url: ''
        },
        successMessage: null,
        showPrivacyNotice: !1,
        usageStats: {
        },
        modelInUse: se
      }),
      de = {
        setLoading(e, t) {
          let {
            loader: n,
            flag: r
          }
          = t;
          const o = {
            ...e.isLoading
          };
          o[n] = r,
          e.isLoading = o
        },
        setSuggestedPrompts(e, t) {
          let {
            suggestedPrompts: n
          }
          = t;
          e.suggestedPrompts = n
        },
        setSelectedChatIndex(e, t) {
          e.selectedChatIndex = t
        },
        addNewChat(e) {
          e.chatList.length &&
          e.chatList[0].id === le.id ||
          e.chatList.unshift({
            ...le,
            conversation: []
          }),
          e.selectedChatIndex = 0
        },
        removeNewChat(e) {
          e.chatList.shift()
        },
        removeChat(e, t) {
          const n = e.chatList.findIndex((e => e.id === t));
          e.chatList.splice(n, 1)
        },
        renameChat(e, t) {
          let {
            newChatTitle: n,
            chatId: o
          }
          = t;
          const c = e.chatList.find((e => e.id === o));
          r.default.set(c, 'title', n)
        },
        setChatList(e, t) {
          let {
            chatList: n
          }
          = t;
          e.chatList = n.map((e => ({
            ...e,
            model: ce(e.model)
          })))
        },
        setUserDetails(e, t) {
          let {
            userDetails: n
          }
          = t;
          e.userDetails = n
        },
        setChatConversation(e, t) {
          let {
            chatId: n,
            chatConversation: o
          }
          = t;
          if (null == o || !o.length) return;
          const c = e.chatList.find((e => e.id === n));
          r.default.set(c, 'conversation', o)
        },
        setUsageStats(e, t) {
          let {
            usageStats: n
          }
          = t;
          e.usageStats = n
        },
        addNewQuestionAnswerToChat(e, t) {
          let {
            chatId: n,
            id: o,
            question: c,
            answer: l,
            attachedFiles: d,
            thumbs: m,
            createdAt: h,
            error: f
          }
          = t;
          const v = e.chatList.find((e => e.id === n));
          v.pendingQuestion = null,
          v.conversation ||
          r.default.set(v, 'conversation', []),
          v.conversation.push({
            id: o,
            question: c,
            answer: l,
            attachedFiles: d,
            thumbs: m,
            createdAt: h,
            error: f
          })
        },
        updateChat(e, t) {
          let {
            chatId: n,
            data: data
          }
          = t;
          const o = e.chatList.find((e => e.id === n));
          o &&
          (
            o.id = data.id ||
            o.id,
            o.title = data.title ||
            o.title,
            o.createdAt = data.createdAt ||
            o.createdAt,
            o.model = ce(data.model || o.model),
            void 0 !== data.stopped &&
            r.default.set(o, 'stopped', data.stopped)
          )
        },
        setPendingQuestion(e, t) {
          let {
            chatId: n,
            pendingQuestion: o
          }
          = t;
          const c = e.chatList.find((e => e.id === n));
          c &&
          r.default.set(c, 'pendingQuestion', o)
        },
        setSavedQuestion(e, t) {
          let {
            chatId: n,
            question: o
          }
          = t;
          const c = e.chatList.find((e => e.id === n));
          c &&
          r.default.set(c, 'savedQuestion', o)
        },
        setShowPrivacyNotice(e, t) {
          let {
            showPrivacyNotice: n
          }
          = t;
          e.showPrivacyNotice = n
        },
        setError(e, t) {
          let {
            error: n,
            errorActionLink: r = {
              label: '',
              url: ''
            }
          }
          = t;
          e.error = n,
          e.errorActionLink = n ? r : {
            label: '',
            url: ''
          }
        },
        setSuccessMessage(e, t) {
          let {
            successMessage: n
          }
          = t;
          e.successMessage = n
        },
        setGqpModel(e, t) {
          let {
            modelInUse: n
          }
          = t;
          e.modelInUse = n
        }
      },
      me = {
        hasNewChat(e) {
          var t;
          return (null === (t = e.chatList[0]) || void 0 === t ? void 0 : t.id) === le.id
        },
        firstTimeVisitor(e) {
          var t,
          n;
          return 1 === (null === (t = e.chatList) || void 0 === t ? void 0 : t.length) &&
          (null === (n = e.chatList[0]) || void 0 === n ? void 0 : n.id) === le.id
        }
      },
      he = {
        async loadUserDetails(e) {
          var t;
          let {
            commit: n
          }
          = e;
          n(Q, {
            loader: X,
            flag: !0
          });
          const r = await B.getUserDetails(this);
          n(X, {
            userDetails: r ||
            {
            }
          });
          n(
            'setShowPrivacyNotice',
            {
              showPrivacyNotice: !(
                (null === (t = Object(z.a) (ne)) || void 0 === t ? void 0 : t.split(',')) ||
                []
              ).includes(r.id)
            }
          ),
          n(Q, {
            loader: X,
            flag: !1
          })
        },
        async loadSuggestedPrompts(e) {
          var t;
          let {
            commit: n,
            state: r
          }
          = e;
          n(Q, {
            loader: Z,
            flag: !0
          });
          let o = await B.getSuggestedPrompts(this, r.modelInUse),
          c = 0;
          for (
            ;
            0 === (
              null === (l = o) ||
              void 0 === l ||
              null === (l = l.prompts) ||
              void 0 === l ? void 0 : l.length
            ) &&
            c < 30;
          ) {
            var l;
            await new Promise((e => {
              setTimeout(e, 500)
            })),
            o = await B.getSuggestedPrompts(this),
            c += 1
          }
          n(
            Z,
            {
              suggestedPrompts: (
                null === (t = o) ||
                void 0 === t ||
                null === (t = t.prompts) ||
                void 0 === t ? void 0 : t.map((e => e.prompt))
              ) ||
              []
            }
          ),
          n(Q, {
            loader: Z,
            flag: !1
          })
        },
        async loadChatList(e, t) {
          var n;
          let {
            commit: r,
            dispatch: o
          }
          = e,
          {
            chatId: c
          }
          = t;
          r(Q, {
            loader: W,
            flag: !0
          });
          const l = await B.getChatList(this),
          d = null == l ||
          null === (n = l.threads) ||
          void 0 === n ? void 0 : n.sort(
            (
              (a, b) => new Date(null == b ? void 0 : b.createdAt) - new Date(null == a ? void 0 : a.createdAt)
            )
          ),
          m = null != d &&
          d.length ? d : [
            {
              ...le,
              conversation: []
            }
          ];
          r(W, {
            chatList: m
          }),
          c &&
          - 1 !== m.findIndex((e => e.id === c)) ? await o('selectChatById', c) : await o('createNewChat'),
          r(Q, {
            loader: W,
            flag: !1
          })
        },
        async loadUsageStats(e) {
          let {
            commit: t
          }
          = e;
          const n = await B.getUsageStats(this);
          n.usagePercentage >= ae &&
          t('setGqpModel', {
            modelInUse: oe.gpt_3_5
          }),
          t(K, {
            usageStats: n
          })
        },
        async loadChatConversation(e, t) {
          let {
            commit: n
          }
          = e,
          {
            chatId: r
          }
          = t;
          n(Q, {
            loader: J,
            flag: !0
          });
          const o = await B.getChatConversation(this, {
            chatId: r
          });
          n(
            J,
            {
              chatId: r,
              chatConversation: (null == o ? void 0 : o.conversation) ||
              []
            }
          ),
          n(Q, {
            loader: J,
            flag: !1
          })
        },
        async createNewChat(e) {
          let {
            commit: t
          }
          = e;
          await t('addNewChat')
        },
        async selectChatById(e, t) {
          var n,
          r;
          let {
            commit: o,
            dispatch: c,
            state: l
          }
          = e;
          const d = l.chatList.findIndex((e => e.id === t)) ||
          0;
          o('setSelectedChatIndex', d),
          null !== (n = l.chatList[d]) &&
          void 0 !== n &&
          null !== (n = n.conversation) &&
          void 0 !== n &&
          n.length ||
          (null === (r = l.chatList[d]) || void 0 === r ? void 0 : r.id) === le.id ||
          await c('loadChatConversation', {
            chatId: t
          })
        },
        async pollChatDetails(e, t) {
          let {
            commit: n,
            state: r
          }
          = e,
          {
            threadId: o
          }
          = t,
          c = await B.getChat(this, {
            threadId: o
          });
          const l = r.chatList.find((e => e.id === o));
          for (; !(null !== (d = c) && void 0 !== d && d.title || null != l && l.stopped); ) {
            var d;
            await new Promise((e => {
              setTimeout(e, 500)
            })),
            c = await B.getChat(this, {
              threadId: o
            })
          }
          await n('updateChat', {
            chatId: o,
            data: c
          })
        },
        async pollAnswer(e, t) {
          let {
            commit: n,
            dispatch: r
          }
          = e,
          {
            chatId: o,
            questionId: c,
            question: l
          }
          = t,
          d = !1;
          const m = setTimeout((() => {
            d = !0
          }), 10000);
          try {
            var h,
            f,
            v,
            y,
            w,
            k,
            S;
            let e = await B.getAnswer(this, {
              questionId: c
            });
            for (
              n(
                'setPendingQuestion',
                {
                  chatId: o,
                  pendingQuestion: {
                    id: c,
                    question: l,
                    answer: (null === (h = e) || void 0 === h ? void 0 : h.answer) ||
                    '',
                    attachedFiles: null !== (f = null === (v = e) || void 0 === v ? void 0 : v.attachedFiles) &&
                    void 0 !== f ? f : []
                  }
                }
              );
              !(
                null !== (T = e) &&
                void 0 !== T &&
                T.finished ||
                null !== (E = e) &&
                void 0 !== E &&
                E.error ||
                d
              );
            ) {
              var T,
              E,
              I,
              _,
              C,
              N;
              await new Promise((e => {
                setTimeout(e, 500)
              })),
              e = await B.getAnswer(this, {
                questionId: c
              }),
              n(
                'setPendingQuestion',
                {
                  chatId: o,
                  pendingQuestion: {
                    id: c,
                    question: l,
                    answer: (null === (I = e) || void 0 === I ? void 0 : I.answer) ||
                    '',
                    attachedFiles: null !== (_ = null === (C = e) || void 0 === C ? void 0 : C.attachedFiles) &&
                    void 0 !== _ ? _ : []
                  }
                }
              ),
              null !== (N = e) &&
              void 0 !== N &&
              null !== (N = N.answer) &&
              void 0 !== N &&
              N.length &&
              clearTimeout(m)
            }
            var x,
            A;
            if (
              d &&
              (clearTimeout(m), await r('stopGeneratingAnswer')),
              n(
                'addNewQuestionAnswerToChat',
                {
                  chatId: null === (y = e) ||
                  void 0 === y ? void 0 : y.threadId,
                  id: c,
                  question: l,
                  answer: null === (w = e) ||
                  void 0 === w ? void 0 : w.answer,
                  attachedFiles: null !== (k = null === (S = e) || void 0 === S ? void 0 : S.attachedFiles) &&
                  void 0 !== k ? k : [],
                  thumbs: 'NONE',
                  createdAt: (new Date).toISOString()
                }
              ),
              d
            ) n(
              'setError',
              {
                error: 'flgai_retryOnError.text',
                errorActionLink: {
                  label: 'flgai_retryOnError.action',
                  action: 'chatPro/retryLastQuestion'
                }
              }
            );
             else n(
              'setError',
              {
                error: (
                  null === (x = re[null === (A = e) ||
                  void 0 === A ? void 0 : A.error]) ||
                  void 0 === x ? void 0 : x.message
                ) ||
                null
              }
            )
          } catch (e) {
            this.$chatProLogger.error(e.message),
            this.$chatProLogger.error(e),
            n('setError', {
              error: re.GENERIC_ERROR.message
            })
          }
        },
        async retryLastQuestion(e) {
          let {
            dispatch: t,
            state: n
          }
          = e;
          const r = n.chatList[n.selectedChatIndex],
          o = r.conversation[r.conversation.length - 1];
          t(
            'askQuestion',
            {
              question: o.question,
              attachedFiles: o.attachedFiles,
              chatId: r.id
            }
          )
        },
        async askQuestion(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: o
          }
          = e,
          {
            question: c,
            attachedFiles: l,
            chatId: d
          }
          = t;
          n(Q, {
            loader: Y,
            flag: !0
          });
          const m = d === le.id;
          try {
            n('setError', {
              error: null
            }),
            n('updateChat', {
              chatId: d,
              data: {
                stopped: !1
              }
            }),
            n(
              'setPendingQuestion',
              {
                chatId: d,
                pendingQuestion: {
                  question: c,
                  attachedFiles: l,
                  answer: ''
                }
              }
            );
            const e = m ? await B.askQuestion(
              this,
              {
                question: c,
                model: o.modelInUse,
                attachedFiles: null == l ? void 0 : l.map((e => e.id))
              }
            ) : await B.askQuestionInChat(
              this,
              {
                question: c,
                attachedFiles: null == l ? void 0 : l.map((e => e.id)),
                chatId: d
              }
            );
            m &&
            await n(
              'updateChat',
              {
                chatId: le.id,
                data: {
                  id: e.threadId,
                  model: o.modelInUse
                }
              }
            ),
            await r(
              'pollAnswer',
              {
                chatId: e.threadId,
                questionId: e.questionId,
                question: c
              }
            ),
            await r('loadUsageStats'),
            m &&
            await r('pollChatDetails', {
              threadId: e.threadId
            }),
            n('setSavedQuestion', {
              chatId: e.threadId,
              question: ''
            })
          } catch (e) {
            var h;
            if (
              this.$chatProLogger.error(e.message),
              this.$chatProLogger.error(e),
              await r('loadUsageStats'),
              e.length &&
              null !== (h = e[0]) &&
              void 0 !== h &&
              null !== (h = h.extensions) &&
              void 0 !== h &&
              h.code
            ) {
              var f,
              v;
              const t = null === (f = e[0]) ||
              void 0 === f ||
              null === (f = f.extensions) ||
              void 0 === f ? void 0 : f.code;
              n(
                'setError',
                {
                  error: (null === (v = re[t]) || void 0 === v ? void 0 : v.message) ||
                  re.GENERIC_ERROR.message
                }
              )
            } else n('setError', {
              error: re.GENERIC_ERROR.message
            });
            m &&
            n('removeNewChat')
          }
          n('setPendingQuestion', {
            chatId: d,
            pendingQuestion: null
          }),
          n(Q, {
            loader: Y,
            flag: !1
          })
        },
        disablePrivacyNotice(e) {
          var t;
          let {
            commit: n,
            state: r
          }
          = e;
          const o = (null === (t = Object(z.a) (ne)) || void 0 === t ? void 0 : t.split(',')) ||
          [];
          o.includes(r.userDetails.id) ||
          Object(z.b) (ne, [
            ...o,
            r.userDetails.id
          ].join(',')),
          n('setShowPrivacyNotice', {
            showPrivacyNotice: !1
          })
        },
        async deleteChat(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: o
          }
          = e,
          c = 0;
          (null == o ? void 0 : o.selectedChatIndex) > o.chatList.findIndex((e => e.id === t)) &&
          (c = 1);
          const l = o.chatList.length <= 1 ||
          o.selectedChatIndex &&
          o.chatList[o.selectedChatIndex].id === t;
          await B.deleteChat(this, {
            chatId: t
          }),
          n('removeChat', t),
          l ? await r('createNewChat') : n('setSelectedChatIndex', o.selectedChatIndex - c)
        },
        async renameChat(e, t) {
          let {
            commit: n
          }
          = e,
          {
            newChatTitle: r,
            chatId: o
          }
          = t;
          await B.renameChat(this, {
            newChatTitle: r,
            chatId: o
          }),
          n('renameChat', {
            newChatTitle: r,
            chatId: o
          })
        },
        async stopGeneratingAnswer(e) {
          let {
            commit: t,
            state: n
          }
          = e;
          const r = n.chatList[n.selectedChatIndex];
          r &&
          r.pendingQuestion &&
          (
            t('updateChat', {
              chatId: r.id,
              data: {
                stopped: !0
              }
            }),
            await B.stopGeneratingAnswer(this, {
              questionId: r.pendingQuestion.id
            })
          )
        },
        async rateAnswer(e, t) {
          var n;
          let {
            state: o,
            commit: c
          }
          = e,
          {
            chatId: l,
            questionId: d,
            thumbs: m
          }
          = t;
          await B.rateAnswer(this, {
            questionId: d,
            thumbs: m
          });
          const h = null === (n = o.chatList) ||
          void 0 === n ? void 0 : n.find((e => e.id === l)),
          f = null == h ? void 0 : h.conversation.find((e => e.id === d));
          f &&
          r.default.set(f, 'thumbs', m),
          m !== te.none &&
          (
            c(
              'setSuccessMessage',
              {
                successMessage: 'flgai_chatPro.thanksForYourFeedback'
              }
            ),
            setTimeout((() => {
              c('setSuccessMessage', {
                successMessage: null
              })
            }), 3000)
          )
        },
        async getChatProAlreadyUsed() {
          return !!await B.getAiToolsUsed(this, ee) ||
          !!Object(z.a) (ie)
        },
        confirmAiToolUsed() {
          Object(z.b) (ie, 'true')
        }
      };
      t.default = {
        namespaced: !0,
        state: ue,
        getters: me,
        actions: he,
        mutations: de
      }
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      n.d(t, 'storeName', (function () {
        return v
      })),
      n.d(t, 'SET_CHAT_LIST', (function () {
        return w
      })),
      n.d(t, 'SET_USAGE_STATS', (function () {
        return k
      })),
      n.d(t, 'SET_CHAT_CONVERSATION', (function () {
        return S
      })),
      n.d(t, 'SET_USER_DETAILS', (function () {
        return T
      })),
      n.d(t, 'SET_SUGGESTED_PROMPTS', (function () {
        return E
      })),
      n.d(t, 'ASK_QUESTION', (function () {
        return I
      })),
      n.d(t, 'SET_FL_PLUS', (function () {
        return _
      })),
      n.d(
        t,
        'APPLICATION_NAME_FOR_CHAT_PRO_ACCESS_CHECK',
        (function () {
          return C
        })
      ),
      n.d(t, 'THUMBS', (function () {
        return N
      })),
      n.d(t, 'ERROR_CODES', (function () {
        return O
      })),
      n.d(t, 'newChatStruct', (function () {
        return D
      })),
      n.d(t, 'CHIP_ACTION', (function () {
        return R
      })),
      n.d(t, 'state', (function () {
        return P
      })),
      n.d(t, 'mutations', (function () {
        return L
      })),
      n.d(t, 'getters', (function () {
        return U
      })),
      n.d(t, 'actions', (function () {
        return F
      }));
      var r = n(0),
      o = n(9),
      c = n(5);
      class l {
        constructor(e, t) {
          this.page = e,
          this.relatedData = t
        }
        setFormatJson() {
          return this.format = c.b.JSON,
          this
        }
        setFormatText() {
          return this.format = c.b.TEXT,
          this
        }
        setRoleUser() {
          return this.role = c.c.USER,
          this
        }
        setRoleInternal() {
          return this.role = c.c.INTERNAL,
          this
        }
        setAction(e) {
          return this.action = e,
          this
        }
        setContent(content) {
          return this.content = content,
          this
        }
        setContentJson(content) {
          return this.content = JSON.stringify(content),
          this
        }
      }
      class d {
        constructor(e) {
          let t = arguments.length > 1 &&
          void 0 !== arguments[1] ? arguments[1] : {
          };
          this.page = e,
          this.relatedData = d.prepareRelatedData(t)
        }
        static prepareRelatedData(e) {
          if (e) return Object.entries(e).map((e => {
            let[t,
            n] = e;
            return {
              key: t,
              value: n
            }
          }))
        }
        createMessageRequest() {
          return new l(this.page, this.relatedData)
        }
        createUserMessage(e) {
          return this.createMessageRequest().setRoleUser().setFormatText().setContent(e)
        }
        createActionMessage(e, content) {
          return this.createMessageRequest().setRoleInternal().setFormatJson().setAction(e).setContentJson(content)
        }
      }
      function m(e, t) {
        var n;
        let r = arguments.length > 2 &&
        void 0 !== arguments[2] ? arguments[2] : [];
        const o = [],
        c = new d(e.hostContext.page, e.hostContext.relatedObjects);
        if (
          null == r ||
          r.forEach((e => o.push(c.createActionMessage(e.action, e.content)))),
          null === (n = e.actionMessages) ||
          void 0 === n ||
          n.forEach((e => o.push(c.createActionMessage(e.action, e.content)))),
          t
        ) {
          const e = c.createUserMessage(t);
          o.push(e)
        }
        return o
      }
      var h = n(46),
      f = n(10);
      const v = 'umaPro',
      y = 'setLoading',
      w = 'setChatList',
      k = 'setUsageStats',
      S = 'setChatConversation',
      T = 'setUserDetails',
      E = 'setSuggestedPrompts',
      I = 'askQuestion',
      _ = 'setFreelancerPlus',
      C = 'UpworkChatPro',
      N = {
        up: 'THUMBSUP',
        down: 'THUMBSDOWN'
      },
      x = 'uma-pro-privacy-notice',
      A = 'uma-pro-already-used',
      O = {
        GENERIC_ERROR: {
          message: 'flgai_chatPro.genericErrorWarning'
        },
        USER_TOKEN_LIMIT_EXCEEDED: {
          message: 'flgai_chatPro.usageReachedLimitWarning'
        },
        ANSWER_TOKEN_LIMIT_EXCEEDED: {
          message: 'flgai_chatPro.answerTokenLimitExceeded'
        }
      },
      D = {
        threadId: '0',
        title: null,
        createdDateTime: (new Date).toISOString()
      },
      R = {
        action: 'chipClicked',
        content: {
          key: 'FL_INITIAL_CHIPS'
        }
      },
      P = () => ({
        isLoading: {
          [
            w
          ]: !0
        },
        userDetails: {
        },
        suggestedPrompts: [],
        chatList: [],
        selectedChatIndex: null,
        error: null,
        errorActionLink: {
          label: '',
          url: ''
        },
        successMessage: null,
        showPrivacyNotice: !1,
        usageStats: {
        },
        hostContext: {
          page: 'uma_pro',
          relatedObjects: {
            data: 'none'
          }
        },
        isFreelancerPlus: null
      }),
      L = {
        setLoading(e, t) {
          let {
            loader: n,
            flag: r
          }
          = t;
          const o = {
            ...e.isLoading
          };
          o[n] = r,
          e.isLoading = o
        },
        setSuggestedPrompts(e, t) {
          let {
            suggestedPrompts: n
          }
          = t;
          e.suggestedPrompts = n
        },
        setSelectedChatIndex(e, t) {
          e.selectedChatIndex = t
        },
        addNewChat(e) {
          e.chatList.length &&
          e.chatList[0].threadId === D.threadId ||
          e.chatList.unshift({
            ...D,
            conversation: []
          }),
          e.selectedChatIndex = 0
        },
        removeNewChat(e) {
          e.chatList.shift()
        },
        removeChat(e, t) {
          const n = e.chatList.findIndex((e => e.threadId === t));
          e.chatList.splice(n, 1)
        },
        renameChat(e, t) {
          let {
            title: title,
            threadId: n
          }
          = t;
          const o = e.chatList.find((e => e.threadId === n));
          r.default.set(o, 'title', title)
        },
        setChatList(e, t) {
          let {
            chatList: n
          }
          = t;
          e.chatList = n
        },
        setUserDetails(e, t) {
          let {
            userDetails: n
          }
          = t;
          e.userDetails = n
        },
        setChatConversation(e, t) {
          let {
            threadId: n,
            chatConversation: o
          }
          = t;
          if (null == o || !o.length) return;
          const c = e.chatList.find((e => e.threadId === n));
          r.default.set(c, 'conversation', o)
        },
        setUsageStats(e, t) {
          let {
            usageStats: n
          }
          = t;
          e.usageStats = n
        },
        setFreelancerPlus(e, t) {
          let {
            isFreelancerPlus: n
          }
          = t;
          e.isFreelancerPlus = n
        },
        updateChat(e, t) {
          let {
            threadId: n,
            data: data
          }
          = t;
          const o = e.chatList.find((e => e.threadId === n));
          o &&
          (
            o.threadId = data.threadId ||
            o.threadId,
            o.title = data.title ||
            o.title,
            o.createdDateTime = data.createdDateTime ||
            o.createdDateTime,
            void 0 !== data.stopped &&
            r.default.set(o, 'stopped', data.stopped)
          )
        },
        setLastAskedQuestion(e, t) {
          let {
            threadId: n,
            askedQuestion: r
          }
          = t;
          const o = e.chatList.find((e => e.threadId === n));
          o &&
          o.conversation.push(r)
        },
        updateLastAskedQuestion(e, t) {
          let {
            threadId: n,
            askedQuestion: r
          }
          = t;
          const o = e.chatList.find((e => e.threadId === n));
          o &&
          o.conversation.splice(o.conversation.length - 1, 1, r)
        },
        updatePendingTurn(e, t) {
          let {
            threadId: n,
            turn: o
          }
          = t;
          const c = e.chatList.find((e => e.threadId === n));
          c &&
          (
            c.pendingTurn ? o.messages.forEach(
              (
                e => {
                  c.pendingTurn.messages.find((t => t.messageId === e.messageId)) ||
                  c.pendingTurn.messages.push(e)
                }
              )
            ) : r.default.set(c, 'pendingTurn', o)
          )
        },
        updatePendingMessage(e, t) {
          let {
            threadId: n,
            message: r
          }
          = t;
          const o = e.chatList.find((e => e.threadId === n));
          if (o) {
            var c;
            const e = null === (c = o.pendingTurn) ||
            void 0 === c ? void 0 : c.messages.find((e => e.messageId === r.messageId));
            e &&
            (e.content += r.content)
          }
        },
        pendingTurnCompleted(e, t) {
          let {
            threadId: n
          }
          = t;
          const r = e.chatList.find((e => e.threadId === n));
          r &&
          (r.conversation.push(r.pendingTurn), r.pendingTurn = null)
        },
        setSavedQuestion(e, t) {
          let {
            threadId: n,
            question: o
          }
          = t;
          const c = e.chatList.find((e => e.threadId === n));
          c &&
          r.default.set(c, 'savedQuestion', o)
        },
        setShowPrivacyNotice(e, t) {
          let {
            showPrivacyNotice: n
          }
          = t;
          e.showPrivacyNotice = n
        },
        setError(e, t) {
          let {
            error: n,
            errorActionLink: r = {
              label: '',
              url: ''
            }
          }
          = t;
          e.error = n,
          e.errorActionLink = n ? r : {
            label: '',
            url: ''
          }
        },
        setSuccessMessage(e, t) {
          let {
            successMessage: n
          }
          = t;
          e.successMessage = n
        },
        setMessageRating(e, t) {
          let {
            threadId: n,
            messageId: r,
            rating: o
          }
          = t;
          const c = e.chatList.find((e => e.threadId === n));
          if (c) {
            var l;
            const e = null === (l = c.conversation[c.conversation.length - 1]) ||
            void 0 === l ||
            null === (l = l.messages) ||
            void 0 === l ? void 0 : l.find((e => e.messageId === r));
            e &&
            (e.rating = o)
          }
        }
      },
      U = {
        currentThreadId(e) {
          var t;
          return null === (t = e.chatList[e.selectedChatIndex]) ||
          void 0 === t ? void 0 : t.threadId
        },
        hasNewChat(e) {
          var t;
          return (null === (t = e.chatList[0]) || void 0 === t ? void 0 : t.threadId) === D.threadId
        },
        firstTimeVisitor(e) {
          var t,
          n;
          return 1 === (null === (t = e.chatList) || void 0 === t ? void 0 : t.length) &&
          (null === (n = e.chatList[0]) || void 0 === n ? void 0 : n.threadId) === D.threadId
        }
      },
      F = {
        async loadUserDetails(e) {
          var t;
          let {
            commit: n
          }
          = e;
          n(y, {
            loader: T,
            flag: !0
          });
          const r = await o.a.getUserDetails(this);
          n(T, {
            userDetails: r ||
            {
            }
          });
          n(
            'setShowPrivacyNotice',
            {
              showPrivacyNotice: !(
                (null === (t = Object(f.a) (x)) || void 0 === t ? void 0 : t.split(',')) ||
                []
              ).includes(r.id)
            }
          ),
          n(y, {
            loader: T,
            flag: !1
          })
        },
        async loadSuggestedPrompts(e) {
          let {
            commit: t,
            state: n
          }
          = e,
          r = 0;
          try {
            var l;
            t(y, {
              loader: E,
              flag: !0
            });
            const e = m(n, null, [
              R
            ]);
            r = (await o.a.createThread(this)).threadId;
            const h = await o.a.createMessagesInThread(this, {
              messages: e,
              threadId: r
            });
            let f = {},
            v = 0;
            do {
              var d;
              v += 1,
              f = await o.a.getMessagesTurn(this, {
                threadId: r,
                turnId: h.nextTurn,
                subscribedEvents: null
              })
            } while (
              ![c.e.COMPLETED,
              c.e.ERROR].includes(null === (d = f) || void 0 === d ? void 0 : d.status) &&
              v < 5
            );
            const w = null === (l = f) ||
            void 0 === l ||
            null === (l = l.messages) ||
            void 0 === l ? void 0 : l.find((e => 'showChips' === e.action && 'COMPLETED' === e.status)),
            k = null != w &&
            w.content ? JSON.parse(w.content).chips : null;
            t(
              E,
              {
                suggestedPrompts: null == k ? void 0 : k.map((e => null == e ? void 0 : e.content))
              }
            )
          } catch (e) {
            this.$umaProLogger.error(e)
          } finally {
            t(y, {
              loader: E,
              flag: !1
            }),
            r &&
            await o.a.deleteThread(this, {
              threadId: r
            })
          }
        },
        async loadChatList(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: c
          }
          = e,
          {
            threadId: l
          }
          = t;
          n(y, {
            loader: w,
            flag: !0
          });
          const d = await o.a.getThreadsList(this),
          m = null == d ? void 0 : d.sort(
            (
              (a, b) => new Date(null == b ? void 0 : b.createdDateTime) - new Date(null == a ? void 0 : a.createdDateTime)
            )
          ),
          h = null != m &&
          m.length ? m : [
            {
              ...D,
              conversation: []
            }
          ];
          n(w, {
            chatList: h
          }),
          l &&
          - 1 !== c.chatList.findIndex((e => e.threadId === l)) ? await r('selectChatById', l) : await r('createNewChat'),
          n(y, {
            loader: w,
            flag: !1
          })
        },
        async loadUsageStats(e) {
          let {
            commit: t
          }
          = e;
          const n = await o.a.getUsageStats(this);
          t(k, {
            usageStats: n
          })
        },
        async loadFreelancerPlus(e) {
          let {
            commit: t
          }
          = e;
          const n = await h.a.getFreelancerPlusStatus(this);
          t(_, {
            isFreelancerPlus: n
          })
        },
        async loadChatConversation(e, t) {
          let {
            commit: n
          }
          = e,
          {
            threadId: r
          }
          = t;
          n(y, {
            loader: S,
            flag: !0
          });
          const c = await o.a.getThreadMessages(this, {
            threadId: r
          });
          n(S, {
            threadId: r,
            chatConversation: (null == c ? void 0 : c.turns) ||
            []
          }),
          n(y, {
            loader: S,
            flag: !1
          })
        },
        async createNewChat(e) {
          let {
            commit: t
          }
          = e;
          await t('addNewChat')
        },
        async selectChatById(e, t) {
          var n,
          r;
          let {
            commit: o,
            dispatch: c,
            state: l
          }
          = e;
          const d = l.chatList.findIndex((e => e.threadId === t)) ||
          0;
          o('setSelectedChatIndex', d),
          null !== (n = l.chatList[d]) &&
          void 0 !== n &&
          null !== (n = n.conversation) &&
          void 0 !== n &&
          n.length ||
          (null === (r = l.chatList[d]) || void 0 === r ? void 0 : r.threadId) === D.threadId ||
          await c('loadChatConversation', {
            threadId: t
          })
        },
        async pollAnswer(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: l
          }
          = e,
          {
            threadId: d,
            turnId: m
          }
          = t,
          h = !1;
          const f = setTimeout((() => {
            h = !0
          }), 100000);
          try {
            let e = null;
            const t = [];
            do {
              var v,
              y;
              if (
                e = await o.a.getMessagesTurn(
                  this,
                  {
                    threadId: d,
                    turnId: m,
                    subscribedEvents: [
                      'updateThreadTitle'
                    ]
                  }
                ),
                null !== (v = e) &&
                void 0 !== v &&
                v.messages
              ) {
                n('updatePendingTurn', {
                  threadId: d,
                  turn: e
                });
                for (const n of e.messages) if (
                  !t.includes(n.messageId) &&
                  (
                    t.push(n.messageId),
                    n.role === c.c.ASSISTANT &&
                    await r('pollAssistantMessage', {
                      threadId: d,
                      message: n
                    }),
                    n.role === c.c.INTERNAL &&
                    'updateThreadTitle' === n.action
                  )
                ) try {
                  const content = JSON.parse(n.content);
                  l.chatList.find((e => e.threadId === d)).title ||
                  await r('renameChat', {
                    title: content.title,
                    threadId: d
                  })
                } catch (e) {
                  this.$umaProLogger.error('Failed to \'updateThreadTitle\': '.concat(e.message))
                }
              }(null === (y = e) || void 0 === y ? void 0 : y.status) === c.e.INPROGRESS &&
              await new Promise((e => {
                setTimeout(e, 100)
              }))
            } while (!(h || e && e.status !== c.e.INPROGRESS));
            if (h && (clearTimeout(f), await r('stopGeneratingAnswer')), h) this.$umaProLogger.error('Timeout while polling USI answer'),
            n(
              'setError',
              {
                error: 'flgai_retryOnError.text',
                errorActionLink: {
                  label: 'flgai_retryOnError.action',
                  action: 'umaPro/retryLastQuestion'
                }
              }
            );
             else if (e.status === c.e.ERROR) {
              var w;
              this.$umaProLogger.error(
                'Error while polling USI answer: '.concat(null === (w = e.messages) || void 0 === w ? void 0 : w[0].content)
              ),
              n('setError', {
                error: O.GENERIC_ERROR.message
              })
            } else n('setError', {
              error: null
            }),
            n('pendingTurnCompleted', {
              threadId: d
            })
          } catch (e) {
            this.$umaProLogger.error(e.message),
            this.$umaProLogger.error(e),
            n('setError', {
              error: O.GENERIC_ERROR.message
            }),
            n('pendingTurnCompleted', {
              threadId: d
            })
          }
        },
        async pollAssistantMessage(e, t) {
          let {
            commit: n
          }
          = e,
          {
            threadId: r,
            message: l
          }
          = t;
          if (l.status === c.d.ERROR) return this.$umaProLogger.error(
            'Message status is Error while polling the assistant message'
          ),
          void n('setError', {
            error: O.GENERIC_ERROR.message
          });
          if (l.status === c.d.INPROGRESS) {
            let e,
            t = l.content.length;
            do {
              if (
                e = await o.a.getMessage(this, {
                  threadId: r,
                  messageId: l.messageId,
                  sinceChars: t
                }),
                t += e.content.length,
                n('updatePendingMessage', {
                  threadId: r,
                  message: e
                }),
                e.status === c.d.ERROR
              ) return this.$umaProLogger.error('Message status is Error while after fetching from API'),
              void n('setError', {
                error: O.GENERIC_ERROR.message
              });
              e.status === c.e.INPROGRESS &&
              await new Promise((e => {
                setTimeout(e, 100)
              }))
            } while (e.status === c.d.INPROGRESS)
          }
        },
        async retryLastQuestion(e) {
          let {
            dispatch: t,
            state: n
          }
          = e;
          const r = n.chatList[n.selectedChatIndex],
          o = r.conversation[r.conversation.length - 1];
          t(
            'askQuestion',
            {
              question: o.question,
              attachedFiles: o.attachedFiles,
              currentThreadId: r.threadId
            }
          )
        },
        async askQuestion(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: c
          }
          = e,
          {
            question: l,
            actionMessages: d,
            currentThreadId: h
          }
          = t;
          n(y, {
            loader: I,
            flag: !0
          });
          const f = h === D.threadId;
          try {
            n('setError', {
              error: null
            });
            let e = h;
            if (f) {
              const t = await o.a.createThread(this);
              n('updateChat', {
                threadId: e,
                data: t
              }),
              e = t.threadId
            }
            const t = m(c, l, d);
            n(
              'setLastAskedQuestion',
              {
                threadId: e,
                askedQuestion: {
                  messages: t
                }
              }
            );
            const v = await o.a.createMessagesInThread(this, {
              messages: t,
              threadId: e
            });
            n('updateLastAskedQuestion', {
              threadId: e,
              askedQuestion: v
            }),
            await r('pollAnswer', {
              threadId: e,
              turnId: v.nextTurn
            }),
            await r('loadUsageStats'),
            n('setSavedQuestion', {
              threadId: v.threadId,
              question: ''
            })
          } catch (e) {
            var v;
            if (
              this.$umaProLogger.error(e.message),
              this.$umaProLogger.error(e),
              await r('loadUsageStats'),
              e.length &&
              null !== (v = e[0]) &&
              void 0 !== v &&
              null !== (v = v.extensions) &&
              void 0 !== v &&
              v.code
            ) {
              var w,
              k;
              const t = null === (w = e[0]) ||
              void 0 === w ||
              null === (w = w.extensions) ||
              void 0 === w ? void 0 : w.code;
              n(
                'setError',
                {
                  error: (null === (k = O[t]) || void 0 === k ? void 0 : k.message) ||
                  O.GENERIC_ERROR.message
                }
              )
            } else n('setError', {
              error: O.GENERIC_ERROR.message
            });
            f &&
            n('removeNewChat')
          }
          n(y, {
            loader: I,
            flag: !1
          })
        },
        disablePrivacyNotice(e) {
          var t;
          let {
            commit: n,
            state: r
          }
          = e;
          const o = (null === (t = Object(f.a) (x)) || void 0 === t ? void 0 : t.split(',')) ||
          [];
          o.includes(r.userDetails.id) ||
          Object(f.b) (x, [
            ...o,
            r.userDetails.id
          ].join(',')),
          n('setShowPrivacyNotice', {
            showPrivacyNotice: !1
          })
        },
        async deleteChat(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: c
          }
          = e,
          l = 0;
          (null == c ? void 0 : c.selectedChatIndex) > c.chatList.findIndex((e => e.threadId === t)) &&
          (l = 1);
          const d = c.chatList.length <= 1 ||
          c.selectedChatIndex &&
          c.chatList[c.selectedChatIndex].threadId === t;
          await o.a.deleteThread(this, {
            threadId: t
          }),
          n('removeChat', t),
          d ? await r('createNewChat') : n('setSelectedChatIndex', c.selectedChatIndex - l)
        },
        async renameChat(e, t) {
          let {
            commit: n
          }
          = e,
          {
            title: title,
            threadId: r
          }
          = t;
          await o.a.updateThreadTitle(this, {
            title: title,
            threadId: r
          }),
          n('renameChat', {
            title: title,
            threadId: r
          })
        },
        async stopGeneratingAnswer(e) {
          let {
            commit: t,
            state: n
          }
          = e;
          const r = n.chatList[n.selectedChatIndex];
          r &&
          r.pendingQuestion &&
          (
            t('updateChat', {
              threadId: r.threadId,
              data: {
                stopped: !0
              }
            }),
            await o.a.stopGeneratingAnswer(this, {
              questionId: r.pendingQuestion.id
            })
          )
        },
        async updateMessageRating(e, t) {
          let {
            commit: n
          }
          = e,
          {
            threadId: r,
            messageId: c,
            type: l,
            feedback: d = ''
          }
          = t;
          if (!(r && c && l && [
            N.up,
            N.down
          ].includes(l))) return this.$umaProLogger.error('Error in updateMessageRating: invalid params'),
          void n('setError', {
            error: O.GENERIC_ERROR.message
          });
          try {
            const e = await o.a.createMessageRating(this, {
              messageId: c,
              threadId: r,
              type: l,
              feedback: d
            });
            n('setMessageRating', {
              threadId: r,
              messageId: c,
              rating: e
            }),
            n(
              'setSuccessMessage',
              {
                successMessage: 'flgai_chatPro.thanksForYourFeedback'
              }
            ),
            setTimeout((() => {
              n('setSuccessMessage', {
                successMessage: null
              })
            }), 3000)
          } catch (e) {
            this.$umaProLogger.error('Error in updateMessageRating: '.concat(e)),
            n('setError', {
              error: O.GENERIC_ERROR.message
            })
          }
        },
        async getChatProAlreadyUsed() {
          return !!await o.a.getAiToolsUsed(this, C) ||
          !!Object(f.a) (A)
        },
        confirmAiToolUsed() {
          Object(f.b) (A, 'true')
        }
      };
      t.default = {
        namespaced: !0,
        state: P,
        getters: U,
        actions: F,
        mutations: L
      }
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      n.d(t, 'storeName', (function () {
        return h
      })),
      n.d(t, 'SET_THREADS', (function () {
        return v
      })),
      n.d(t, 'SET_USAGE_STATS', (function () {
        return y
      })),
      n.d(t, 'SET_THREAD_CONVERSATION', (function () {
        return w
      })),
      n.d(t, 'SET_USER_DETAILS', (function () {
        return k
      })),
      n.d(t, 'SET_SUGGESTED_PROMPTS', (function () {
        return S
      })),
      n.d(t, 'ASK_QUESTION', (function () {
        return T
      })),
      n.d(t, 'SET_FL_PLUS', (function () {
        return E
      })),
      n.d(
        t,
        'APPLICATION_NAME_FOR_CHAT_PRO_ACCESS_CHECK',
        (function () {
          return I
        })
      ),
      n.d(t, 'THUMBS', (function () {
        return _
      })),
      n.d(t, 'ERROR_CODES', (function () {
        return x
      })),
      n.d(t, 'NEW_THREAD_ID', (function () {
        return A
      })),
      n.d(t, 'newThreadStruct', (function () {
        return O
      })),
      n.d(t, 'isNewThreadId', (function () {
        return D
      })),
      n.d(t, 'CHIP_ACTION', (function () {
        return R
      })),
      n.d(t, 'state', (function () {
        return P
      })),
      n.d(t, 'mutations', (function () {
        return L
      })),
      n.d(t, 'getters', (function () {
        return U
      })),
      n.d(t, 'actions', (function () {
        return F
      }));
      var r = n(0),
      o = n(9);
      class c {
        static getSocket(e) {
          let {
            cookies: t,
            config: r
          }
          = e;
          if (this.socketPromise) return this.socketPromise;
          const o = t.get(''.concat(r.cookiePrefix, 'oauth2_global_js_token'));
          return this.socketPromise = n.e(167).then(n.bind(null, 1158)).then(
            (
              e => {
                let {
                  createSocket: n
                }
                = e;
                const c = t.get('base_domain'),
                l = n(
                  c ? 'https://tl.'.concat(c, '/wp') : r.transportLayerUrl,
                  {
                    trackMessageLength: !0,
                    metric: {
                      flushInterval: 10000,
                      enabled: !0
                    }
                  }
                );
                return Object.assign(
                  l.query,
                  {
                    app: 'uma-llmgw',
                    libVersion: '2.71.0',
                    tml: !0,
                    appVersion: 'unknown',
                    base64: !1,
                    oauth2_token: o
                  }
                ),
                l.on(
                  'disconnect',
                  (
                    e => {
                      'CONN_CLOSED_REASON_AUTH' !== e &&
                      'TOKEN_EXPIRED' !== e &&
                      'LOGOUT' !== e ||
                      console.error('[Transport Layer] reauth not implemented'),
                      'REMOVED_FROM_ORG' !== e &&
                      'INVALID_ORG' !== e ||
                      console.error('[Transport Layer] logout not implemented')
                    }
                  )
                ),
                l.reconnect(),
                l
              }
            )
          ),
          this.socketPromise
        }
        static resetModule() {
          this.socketPromise = null
        }
      }
      c.socketPromise = null;
      var l = n(5),
      d = n(46),
      m = n(10);
      const h = 'umaLlmgw',
      f = 'setLoading',
      v = 'setThreads',
      y = 'setUsageStats',
      w = 'setThreadConversation',
      k = 'setUserDetails',
      S = 'setSuggestedPrompts',
      T = 'askQuestion',
      E = 'setFreelancerPlus',
      I = 'UpworkChatPro',
      _ = {
        up: 'UP',
        down: 'DOWN'
      },
      C = 'uma-pro-privacy-notice',
      N = 'uma-pro-already-used',
      x = {
        GENERIC_ERROR: {
          message: 'flgai_chatPro.genericErrorWarning'
        },
        USER_TOKEN_LIMIT_EXCEEDED: {
          message: 'flgai_chatPro.usageReachedLimitWarning'
        },
        ANSWER_TOKEN_LIMIT_EXCEEDED: {
          message: 'flgai_chatPro.answerTokenLimitExceeded'
        }
      },
      A = '0',
      O = {
        threadId: A,
        title: null,
        createdDateTime: (new Date).toISOString()
      },
      D = e => e === A,
      R = {
        action: 'chipClicked',
        content: {
          key: 'FL_INITIAL_CHIPS'
        }
      },
      P = () => ({
        isLoading: {
          [
            v
          ]: !0
        },
        userDetails: {
        },
        suggestedPrompts: [],
        threads: [],
        selectedThreadIndex: null,
        error: null,
        errorActionLink: {
          label: '',
          url: ''
        },
        successMessage: null,
        showPrivacyNotice: !1,
        usageStats: {
        },
        isFreelancerPlus: null,
        currentAskQuestionRequestUuid: null
      }),
      L = {
        setLoading(e, t) {
          let {
            loader: n,
            flag: r
          }
          = t;
          const o = {
            ...e.isLoading
          };
          o[n] = r,
          e.isLoading = o
        },
        setSuggestedPrompts(e, t) {
          let {
            suggestedPrompts: n
          }
          = t;
          e.suggestedPrompts = n
        },
        setSelectedThreadIndex(e, t) {
          e.selectedThreadIndex = t
        },
        addNewThread(e) {
          e.threads.length &&
          D(e.threads[0].threadId) ||
          e.threads.unshift({
            ...O,
            conversation: []
          }),
          e.selectedThreadIndex = 0
        },
        removeNewThread(e) {
          e.threads.shift()
        },
        removeThread(e, t) {
          const n = e.threads.findIndex((e => e.threadId === t));
          e.threads.splice(n, 1)
        },
        setThreadName(e, t) {
          let {
            title: title,
            threadId: n
          }
          = t;
          const o = e.threads.find((e => e.threadId === n));
          r.default.set(o, 'title', title)
        },
        setThreads(e, t) {
          let {
            threads: n
          }
          = t;
          e.threads = n
        },
        setUserDetails(e, t) {
          let {
            userDetails: n
          }
          = t;
          e.userDetails = n
        },
        setThreadConversation(e, t) {
          let {
            threadId: n,
            threadConversation: o
          }
          = t;
          const c = e.threads.find((e => e.threadId === n));
          r.default.set(c, 'conversation', o)
        },
        setUsageStats(e, t) {
          let {
            usageStats: n
          }
          = t;
          e.usageStats = n
        },
        setFreelancerPlus(e, t) {
          let {
            isFreelancerPlus: n
          }
          = t;
          e.isFreelancerPlus = n
        },
        updateThread(e, t) {
          let {
            threadId: n,
            data: data
          }
          = t;
          const r = e.threads.find((e => e.threadId === n));
          r &&
          (
            r.threadId = data.threadId ||
            r.threadId,
            r.title = data.title ||
            r.title,
            r.createdDateTime = data.createdDateTime ||
            r.createdDateTime
          )
        },
        addMessageToConversation(e, t) {
          let {
            threadId: n,
            message: r
          }
          = t;
          const o = e.threads.find((e => e.threadId === n));
          o &&
          o.conversation.push(r)
        },
        setSavedQuestion(e, t) {
          let {
            threadId: n,
            question: o
          }
          = t;
          const c = e.threads.find((e => e.threadId === n));
          c &&
          r.default.set(c, 'savedQuestion', o)
        },
        setShowPrivacyNotice(e, t) {
          let {
            showPrivacyNotice: n
          }
          = t;
          e.showPrivacyNotice = n
        },
        setError(e, t) {
          let {
            error: n,
            errorActionLink: r = {
              label: '',
              url: ''
            }
          }
          = t;
          e.error = n,
          e.errorActionLink = n ? r : {
            label: '',
            url: ''
          }
        },
        setSuccessMessage(e, t) {
          let {
            successMessage: n
          }
          = t;
          e.successMessage = n
        },
        setMessageRating(e, t) {
          let {
            threadId: n,
            messageId: r,
            rating: o
          }
          = t;
          const c = e.threads.find((e => e.threadId === n));
          if (c) {
            const e = c.conversation.find((e => e.messageId === r));
            e &&
            (e.rating = o)
          }
        },
        upsertStreamingAssistantMessage(e, t) {
          let {
            threadId: n,
            message: o
          }
          = t;
          const c = e.threads.find((e => e.threadId === n));
          if (!c) return;
          const d = c.conversation.findIndex((e => e.messageId === o.messageId));
          if (d > - 1) {
            const e = c.conversation[d],
            t = o.status === l.a.DONE;
            r.default.set(
              c.conversation,
              d,
              {
                ...e,
                ...o,
                content: t ? o.content : e.content + o.content
              }
            )
          } else c.conversation.push({
            ...o,
            role: l.c.ASSISTANT
          })
        },
        setInProgressAssistantMessageToCompleted(e) {
          const t = e.threads[e.selectedThreadIndex];
          if (t) {
            const e = t.conversation.findLast((e => e.role === l.c.ASSISTANT && e.status === l.a.PROGRESSING));
            e &&
            (e.status = l.a.DONE)
          }
        },
        setCurrentAskQuestionRequestUuid(e, t) {
          e.currentAskQuestionRequestUuid = t
        }
      },
      U = {
        currentThreadId(e) {
          var t;
          return null === (t = e.threads[e.selectedThreadIndex]) ||
          void 0 === t ? void 0 : t.threadId
        },
        hasNewThread(e) {
          var t;
          return D(null === (t = e.threads[0]) || void 0 === t ? void 0 : t.threadId)
        },
        firstTimeVisitor(e) {
          var t,
          n;
          return 1 === (null === (t = e.threads) || void 0 === t ? void 0 : t.length) &&
          D(null === (n = e.threads[0]) || void 0 === n ? void 0 : n.threadId)
        },
        isInProgressAssistantMessage(e) {
          var t;
          const n = e.threads[e.selectedThreadIndex];
          return !(
            null == n ||
            null === (t = n.conversation) ||
            void 0 === t ||
            !t.findLast((e => e.role === l.c.ASSISTANT && e.status === l.a.PROGRESSING))
          )
        }
      },
      F = {
        async loadUserDetails(e) {
          var t;
          let {
            commit: n
          }
          = e;
          n(f, {
            loader: k,
            flag: !0
          });
          const r = await o.a.getUserDetails(this);
          n(k, {
            userDetails: r ||
            {
            }
          });
          n(
            'setShowPrivacyNotice',
            {
              showPrivacyNotice: !(
                (null === (t = Object(m.a) (C)) || void 0 === t ? void 0 : t.split(',')) ||
                []
              ).includes(null == r ? void 0 : r.id)
            }
          ),
          n(f, {
            loader: k,
            flag: !1
          })
        },
        async loadSuggestedPrompts() {
        },
        async loadThreads(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: o
          }
          = e,
          {
            threadId: c
          }
          = t;
          n(f, {
            loader: v,
            flag: !0
          });
          const l = (await this.$umaChatClient.getThreads()).sort(
            (
              (a, b) => new Date(null == b ? void 0 : b.lastMessageDateTime) - new Date(null == a ? void 0 : a.lastMessageDateTime)
            )
          ),
          d = null != l &&
          l.length ? l : [
            {
              ...O,
              conversation: []
            }
          ];
          n(v, {
            threads: d
          }),
          c &&
          - 1 !== o.threads.findIndex((e => e.threadId === c)) ? await r('selectThreadById', c) : await r('createNewThread'),
          n(f, {
            loader: v,
            flag: !1
          })
        },
        async loadUsageStats(e) {
          let {
            commit: t
          }
          = e;
          const n = await o.a.getUsageStats(this);
          t(y, {
            usageStats: n
          })
        },
        async loadFreelancerPlus(e) {
          let {
            commit: t
          }
          = e;
          const n = await d.a.getFreelancerPlusStatus(this);
          t(E, {
            isFreelancerPlus: n
          })
        },
        async loadThreadConversation(e, t) {
          let {
            commit: n
          }
          = e,
          {
            threadId: r
          }
          = t;
          n(f, {
            loader: w,
            flag: !0
          });
          const o = await this.$umaChatClient.getThreadHistory({
            threadId: r,
            includeRatings: !0,
            responseFields: [
              'messageId',
              'content',
              'role',
              'createdDateTime',
              {
                rating: [
                  'value',
                  'id',
                  'feedbackText'
                ]
              }
            ]
          });
          n(
            w,
            {
              threadId: r,
              threadConversation: (null == o ? void 0 : o.messages) ||
              []
            }
          ),
          n(f, {
            loader: w,
            flag: !1
          })
        },
        async setupSocket(e) {
          let {
            commit: t,
            dispatch: n
          }
          = e;
          const r = await c.getSocket({
            cookies: this.$cookies,
            config: this.$config
          });
          r.on(
            'chatCompletion',
            (
              async e => {
                n(
                  'logWithAskQuestionRequestUuid',
                  {
                    message: 'Receiving TL message: '.concat(JSON.stringify(e), '.'),
                    type: 'log'
                  }
                ),
                t(
                  'upsertStreamingAssistantMessage',
                  {
                    threadId: e.threadId,
                    message: {
                      messageId: e.messageId,
                      content: e.content,
                      status: e.status
                    }
                  }
                ),
                e.status === l.a.DONE &&
                (
                  n('completeAssistantResponse', {
                    threadId: e.threadId
                  }),
                  await n(
                    'logWithAskQuestionRequestUuid',
                    {
                      message: 'User received the full answer.',
                      type: 'log'
                    }
                  ),
                  t('setCurrentAskQuestionRequestUuid', null),
                  this.$tracker.track({
                    location: 'chat_pro',
                    sublocation: 'question_input',
                    event: 'impression',
                    label: 'answer_received'
                  })
                )
              }
            )
          ),
          r.on(
            'error',
            (
              e => {
                n(
                  'logWithAskQuestionRequestUuid',
                  {
                    message: 'Socket error during Answer generation. Error: '.concat(JSON.stringify(e)),
                    type: 'error'
                  }
                ),
                n('stopGeneratingAnswer')
              }
            )
          )
        },
        async createNewThread(e) {
          let {
            commit: t
          }
          = e;
          await t('addNewThread')
        },
        async selectThreadById(e, t) {
          var n,
          r;
          let {
            commit: o,
            dispatch: c,
            state: l
          }
          = e;
          const d = l.threads.findIndex((e => e.threadId === t)) ||
          0;
          o('setSelectedThreadIndex', d),
          null !== (n = l.threads[d]) &&
          void 0 !== n &&
          null !== (n = n.conversation) &&
          void 0 !== n &&
          n.length ||
          D(null === (r = l.threads[d]) || void 0 === r ? void 0 : r.threadId) ||
          await c('loadThreadConversation', {
            threadId: t
          })
        },
        async retryLastQuestion(e) {
          let {
            dispatch: t,
            state: n
          }
          = e;
          const r = n.threads[n.selectedThreadIndex];
          if ((null == r ? void 0 : r.conversation.length) > 0) {
            const e = r.conversation[r.conversation.length - 1];
            t(
              'askQuestion',
              {
                question: e.question,
                attachedFiles: e.attachedFiles,
                currentThreadId: r.threadId
              }
            )
          }
        },
        async generateThreadTitle(e, t) {
          var n;
          let {
            commit: r
          }
          = e,
          {
            threadId: o,
            currentThread: c
          }
          = t;
          const d = null == c ||
          null === (n = c.conversation) ||
          void 0 === n ? void 0 : n.filter((e => {
            let {
              role: t
            }
            = e;
            return t === l.c.ASSISTANT
          })).length;
          if ((null == c || !c.title) && d >= 1) try {
            const e = await this.$umaChatClient.generateThreadTitle({
              threadId: o,
              responseFields: [
                'threadId',
                'title'
              ]
            });
            null != e &&
            e.title &&
            r('setThreadName', {
              title: e.title,
              threadId: o
            })
          } catch (e) {
            this.$umaLlmgwLogger.error('Failed to generate chat title:', e)
          }
        },
        async askQuestion(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: o
          }
          = e,
          {
            question: c,
            currentThreadId: d
          }
          = t;
          n(f, {
            loader: T,
            flag: !0
          });
          const m = crypto.randomUUID();
          n('setCurrentAskQuestionRequestUuid', m);
          const h = D(d);
          let v = null;
          try {
            n('setError', {
              error: null
            });
            let e = d;
            if (
              r(
                'logWithAskQuestionRequestUuid',
                {
                  message: 'User asked a question: "'.concat(c, '".'),
                  type: 'log'
                }
              ),
              h
            ) {
              const t = await this.$umaChatClient.createThread();
              n('updateThread', {
                threadId: e,
                data: t
              }),
              e = t.threadId,
              r(
                'logWithAskQuestionRequestUuid',
                {
                  message: 'The new thread with id "'.concat(e, '" is created for message: "').concat(c, '".'),
                  type: 'log'
                }
              )
            }
            const t = {
              role: l.c.USER,
              content: c
            };
            n('addMessageToConversation', {
              threadId: e,
              message: t
            }),
            v = setTimeout(
              (
                async() => {
                  e === o.selectedThreadIndex &&
                  (
                    await r('stopGeneratingAnswer'),
                    r(
                      'logWithAskQuestionRequestUuid',
                      {
                        message: 'Timeout while polling USI answer.',
                        type: 'error'
                      }
                    ),
                    n(
                      'setError',
                      {
                        error: 'flgai_retryOnError.text',
                        errorActionLink: {
                          label: 'flgai_retryOnError.action',
                          action: 'umaPro/retryLastQuestion'
                        }
                      }
                    )
                  )
                }
              ),
              100000
            ),
            await this.$umaChatClient.createMessageInThread({
              request: {
                threadId: e,
                message: t.content
              }
            }),
            r(
              'logWithAskQuestionRequestUuid',
              {
                message: 'Question "'.concat(c, '" is sent to API.'),
                type: 'log'
              }
            )
          } catch (e) {
            var y;
            if (
              null !== v &&
              clearTimeout(v),
              e.message &&
              (
                e.message = 'Error while creating a message in the thread: '.concat(e.message)
              ),
              this.$umaLlmgwLogger.error(e),
              await r('stopGeneratingAnswer'),
              e.length &&
              null !== (y = e[0]) &&
              void 0 !== y &&
              null !== (y = y.extensions) &&
              void 0 !== y &&
              y.code
            ) {
              var w,
              k;
              const t = null === (w = e[0]) ||
              void 0 === w ||
              null === (w = w.extensions) ||
              void 0 === w ? void 0 : w.code;
              n(
                'setError',
                {
                  error: (null === (k = x[t]) || void 0 === k ? void 0 : k.message) ||
                  x.GENERIC_ERROR.message
                }
              )
            } else n('setError', {
              error: x.GENERIC_ERROR.message
            });
            h &&
            n('removeNewThread'),
            n(f, {
              loader: T,
              flag: !1
            })
          }
        },
        completeAssistantResponse(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: o
          }
          = e,
          {
            threadId: c
          }
          = t;
          r('loadUsageStats'),
          n('setSavedQuestion', {
            threadId: c,
            question: ''
          });
          const l = o.threads.find((e => e.threadId === c));
          r('generateThreadTitle', {
            threadId: c,
            currentThread: l
          }),
          n(f, {
            loader: T,
            flag: !1
          })
        },
        disablePrivacyNotice(e) {
          var t;
          let {
            commit: n,
            state: r
          }
          = e;
          const o = (null === (t = Object(m.a) (C)) || void 0 === t ? void 0 : t.split(',')) ||
          [];
          o.includes(r.userDetails.id) ||
          Object(m.b) (C, [
            ...o,
            r.userDetails.id
          ].join(',')),
          n('setShowPrivacyNotice', {
            showPrivacyNotice: !1
          })
        },
        async deleteThread(e, t) {
          let {
            commit: n,
            dispatch: r,
            state: o
          }
          = e;
          try {
            let e = 0;
            (null == o ? void 0 : o.selectedThreadIndex) > o.threads.findIndex((e => e.threadId === t)) &&
            (e = 1);
            const c = o.threads.length <= 1 ||
            o.selectedThreadIndex &&
            o.threads[o.selectedThreadIndex].threadId === t;
            if (!await this.$umaChatClient.deleteThread({
              threadId: t
            })) throw new Error('Thread deletion failed '.concat(t));
            n('removeThread', t),
            c ? await r('createNewThread') : n('setSelectedThreadIndex', o.selectedThreadIndex - e)
          } catch (e) {
            this.$umaLlmgwLogger.error(e),
            n('setError', {
              error: x.GENERIC_ERROR.message
            })
          }
        },
        async renameThread(e, t) {
          let {
            commit: n
          }
          = e,
          {
            title: title,
            threadId: r
          }
          = t;
          try {
            const e = await this.$umaChatClient.updateThread({
              request: {
                threadId: r,
                title: title
              },
              responseFields: [
                'threadId',
                'title'
              ]
            });
            if (!e) throw new Error('Chat thread rename failed');
            n('setThreadName', {
              title: e.title,
              threadId: e.threadId
            })
          } catch (e) {
            this.$umaLlmgwLogger.error('Thread renaming failed: '.concat(e)),
            n('setError', {
              error: x.GENERIC_ERROR.message
            })
          }
        },
        async stopGeneratingAnswer(e) {
          let {
            commit: t,
            dispatch: n,
            state: r
          }
          = e;
          t('setInProgressAssistantMessageToCompleted'),
          t('setCurrentAskQuestionRequestUuid', null);
          const o = r.threads[r.selectedThreadIndex];
          if (!o) return;
          const {
            threadId: c
          }
          = o;
          n('completeAssistantResponse', {
            threadId: c
          })
        },
        async updateMessageRating(e, t) {
          let {
            commit: n
          }
          = e,
          {
            threadId: r,
            messageId: o,
            value: c,
            feedbackText: l = ''
          }
          = t;
          if (!(r && o && c && [
            _.up,
            _.down
          ].includes(c))) return this.$umaLlmgwLogger.error('Error in updateMessageRating: invalid params'),
          void n('setError', {
            error: x.GENERIC_ERROR.message
          });
          try {
            const e = await this.$umaChatClient.rateMessage({
              request: {
                messageId: o,
                value: c,
                feedbackText: l
              }
            });
            n('setMessageRating', {
              threadId: r,
              messageId: o,
              rating: e
            }),
            n(
              'setSuccessMessage',
              {
                successMessage: 'flgai_chatPro.thanksForYourFeedback'
              }
            ),
            setTimeout((() => {
              n('setSuccessMessage', {
                successMessage: null
              })
            }), 3000)
          } catch (e) {
            this.$umaLlmgwLogger.error('Error in updateMessageRating: '.concat(e)),
            n('setError', {
              error: x.GENERIC_ERROR.message
            })
          }
        },
        async getChatProAlreadyUsed() {
          return !!await o.a.getAiToolsUsed(this, I) ||
          !!Object(m.a) (N)
        },
        confirmAiToolUsed() {
          Object(m.b) (N, 'true')
        },
        logWithAskQuestionRequestUuid(e, t) {
          let {
            state: n
          }
          = e,
          {
            message: r,
            type: o = 'log'
          }
          = t;
          const c = n.currentAskQuestionRequestUuid,
          l = c ? ''.concat(r, ' Request UUID: "').concat(c, '"') : r;
          this.$umaLlmgwLogger[o](l)
        }
      };
      t.default = {
        namespaced: !0,
        state: P,
        getters: U,
        actions: F,
        mutations: L
      }
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      n.d(t, 'storeName', (function () {
        return o
      })),
      n.d(t, 'getters', (function () {
        return c
      })),
      n.d(t, 'mutations', (function () {
        return l
      })),
      n.d(t, 'actions', (function () {
        return d
      }));
      var r = n(25);
      const o = 'ffs',
      c = {
        isUmaProEnabled(e, t, n) {
          var o,
          c;
          return (null === (o = n.flags) || void 0 === o ? void 0 : o.ff[r.a]) &&
          [
            'Treatment1UmaProWithoutPW',
            'Treatment2UmaProPWCustomModel',
            'Treatment3UmaProPWOpenAI'
          ].includes(null === (c = n.flags) || void 0 === c ? void 0 : c.qt[r.b])
        },
        isUmaProWithPWEnabled(e, t, n) {
          var o,
          c;
          return (null === (o = n.flags) || void 0 === o ? void 0 : o.ff[r.a]) &&
          [
            'Treatment2UmaProPWCustomModel',
            'Treatment3UmaProPWOpenAI'
          ].includes(null === (c = n.flags) || void 0 === c ? void 0 : c.qt[r.b])
        },
        isLlmgwEnabled: e => 'Treatment' === e.statsigExperiments[r.c]
      },
      l = {
        setStatsigExperimentCell(e, t) {
          let {
            name: n,
            cell: r
          }
          = t;
          e.statsigExperiments[n] = r
        }
      },
      d = {
        async loadStatsigExperiments(e) {
          let {
            commit: t
          }
          = e;
          const {
            getExperimentWithRules: n
          }
          = await this.$statsig(),
          o = await n(r.c);
          t('setStatsigExperimentCell', {
            name: r.c,
            cell: o.getGroupName()
          })
        }
      };
      t.default = {
        namespaced: !0,
        state: () => ({
          statsigExperiments: {
          }
        }),
        getters: c,
        mutations: l,
        actions: d
      }
    },
    function (e, t, n) {
      e.exports = n(150)
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      function (e) {
        var t = n(0),
        r = n(86),
        o = n(19),
        c = n(1),
        l = n(16),
        d = n(143),
        m = n(59);
        t.default.__nuxt__fetch__mixin__ ||
        (t.default.mixin(d.a), t.default.__nuxt__fetch__mixin__ = !0),
        t.default.component(m.a.name, m.a),
        t.default.component('NLink', m.a),
        e.fetch ||
        (e.fetch = r.a);
        let h,
        f,
        v,
        y = [];
        const w = window.__NUXT__ ||
        {
        },
        k = w.config ||
        {
        };
        if (
          k._app &&
          (n.p = Object(c.v) (k._app.cdnURL, k._app.assetsPath)),
          Object.assign(
            t.default.config,
            {
              ignoredElements: [
                new RegExp('^up-', ''),
                new RegExp('^impact-', '')
              ],
              silent: !0,
              performance: !1
            }
          ),
          !t.default.config.$nuxt
        ) {
          const e = t.default.config.errorHandler;
          t.default.config.errorHandler = async function (n, r, o) {
            let c = null;
            if ('function' == typeof e) {
              for (var d = arguments.length, m = new Array(d > 3 ? d - 3 : 0), h = 3; h < d; h++) m[h - 3] = arguments[h];
              c = e(n, r, o, ...m)
            }
            if (!0 === c) return c;
            if (r && r.$root) {
              const e = Object.keys(t.default.config.$nuxt).find((e => r.$root[e]));
              if (e && r.$root[e].error && 'render function' !== o) {
                const t = r.$root[e];
                let o = (l.a.options || l.a).layout;
                'function' == typeof o &&
                (o = o(t.context)),
                o &&
                await t.loadLayout(o).catch((() => {
                })),
                t.setLayout(o),
                t.error(n)
              }
            }
            if ('function' == typeof e) return c;
            console.error(n.message || n)
          },
          t.default.config.$nuxt = {}
        }
        t.default.config.$nuxt.$nuxt = !0;
        const S = t.default.config.errorHandler ||
        console.error;
        function T(e, t, n) {
          const r = component => {
            const e = function (component, e) {
              if (!component || !component.options || !component.options[e]) return {
              };
              const option = component.options[e];
              if ('function' == typeof option) {
                for (var t = arguments.length, n = new Array(t > 2 ? t - 2 : 0), r = 2; r < t; r++) n[r - 2] = arguments[r];
                return option(...n)
              }
              return option
            }(component, 'transition', t, n) ||
            {
            };
            return 'string' == typeof e ? {
              name: e
            }
             : e
          },
          o = n ? Object(c.g) (n) : [],
          l = Math.max(e.length, o.length),
          d = [];
          for (let i = 0; i < l; i++) {
            const t = Object.assign({
            }, r(e[i])),
            n = Object.assign({
            }, r(o[i]));
            Object.keys(t).filter((e => void 0 !== t[e] && !e.toLowerCase().includes('leave'))).forEach((e => {
              n[e] = t[e]
            })),
            d.push(n)
          }
          return d
        }
        async function E(e, t, n) {
          this._routeChanged = Boolean(h.nuxt.err) ||
          t.name !== e.name,
          this._paramChanged = !this._routeChanged &&
          t.path !== e.path,
          this._queryChanged = !this._paramChanged &&
          t.fullPath !== e.fullPath,
          this._diffQuery = this._queryChanged ? Object(c.i) (e.query, t.query) : [];
          try {
            if (this._queryChanged) {
              (await Object(c.r) (e, ((e, t) => ({
                Component: e,
                instance: t
              })))).some(
                (
                  n => {
                    let {
                      Component: r,
                      instance: o
                    }
                    = n;
                    const c = r.options.watchQuery;
                    return !0 === c ||
                    (
                      Array.isArray(c) ? c.some((e => this._diffQuery[e])) : 'function' == typeof c &&
                      c.apply(o, [
                        e.query,
                        t.query
                      ])
                    )
                  }
                )
              )
            }
            n()
          } catch (r) {
            const o = r ||
            {
            },
            c = o.statusCode ||
            o.status ||
            o.response &&
            o.response.status ||
            500,
            l = o.message ||
            '';
            if (/^Loading( CSS)? chunk (\d)+ failed\./.test(l)) return void window.location.reload(!0);
            this.error({
              statusCode: c,
              message: l
            }),
            this.$nuxt.$emit('routeChanged', e, t, o),
            n()
          }
        }
        function I(e, t, n, r) {
          let l = [
            'tracking',
            'nuxti18n',
            'metrics'
          ],
          d = !1;
          if (
            void 0 !== n &&
            (
              l = [],
              (n = Object(c.s) (n)).options.middleware &&
              (l = l.concat(n.options.middleware)),
              e.forEach(
                (
                  e => {
                    e.options.middleware &&
                    (l = l.concat(e.options.middleware))
                  }
                )
              )
            ),
            l = l.map(
              (
                e => 'function' == typeof e ? e : (
                  'function' != typeof o.a[e] &&
                  (
                    d = !0,
                    this.error({
                      statusCode: 500,
                      message: 'Unknown middleware ' + e
                    })
                  ),
                  o.a[e]
                )
              )
            ),
            !d
          ) return Object(c.o) (l, t, r)
        }
        async function _(e, t, n, r) {
          if (
            !1 === this._routeChanged &&
            !1 === this._paramChanged &&
            !1 === this._queryChanged
          ) return n();
          let o = !1;
          if (e === t) y = [],
          o = !0;
           else {
            const e = [];
            y = Object(c.g) (t, e).map(((n, i) => Object(c.c) (t.matched[e[i]].path) (t.params)))
          }
          let d = !1;
          await Object(c.t) (
            h,
            {
              route: e,
              from: t,
              error: e => {
                r.aborted ||
                h.nuxt.error.call(this, e)
              },
              next: (path => {
                d ||
                (d = !0, n(path))
              }).bind(this)
            }
          ),
          this._dateLastError = h.nuxt.dateErr,
          this._hadError = Boolean(h.nuxt.err);
          const m = [],
          f = Object(c.g) (e, m);
          if (!f.length) {
            if (await I.call(this, f, h.context, void 0, r), d) return;
            if (r.aborted) return void n(!1);
            const e = (l.a.options || l.a).layout,
            t = await this.loadLayout('function' == typeof e ? e.call(l.a, h.context) : e);
            if (await I.call(this, f, h.context, t, r), d) return;
            return r.aborted ? void n(!1) : (
              h.context.error({
                statusCode: 404,
                message: 'This page could not be found'
              }),
              n()
            )
          }
          f.forEach(
            (
              e => {
                e._Ctor &&
                e._Ctor.options &&
                (
                  e.options.asyncData = e._Ctor.options.asyncData,
                  e.options.fetch = e._Ctor.options.fetch
                )
              }
            )
          ),
          this.setTransitions(T(f, e, t));
          try {
            if (await I.call(this, f, h.context, void 0, r), d) return;
            if (r.aborted) return void n(!1);
            if (h.context._errored) return n();
            let o = f[0].options.layout;
            if (
              'function' == typeof o &&
              (o = o(h.context)),
              o = await this.loadLayout(o),
              await I.call(this, f, h.context, o, r),
              d
            ) return;
            if (r.aborted) return void n(!1);
            if (h.context._errored) return n();
            let l,
            v = !0;
            try {
              for (const e of f) if (
                'function' == typeof e.options.validate &&
                (v = await e.options.validate(h.context), !v)
              ) break
            } catch (e) {
              return this.error({
                statusCode: e.statusCode ||
                '500',
                message: e.message
              }),
              n()
            }
            if (!v) return this.error({
              statusCode: 404,
              message: 'This page could not be found'
            }),
            n();
            if (
              await Promise.all(
                f.map(
                  (
                    async(n, i) => {
                      n._path = Object(c.c) (e.matched[m[i]].path) (e.params),
                      n._dataRefresh = !1;
                      const r = n._path !== y[i];
                      if (this._routeChanged && r) n._dataRefresh = !0;
                       else if (this._paramChanged && r) {
                        const e = n.options.watchParam;
                        n._dataRefresh = !1 !== e
                      } else if (this._queryChanged) {
                        const r = n.options.watchQuery;
                        !0 === r ? n._dataRefresh = !0 : Array.isArray(r) ? n._dataRefresh = r.some((e => this._diffQuery[e])) : 'function' == typeof r &&
                        (
                          l ||
                          (l = Object(c.h) (e)),
                          n._dataRefresh = r.apply(l[i], [
                            e.query,
                            t.query
                          ])
                        )
                      }
                      if (!this._hadError && this._isMounted && !n._dataRefresh) return;
                      const o = [],
                      d = n.options.asyncData &&
                      'function' == typeof n.options.asyncData,
                      f = Boolean(n.options.fetch) &&
                      n.options.fetch.length;
                      if (d) {
                        const e = Object(c.q) (n.options.asyncData, h.context);
                        e.then((e => {
                          Object(c.b) (n, e)
                        })),
                        o.push(e)
                      }
                      if (this.$loading.manual = !1 === n.options.loading, f) {
                        let p = n.options.fetch(h.context);
                        p &&
                        (p instanceof Promise || 'function' == typeof p.then) ||
                        (p = Promise.resolve(p)),
                        p.then((e => {
                        })),
                        o.push(p)
                      }
                      return Promise.all(o)
                    }
                  )
                )
              ),
              !d
            ) {
              if (r.aborted) return void n(!1);
              n()
            }
          } catch (o) {
            if (r.aborted) return void n(!1);
            const d = o ||
            {
            };
            if ('ERR_REDIRECT' === d.message) return this.$nuxt.$emit('routeChanged', e, t, d);
            y = [],
            Object(c.k) (d);
            let m = (l.a.options || l.a).layout;
            'function' == typeof m &&
            (m = m(h.context)),
            await this.loadLayout(m),
            this.error(d),
            this.$nuxt.$emit('routeChanged', e, t, d),
            n()
          }
        }
        function C(e, n) {
          Object(c.d) (
            e,
            (
              (e, n, r, o) => (
                'object' != typeof e ||
                e.options ||
                ((e = t.default.extend(e))._Ctor = e, r.components[o] = e),
                e
              )
            )
          )
        }
        function N(e) {
          let t = Boolean(this.$options.nuxt.err);
          this._hadError &&
          this._dateLastError === this.$options.nuxt.dateErr &&
          (t = !1);
          let n = t ? (l.a.options || l.a).layout : e.matched[0].components.default.options.layout;
          'function' == typeof n &&
          (n = n(h.context)),
          this.setLayout(n)
        }
        function x(e) {
          e._hadError &&
          e._dateLastError === e.$options.nuxt.dateErr &&
          e.error()
        }
        function A(e, n) {
          if (
            !1 === this._routeChanged &&
            !1 === this._paramChanged &&
            !1 === this._queryChanged
          ) return;
          const r = Object(c.h) (e),
          o = Object(c.g) (e);
          let l = !1;
          t.default.nextTick(
            (
              () => {
                r.forEach(
                  (
                    (e, i) => {
                      if (
                        e &&
                        !e._isDestroyed &&
                        e.constructor._dataRefresh &&
                        o[i] === e.constructor &&
                        !0 !== e.$vnode.data.keepAlive &&
                        'function' == typeof e.constructor.options.data
                      ) {
                        const n = e.constructor.options.data.call(e);
                        for (const r in n) t.default.set(e.$data, r, n[r]);
                        l = !0
                      }
                    }
                  )
                ),
                l &&
                window.$nuxt.$nextTick((() => {
                  window.$nuxt.$emit('triggerScroll')
                })),
                x(this)
              }
            )
          )
        }
        Object(l.b) (null, w.config).then(
          (
            async function (e) {
              h = e.app,
              f = e.router,
              v = e.store;
              const n = new t.default(h),
              r = w.layout ||
              'default';
              await n.loadLayout(r),
              n.setLayout(r);
              const o = () => {
                n.$mount('#__nuxt'),
                f.afterEach(C),
                f.afterEach(N.bind(n)),
                f.afterEach(A.bind(n)),
                t.default.nextTick(
                  (
                    () => {
                      !function (e) {
                        window.onNuxtReadyCbs.forEach((t => {
                          'function' == typeof t &&
                          t(e)
                        })),
                        'function' == typeof window._onNuxtLoaded &&
                        window._onNuxtLoaded(e);
                        f.afterEach(
                          (
                            (n, r) => {
                              t.default.nextTick((() => e.$nuxt.$emit('routeChanged', n, r)))
                            }
                          )
                        )
                      }(n)
                    }
                  )
                )
              },
              l = await Promise.all(
                (
                  d = h.context.route,
                  Object(c.d) (
                    d,
                    (
                      async(e, t, n, r, o) => {
                        'function' != typeof e ||
                        e.options ||
                        (e = await e());
                        const l = function (e, t) {
                          return w.serverRendered &&
                          t &&
                          Object(c.b) (e, t),
                          e._Ctor = e,
                          e
                        }(Object(c.s) (e), w.data ? w.data[o] : null);
                        return n.components[r] = l,
                        l
                      }
                    )
                  )
                )
              );
              var d;
              n.setTransitions = n.$options.nuxt.setTransitions.bind(n),
              l.length &&
              (
                n.setTransitions(T(l, f.currentRoute)),
                y = f.currentRoute.matched.map((e => Object(c.c) (e.path) (f.currentRoute.params)))
              );
              n.$loading = {},
              w.error &&
              n.error(w.error);
              f.beforeEach(E.bind(n));
              let m = null;
              const k = _.bind(n);
              if (
                f.beforeEach(((e, t, n) => {
                  m &&
                  (m.aborted = !0),
                  m = {
                    aborted: !1
                  },
                  k(e, t, n, m)
                })),
                w.serverRendered &&
                Object(c.n) (w.routePath, n.context.route.path)
              ) return o();
              const I = () => {
                C(f.currentRoute, f.currentRoute),
                N.call(n, f.currentRoute),
                x(n),
                o()
              };
              await new Promise((e => setTimeout(e, 0))),
              _.call(
                n,
                f.currentRoute,
                f.currentRoute,
                (
                  path => {
                    if (!path) return void I();
                    const e = f.afterEach(((t, n) => {
                      e(),
                      I()
                    }));
                    f.push(path, void 0, (e => {
                      e &&
                      S(e)
                    }))
                  }
                ),
                {
                  aborted: !1
                }
              )
            }
          )
        ).catch(S)
      }.call(this, n(43))
    },
    function (e, t, n) {
      'use strict';
      n.r(t),
      t.default = async e => {
        let {
          store: t,
          error: n,
          i18n: r
        }
        = e;
        await t.dispatch('context/ready');
        const {
          orgs: {
            current: {
              type: o,
              legacyType: c
            }
          }
        }
        = t.state;
        return 'SOLE_PROPRIETOR' === o &&
        'VENDOR' === c ? null : n({
          statusCode: 403,
          contextSwitchMenu: !0,
          title: r.t('flgai_onlyFreelancers')
        })
      }
    },
    function (module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var _upwork_nuxt_core_src_modules_feature_flags_get_features_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88),
      _upwork_nuxt_core_src_flags_overrides__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(89);
      function createGetFeatureFlagServer(ssrContext, cookies) {
        const nodeRequire = eval('require'),
        getFeatureFlagServer = nodeRequire(
          '@upwork/nuxt-core/src/modules/router/get-feature-flag-server'
        ).default;
        return e => {
          const t = getFeatureFlagServer({
            name: e,
            ssrContext: ssrContext,
            cookies: cookies
          });
          return ssrContext.nuxt.air3FFs ||
          (ssrContext.nuxt.air3FFs = {}),
          ssrContext.nuxt.air3FFs[e] = t,
          t
        }
      }
      function createGetFeatureFlagClient(e) {
        let t,
        n;
        return r => {
          const o = window.__NUXT__.air3FFs ||
          {
          };
          return r in o ? o[r] : (
            t = t ||
            Object(
              _upwork_nuxt_core_src_flags_overrides__WEBPACK_IMPORTED_MODULE_1__.a
            ) (
              Object.fromEntries(new URLSearchParams(window.location.search)),
              'ff'
            ),
            r in t ? t[r] : (
              n = n ||
              Object(
                _upwork_nuxt_core_src_modules_feature_flags_get_features_state__WEBPACK_IMPORTED_MODULE_0__.a
              ) ({
                enabledFeatures: e.get('enabled_ff'),
                featureOverride: e.get('feature_override')
              }),
              n[r]
            )
          )
        }
      }
      function createGetFeatureFlag(e, t) {
        return createGetFeatureFlagClient(t)
      }
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function (e, t, n) {
      'use strict';
      n(75)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        '.nav-logo{display:inline-flex;width:var(--nav-logo-width)}.nav-logo svg{height:100%;width:100%}@media (forced-colors:active){.nav-logo path,.nav-logo polygon,.nav-logo svg{fill:currentColor!important}}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      n(76)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        '.nav-skeleton{align-items:center;display:flex;height:var(--nav-height);justify-content:center;margin:0 auto;padding:0 var(--nav-container-padding);width:min(var(--nav-container-width),var(--nav-container-max-width))}.nav-skeleton-spacer{flex-grow:5}.nav-skeleton-icons{margin-right:var(--nav-ws-3x);width:510px}.nav-skeleton-avatar{height:var(--nav-user-avatar-size);width:var(--nav-user-avatar-size)}@container (max-width: 991.98px){.nav-m-none{display:none}}.nav-skeleton-shape{--nav-skeleton-bg:var(--bg-placeholder-muted-dark);--nav-skeleton-radius:var(--radius-8x);--nav-skeleton-border-color:transparent!important;background:var(--bg-placeholder-muted-dark);background:var(--nav-skeleton-bg);border:0;border:var(--hc-border,0);border-color:transparent;border-color:var(\n    --nav-skeleton-border-color\n  );border-radius:var(--radius-8x);border-radius:var(--nav-skeleton-radius);min-height:1.5em;overflow:hidden;position:relative;z-index:0}.nav-skeleton-shape:before{--nav-skeleton-bg-shimmer:var(--bg-placeholder-muted-light);--nav-skeleton-shimmer-offset:250px;animation:nav-shimmer 1.5s linear 0s infinite forwards;animation:var(\n    --reduced-motion,nav-shimmer 1.5s linear 0s forwards infinite\n  );background-image:linear-gradient(to right,transparent,var(--bg-placeholder-muted-light),transparent);background-image:linear-gradient(to right,transparent,var(--nav-skeleton-bg-shimmer),transparent);bottom:0;content:"";height:100%;left:0;min-width:250px;min-width:var(--nav-skeleton-shimmer-offset);position:absolute;right:0;top:0;z-index:1}.nav-skeleton-shape-circle{border-radius:50%}@keyframes nav-shimmer{0%{transform:translateX(-100%)}to{transform:translateX(100%)}}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      n(77)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push([e.i,
      '.air3-sudo-alert{margin-bottom:var(--ws-8x)}',
      '']),
      r.locals = {},
      e.exports = r
    },
    ,
    ,
    ,
    function (e, t, n) {
      'use strict';
      n(79)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        ':root{--nc-user-nav-height:var(--ma-u-nav-height,64px)}@media (max-width:991.98px){:root{--nc-user-nav-height:var(--ma-u-nav-height,56px)}}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      (function (e, t) {
        n(40),
        n(130),
        n(131)
      }).call(this, n(43), n(22))
    },
    function (e, t, n) {
      'use strict';
      e.exports = 'object' == typeof self ? self.FormData : window.FormData
    },
    ,
    ,
    ,
    ,
    function (e, t, n) {
      'use strict';
      n(81)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        '.nav-skeleton{align-items:center;display:flex;height:var(--nav-height);justify-content:center;margin:0 auto;padding:0 var(--nav-container-padding);width:min(var(--nav-container-width),var(--nav-container-max-width))}.nav-skeleton-spacer{flex-grow:5}.nav-skeleton-icons{margin-right:var(--nav-ws-3x);width:510px}.nav-skeleton-avatar{height:var(--nav-user-avatar-size);width:var(--nav-user-avatar-size)}@media (max-width:991.98px){.nav-m-none{display:none}}.nav-skeleton-shape-circle{border-radius:50%}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      n(82)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        '.user-skinny-app-skeleton{position:absolute;width:100%}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      n(83)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        '#visitor-skinny-app-container.visitor-nav-skinny-placeholder[data-v-0bb4951d]{height:var(--nc-v-skinny-nav-height);position:fixed;width:100%;z-index:var(--zindex-navbar-fixed)}#visitor-skinny-app-container.visitor-nav-skinny-placeholder header[data-v-0bb4951d]{align-items:center;display:flex;height:var(--nc-v-skinny-nav-height);margin:0 auto;max-width:1600px;padding:0 24px}@media (max-width:990px){#visitor-skinny-app-container.visitor-nav-skinny-placeholder header[data-v-0bb4951d]{padding:0 var(--ws-mobile-x)}}#visitor-skinny-app-container.visitor-nav-skinny-placeholder .nav-logo[data-v-0bb4951d]{flex-shrink:0;margin-right:25px;width:82px}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      'use strict';
      n(84)
    },
    function (e, t, n) {
      var r = n(7) ((function (i) {
        return i[1]
      }));
      r.push(
        [e.i,
        '.nc-u-nav-placeholder[data-v-5de0d0d2]{--nav-height:var(--nc-user-nav-height);position:absolute;width:100%}',
        '']
      ),
      r.locals = {},
      e.exports = r
    },
    function (e, t, n) {
      e.exports = n.p + 'img/chatpro-favicon.b3a3b34.png'
    }
  ],
  [
    [149,
    123,
    75,
    139]
  ]]
);
//# sourceMappingURL=https://upwork-usw2-staging-assets-jsmaps.s3.us-west-2.amazonaws.com/FlGenAiNuxt/app.3fea0a78.js.map
